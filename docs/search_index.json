[["index.html", "SfM Processing Software Comparison Section 1 Introduction", " SfM Processing Software Comparison George Woolsey 02 August, 2024 Section 1 Introduction The objective of this study is to determine the influence of different structure from motion (SfM) software (e.g. Agisoft Metashap, OpenDroneMap, Pix4D) and processing parameters on processing and forest measurement outcomes. This analysis builds on Tinkham and Swayze (2021) by including UAS flights from different forests and by also comparing different SfM processing software. UAS flights from the following forests were included: the Manitou Experimental Forest on the Pike-San Isabel National Forest (Colorado; “N1”), the Black Hills Experimental Forest on the Black Hills National Forest (South Dakota; “SQ02_04”, “SQ09_02”, “WA85_02”), and the Lookout Canyon area in the Kaibab National Forest (Arizona; “Kaibab_High”, “Kaibab_Low”). "],["sfm_data.html", "Section 2 SfM Image Processing Data 2.1 User-Defined Parameters 2.2 Metashape Image Processing 2.3 Metashape Report Data Exploration", " Section 2 SfM Image Processing Data This section extracts data from the SfM image processing software reports (usually in pdf format) and reports summary statistics on processing time. 2.1 User-Defined Parameters Parameters to be set by the user # !!!!!!!!!!!!!!!!!!!!!!! USER-DEFINED PARAMETERS !!!!!!!!!!!!!!!!!!!!!!! # ###____________________### ### Set directory for outputs ### ###____________________### # rootdir = &quot;../data&quot; rootdir = &quot;../data&quot; ###_________________________### ### Set pdf data directory ### ###_________________________### # !!!!!!!!!! this is where pdf report data resides # !!!!!!!!!! files should be named in the format {quality}_{depth map filtering}.pdf # !!!!!!!!!! for example: high_aggressive.pdf; UltraHigh_Disabled.pdf; lowest_MILD.pdf pdf_report_dir = &quot;../data/raw_data&quot; ###_________________________### ### Set point cloud processing data directory ### ###_________________________### # !!!!!!!!!! this is where the outputs of the software_point_cloud_processing.R script are located # !!!!!!!!!! script will look for &quot;processed_tracking_data\\\\.csv&quot; files ptcld_processing_dir = &quot;D:/SfM_Software_Comparison&quot; ###_________________________### ### list of study site directory names ###_________________________### # !!!!!!!!!! this is where both pdf and las data reside # directories matching the names of these study sites will be searched # arrange processed data in file structure that includes the software and the site # ... with the processing attributes in the file name # ex: &quot;../metashape/N1/high_aggressive_processed_tracking_data.csv&quot; # what sites to look for? study_site_list = c( &quot;SQ09_02&quot;, &quot;WA85_02&quot; , &quot;Kaibab_High&quot;, &quot;Kaibab_Low&quot; , &quot;n1&quot; # , &quot;SQ02_04&quot; # SQ09_02 and SQ02_04 have same imagery? ) # what softwares to look for? software_list = c(&quot;metashape&quot;, &quot;pix4d&quot;, &quot;opendronemap&quot;) # !!!!!!!!!!!!!!!!!!!!!!! USER-DEFINED PARAMETERS !!!!!!!!!!!!!!!!!!!!!!! # 2.2 Metashape Image Processing Search for the list of Agisoft Metashape processing report pdf files to extract information from in the user-defined pdf_report_dir directory. Parse the list of files to extract processing information and study site information from. # get list of files and directories to read from pdf_list = list.files(normalizePath(pdf_report_dir), pattern = &quot;.*\\\\.(pdf)$&quot;, full.names = T, recursive = T) # set up data.frame for processing pdf_list_df = dplyr::tibble( file_full_path = pdf_list ) %&gt;% dplyr::mutate( study_site = file_full_path %&gt;% stringr::word(-1, sep = fixed(normalizePath(pdf_report_dir))) %&gt;% toupper() %&gt;% stringr::str_extract(pattern = paste(toupper(study_site_list),collapse = &quot;|&quot;)) , quality_filtering = file_full_path %&gt;% stringr::word(-1, sep = fixed(&quot;/&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;.&quot;)) %&gt;% toupper() , metashape_quality = quality_filtering %&gt;% stringr::word(1, sep = fixed(&quot;_&quot;)) , metashape_depthmap_filtering = quality_filtering %&gt;% stringr::word(-1, sep = fixed(&quot;_&quot;)) ) # pdf_list_df pdf_list_df %&gt;% dplyr::select(-file_full_path) %&gt;% dplyr::slice_sample(n=15) %&gt;% dplyr::arrange(study_site,quality_filtering) %&gt;% kableExtra::kbl(caption=paste0(&quot;Sample of study site reports extracted from raw data directory (&quot;, nrow(pdf_list_df), &quot; files detected)&quot;)) %&gt;% kableExtra::kable_styling() Table 2.1: Sample of study site reports extracted from raw data directory (120 files detected) study_site quality_filtering metashape_quality metashape_depthmap_filtering KAIBAB_HIGH HIGH_DISABLED HIGH DISABLED KAIBAB_HIGH LOW_DISABLED LOW DISABLED KAIBAB_HIGH MEDIUM_AGGRESSIVE MEDIUM AGGRESSIVE KAIBAB_HIGH MEDIUM_MILD MEDIUM MILD KAIBAB_LOW LOWEST_AGGRESSIVE LOWEST AGGRESSIVE KAIBAB_LOW LOWEST_MODERATE LOWEST MODERATE N1 MEDIUM_AGGRESSIVE MEDIUM AGGRESSIVE N1 MEDIUM_DISABLED MEDIUM DISABLED SQ09_02 LOWEST_MODERATE LOWEST MODERATE SQ09_02 MEDIUM_DISABLED MEDIUM DISABLED SQ09_02 MEDIUM_MILD MEDIUM MILD SQ09_02 ULTRAHIGH_MODERATE ULTRAHIGH MODERATE WA85_02 MEDIUM_DISABLED MEDIUM DISABLED NA HIGH_DISABLED HIGH DISABLED NA MEDIUM_MODERATE MEDIUM MODERATE 2.2.1 Metashape Report PDF Data Extraction Define function to extract data from the Agisoft Metashpae pdf reports ### function to extract time value parse_time_value_fn &lt;- function(val) { val = tolower(val) # seconds seconds = dplyr::case_when( stringr::str_detect(val, pattern = &quot;seconds&quot;) ~ stringr::word(val, start = 1, sep = &quot;seconds&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # minutes minutes = dplyr::case_when( stringr::str_detect(val, pattern = &quot;minutes&quot;) ~ stringr::word(val, start = 1, sep = &quot;minutes&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # hours hours = dplyr::case_when( stringr::str_detect(val, pattern = &quot;hours&quot;) ~ stringr::word(val, start = 1, sep = &quot;hours&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # combine time_mins = (seconds/60) + minutes + (hours*60) return(time_mins) } ### function to extract memory value parse_memory_value_fn &lt;- function(val) { val = tolower(val) # kb kb = dplyr::case_when( stringr::str_detect(val, pattern = &quot;kb&quot;) ~ stringr::word(val, start = 1, sep = &quot;kb&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # mb mb = dplyr::case_when( stringr::str_detect(val, pattern = &quot;mb&quot;) ~ stringr::word(val, start = 1, sep = &quot;mb&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # gb gb = dplyr::case_when( stringr::str_detect(val, pattern = &quot;gb&quot;) ~ stringr::word(val, start = 1, sep = &quot;gb&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::word(start = -1) , T ~ &quot;0&quot; ) %&gt;% as.numeric() # combine mem_mb = (kb/1000) + mb + (gb*1000) return(mem_mb) } # read each agisoft metashape report pdf and extract metrics extract_metashape_report_data_fn &lt;- function(file_path) { # read the pdf pdf_text_ans = pdftools::pdf_text(file_path) ############################## # pull data out ############################## ###################################### ### page 4 table ###################################### table_st_temp = pdf_text_ans[4] %&gt;% stringr::str_locate(&quot;X error&quot;) %&gt;% .[1,1] table_end_temp = (pdf_text_ans[4] %&gt;% stringr::str_locate(&quot;Table 3&quot;) %&gt;% .[1,1])-1 # matrix table_rows_temp = pdf_text_ans[4] %&gt;% substr( start = table_st_temp , stop = table_end_temp ) %&gt;% stringr::str_split(pattern = fixed(&quot;\\n&quot;), simplify = T) %&gt;% trimws() # are units in m or cm? use_m_or_cm = dplyr::case_when( stringr::str_detect(table_rows_temp[1,1], &quot;\\\\(m\\\\)&quot;) ~ &quot;\\\\(m\\\\)&quot; , stringr::str_detect(table_rows_temp[1,1], &quot;\\\\(cm\\\\)&quot;) ~ &quot;\\\\(cm\\\\)&quot; , T ~ &quot;&quot; ) # pull names names_temp = table_rows_temp[1,1] %&gt;% stringr::str_split(pattern = use_m_or_cm, simplify = T) %&gt;% trimws() %&gt;% stringi::stri_remove_empty_na() %&gt;% stringr::str_replace_all(&quot;\\\\s&quot;,&quot;_&quot;) %&gt;% tolower() # pull data page4_dta_temp = table_rows_temp[1,2:ncol(table_rows_temp)] %&gt;% stringr::str_replace_all(&quot;\\\\s{2,}&quot;, &quot;,&quot;) %&gt;% stringi::stri_remove_empty_na() %&gt;% textConnection() %&gt;% read.csv( sep = &quot;,&quot; , header = F , col.names = names_temp ) %&gt;% dplyr::as_tibble() %&gt;% dplyr::mutate( dplyr::across( .cols = tidyselect::everything() , .fns = ~ dplyr::case_when( use_m_or_cm == &quot;\\\\(m\\\\)&quot; ~ .x , use_m_or_cm == &quot;\\\\(cm\\\\)&quot; ~ .x/100 , T ~ as.numeric(NA) ) ) ) %&gt;% dplyr::rename_with(~ paste0(.x,&quot;_m&quot;, recycle0 = TRUE)) ###################################### ### page 6 table ###################################### page6_dta_temp = pdf_text_ans[6] %&gt;% stringr::str_remove(&quot;Processing Parameters\\n\\n&quot;) %&gt;% stringr::str_split(pattern = fixed(&quot;\\n&quot;), simplify = T) %&gt;% trimws() %&gt;% stringr::str_replace_all(&quot;\\\\s{2,}&quot;, &quot;|&quot;) %&gt;% textConnection() %&gt;% read.csv( sep = &quot;|&quot; , header = F , col.names = c(&quot;var&quot;, &quot;val&quot;) ) %&gt;% dplyr::as_tibble() %&gt;% dplyr::mutate( val = val %&gt;% stringr::str_squish() %&gt;% tolower() , is_header = is.na(val) | val == &quot;&quot; , heading_grp = cumsum(is_header) ) %&gt;% dplyr::group_by(heading_grp) %&gt;% dplyr::mutate( heading_nm = dplyr::first(var) %&gt;% tolower() %&gt;% stringr::str_remove_all(&quot;parameters&quot;) %&gt;% stringr::str_squish() %&gt;% stringr::str_replace_all(&quot;\\\\s&quot;, &quot;_&quot;) ) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate( new_var = paste0( heading_nm , &quot;_&quot; , var %&gt;% tolower() %&gt;% stringr::str_replace_all(&quot;\\\\s&quot;, &quot;_&quot;) ) ) %&gt;% dplyr::filter(is_header==F) %&gt;% dplyr::select(new_var, val) %&gt;% dplyr::distinct() %&gt;% dplyr::mutate( val = dplyr::case_when( stringr::str_ends(new_var, &quot;_time&quot;) ~ parse_time_value_fn(val) %&gt;% as.character() , stringr::str_ends(new_var, &quot;_memory_usage&quot;) ~ parse_memory_value_fn(val) %&gt;% as.character() , stringr::str_ends(new_var, &quot;_file_size&quot;) ~ parse_memory_value_fn(val) %&gt;% as.character() , T ~ val ) , new_var = dplyr::case_when( stringr::str_ends(new_var, &quot;_time&quot;) ~ paste0(new_var, &quot;_mins&quot;) , stringr::str_ends(new_var, &quot;_memory_usage&quot;) ~ paste0(new_var, &quot;_mb&quot;) , stringr::str_ends(new_var, &quot;_file_size&quot;) ~ paste0(new_var, &quot;_mb&quot;) , T ~ new_var ) ) %&gt;% tidyr::pivot_wider(names_from = new_var, values_from = val) %&gt;% dplyr::mutate( dplyr::across( .cols = c( tidyselect::ends_with(&quot;_mins&quot;) , tidyselect::ends_with(&quot;_mb&quot;) , tidyselect::ends_with(&quot;_count&quot;) , tidyselect::ends_with(&quot;_cameras&quot;) , dense_point_cloud_points ) , .fns = ~ readr::parse_number(.x) ) ) %&gt;% dplyr::mutate( total_dense_point_cloud_processing_time_mins = ( dense_cloud_generation_processing_time_mins + depth_maps_generation_processing_time_mins ) , total_sparse_point_cloud_processing_time_mins = ( alignment_matching_time_mins + alignment_alignment_time_mins ) ) ###################################### ### full pdf data ###################################### pdf_data_temp = dplyr::tibble( file_full_path = file_path # pdf page 1 , pdf_title = pdf_text_ans[1] %&gt;% stringr::word(1, sep = fixed(&quot;\\n&quot;)) # pdf page 2 , number_of_images = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Number of images:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;Camera stations:&quot;)) %&gt;% readr::parse_number() , flying_altitude_m = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Flying altitude:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot; m &quot;)) %&gt;% readr::parse_number() , tie_points = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Tie points:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;\\n&quot;)) %&gt;% readr::parse_number() , ground_resolution_cm_pix = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Ground resolution:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;cm&quot;)) %&gt;% readr::parse_number() , coverage_area_km2 = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Coverage area:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;km&quot;)) %&gt;% readr::parse_number() , reprojection_error_pix = pdf_text_ans[2] %&gt;% stringr::word(-1, sep = fixed(&quot;Reprojection error:&quot;)) %&gt;% stringr::word(1, sep = fixed(&quot;pix&quot;)) %&gt;% readr::parse_number() ) %&gt;% dplyr::bind_cols(page4_dta_temp, page6_dta_temp) # return return(pdf_data_temp) } Build a data table using the pdf data extraction function for each pdf report file found in the raw data directory # map function over list of files pdf_data_temp = pdf_list_df$file_full_path %&gt;% purrr::map(extract_metashape_report_data_fn) %&gt;% dplyr::bind_rows() # combine with original data if(nrow(pdf_data_temp) != nrow(pdf_list_df)){stop(&quot;extract_metashape_report_data_fn failed...check missing data or duplicated data&quot;)}else{ pdf_list_df = pdf_list_df %&gt;% left_join(pdf_data_temp, by = dplyr::join_by(&quot;file_full_path&quot;)) %&gt;% dplyr::mutate( depth_maps_generation_quality = factor( depth_maps_generation_quality , ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = factor( depth_maps_generation_filtering_mode , ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) } Write out data ## write out data pdf_list_df %&gt;% dplyr::select(-c( file_full_path, metashape_quality , metashape_depthmap_filtering, quality_filtering , pdf_title )) %&gt;% dplyr::relocate( c( depth_maps_generation_quality, depth_maps_generation_filtering_mode , total_sparse_point_cloud_processing_time_mins , total_dense_point_cloud_processing_time_mins , dense_point_cloud_points , dense_cloud_generation_file_size_mb , tidyselect::ends_with(&quot;_error_m&quot;) ) , .after = study_site ) %&gt;% dplyr::arrange( study_site, depth_maps_generation_quality, depth_maps_generation_filtering_mode ) %&gt;% dplyr::mutate( dplyr::across( .cols = c(depth_maps_generation_quality, depth_maps_generation_filtering_mode) , .fns = ~ stringr::str_to_title(.x) ) ) %&gt;% write.csv( file = paste0(rootdir, &quot;/metashape_processing_data.csv&quot;) , row.names = F ) 2.3 Metashape Report Data Exploration 2.3.1 Preliminaries What does the data look like? pdf_list_df %&gt;% dplyr::glimpse() ## Rows: 120 ## Columns: 56 ## $ file_full_path &lt;chr&gt; &quot;C:\\\\Data\\\\usfs\\\\metasha… ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_H… ## $ quality_filtering &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH… ## $ metashape_quality &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, … ## $ metashape_depthmap_filtering &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;… ## $ pdf_title &lt;chr&gt; &quot;High_Aggressive&quot;, &quot;High… ## $ number_of_images &lt;dbl&gt; 132, 132, 132, 132, 132,… ## $ flying_altitude_m &lt;dbl&gt; 94.1, 94.1, 94.1, 94.1, … ## $ tie_points &lt;dbl&gt; 109282, 109282, 109282, … ## $ ground_resolution_cm_pix &lt;dbl&gt; 2.26, 2.18, 2.20, 2.19, … ## $ coverage_area_km2 &lt;dbl&gt; 0.0396, 0.0399, 0.0396, … ## $ reprojection_error_pix &lt;dbl&gt; 0.704, 0.704, 0.704, 0.7… ## $ x_error_m &lt;dbl&gt; 1.420520, 1.420520, 1.42… ## $ y_error_m &lt;dbl&gt; 1.029610, 1.029610, 1.02… ## $ z_error_m &lt;dbl&gt; 0.475722, 0.475722, 0.47… ## $ xy_error_m &lt;dbl&gt; 1.754410, 1.754410, 1.75… ## $ total_error_m &lt;dbl&gt; 1.817770, 1.817770, 1.81… ## $ general_cameras &lt;dbl&gt; 132, 132, 132, 132, 132,… ## $ general_aligned_cameras &lt;dbl&gt; 132, 132, 132, 132, 132,… ## $ general_coordinate_system &lt;chr&gt; &quot;w gs 84 (epsg::4326)&quot;, … ## $ general_rotation_angles &lt;chr&gt; &quot;yaw, pitch, roll&quot;, &quot;yaw… ## $ point_cloud_points &lt;chr&gt; &quot;109,282 of 118,009&quot;, &quot;1… ## $ point_cloud_rms_reprojection_error &lt;chr&gt; &quot;0.149663 (0.703638 pix)… ## $ point_cloud_max_reprojection_error &lt;chr&gt; &quot;0.453748 (34.8372 pix)&quot;… ## $ point_cloud_mean_key_point_size &lt;chr&gt; &quot;3.80033 pix&quot;, &quot;3.80033 … ## $ point_cloud_point_colors &lt;chr&gt; &quot;3 bands, uint8&quot;, &quot;3 ban… ## $ point_cloud_key_points &lt;chr&gt; &quot;no&quot;, &quot;no&quot;, &quot;no&quot;, &quot;no&quot;, … ## $ point_cloud_average_tie_point_multiplicity &lt;chr&gt; &quot;3.56183&quot;, &quot;3.56183&quot;, &quot;3… ## $ alignment_accuracy &lt;chr&gt; &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, … ## $ alignment_generic_preselection &lt;chr&gt; &quot;yes&quot;, &quot;yes&quot;, &quot;yes&quot;, &quot;ye… ## $ alignment_reference_preselection &lt;chr&gt; &quot;source&quot;, &quot;source&quot;, &quot;sou… ## $ alignment_key_point_limit &lt;chr&gt; &quot;40,000&quot;, &quot;40,000&quot;, &quot;40,… ## $ alignment_tie_point_limit &lt;chr&gt; &quot;4,000&quot;, &quot;4,000&quot;, &quot;4,000… ## $ alignment_guided_image_matching &lt;chr&gt; &quot;no&quot;, &quot;no&quot;, &quot;no&quot;, &quot;no&quot;, … ## $ alignment_adaptive_camera_model_fitting &lt;chr&gt; &quot;yes&quot;, &quot;yes&quot;, &quot;yes&quot;, &quot;ye… ## $ alignment_matching_time_mins &lt;dbl&gt; 1.116667, 1.116667, 1.11… ## $ alignment_matching_memory_usage_mb &lt;dbl&gt; 375.78, 375.78, 375.78, … ## $ alignment_alignment_time_mins &lt;dbl&gt; 0.4833333, 0.4833333, 0.… ## $ alignment_alignment_memory_usage_mb &lt;dbl&gt; 66.08, 66.08, 66.08, 66.… ## $ alignment_software_version &lt;chr&gt; &quot;1.6.4.10928&quot;, &quot;1.6.4.10… ## $ alignment_file_size_mb &lt;dbl&gt; 9.27, 9.27, 9.27, 9.27, … ## $ depth_maps_count &lt;dbl&gt; 132, 132, 132, 132, 132,… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, … ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, disabled, mi… ## $ depth_maps_generation_processing_time_mins &lt;dbl&gt; 15.2500000, 15.8166667, … ## $ depth_maps_generation_memory_usage_mb &lt;dbl&gt; 1930.00, 2020.00, 1870.0… ## $ depth_maps_generation_software_version &lt;chr&gt; &quot;1.6.4.10928&quot;, &quot;1.6.4.10… ## $ depth_maps_generation_file_size_mb &lt;dbl&gt; 611.00, 868.53, 775.67, … ## $ dense_point_cloud_points &lt;dbl&gt; 52974294, 72549206, 6985… ## $ dense_point_cloud_point_colors &lt;chr&gt; &quot;3 bands, uint8&quot;, &quot;3 ban… ## $ dense_cloud_generation_processing_time_mins &lt;dbl&gt; 37.9500000, 42.9000000, … ## $ dense_cloud_generation_memory_usage_mb &lt;dbl&gt; 8140.00, 8170.00, 8100.0… ## $ dense_cloud_generation_software_version &lt;chr&gt; &quot;1.6.4.10928&quot;, &quot;1.6.4.10… ## $ dense_cloud_generation_file_size_mb &lt;dbl&gt; 760.56, 1020.00, 1004.88… ## $ total_dense_point_cloud_processing_time_mins &lt;dbl&gt; 53.200000, 58.716667, 54… ## $ total_sparse_point_cloud_processing_time_mins &lt;dbl&gt; 1.600000, 1.600000, 1.60… Do the processing settings match the file names? pdf_list_df %&gt;% dplyr::mutate( quality_match = toupper(depth_maps_generation_quality) %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) == toupper(metashape_quality) %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) , filtering_match = toupper(depth_maps_generation_filtering_mode) %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) == toupper(metashape_depthmap_filtering) %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) ) %&gt;% dplyr::count(quality_match, filtering_match) %&gt;% kableExtra::kbl(caption=&quot;Do the processing settings match the file names?&quot;) %&gt;% kableExtra::kable_styling() Table 2.2: Do the processing settings match the file names? quality_match filtering_match n TRUE TRUE 120 How many records are there for each depth map generation quality and depth map filtering mode settings? pdf_list_df %&gt;% dplyr::count(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% ggplot(mapping = aes( x = n , y = depth_maps_generation_quality , fill = depth_maps_generation_filtering_mode) ) + geom_col(width = 0.7, alpha = 0.8) + geom_text( mapping = aes( group=depth_maps_generation_filtering_mode ,label = scales::comma(n, accuracy = 1) , fontface = &quot;bold&quot; ) , position = position_stack(vjust = 0.5) , color = &quot;black&quot; ) + scale_fill_viridis_d(option = &quot;plasma&quot;) + scale_x_continuous(breaks = scales::extended_breaks(n=14)) + labs( fill = &quot;Filtering Mode&quot; , y = &quot;Quality&quot; , x = &quot;n&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 0.9)) ) How many records are there for each study site? pdf_list_df %&gt;% dplyr::count(depth_maps_generation_quality, depth_maps_generation_filtering_mode, study_site) %&gt;% ggplot(mapping = aes( x = n , y = depth_maps_generation_quality , fill = depth_maps_generation_filtering_mode) ) + geom_col(width = 0.7, alpha = 0.8) + geom_text( mapping = aes( group=depth_maps_generation_filtering_mode ,label = scales::comma(n, accuracy = 1) , fontface = &quot;bold&quot; ) , position = position_stack(vjust = 0.5) , color = &quot;black&quot; ) + facet_wrap(facets = vars(study_site), ncol = 2) + scale_fill_viridis_d(option = &quot;plasma&quot;) + labs( fill = &quot;Filtering Mode&quot; , y = &quot;Quality&quot; , x = &quot;n&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 0.9)) ) 2.3.2 Metashape Processing Time Summary Processing time by depth map generation quality and depth map filtering mode pdf_list_df %&gt;% ggplot( mapping = aes( x = depth_maps_generation_quality , y = total_dense_point_cloud_processing_time_mins , color = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + geom_boxplot(alpha = 0.6) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_fill_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 8) ) + labs( color = &quot;Filtering Mode&quot; , fill = &quot;Filtering Mode&quot; , y = &quot;Dense Cloud + Depth Map Generation Time &quot; , x = &quot;Quality&quot; , title = &quot;Agisoft Metashape processing time by depth map generation quality and filtering mode&quot; , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) Why is there such a great spread and left skew for the high and ultra high quality? pdf_list_df %&gt;% ggplot( mapping = aes( y = total_dense_point_cloud_processing_time_mins , x = depth_maps_generation_quality , color = depth_maps_generation_filtering_mode ) ) + geom_point(size = 3, alpha = 0.8) + facet_grid( cols = vars(study_site) , labeller = label_wrap_gen(width = 35, multi_line = TRUE) ) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 8) ) + labs( color = &quot;Filtering Mode&quot; , fill = &quot;Filtering Mode&quot; , y = &quot;Dense Cloud + Depth Map Generation Time &quot; , x = &quot;Quality&quot; , title = &quot;Agisoft Metashape processing time by depth map generation quality and filtering mode&quot; , subtitle = &quot;by Study Site&quot; , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , axis.text.x = element_text(angle = 90) # , strip.text.y.left = element_text(angle = 0) # , strip.placement = &quot;outside&quot; ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) The study sites “Kaibab_High” and “WA85_02” have faster processing times than the other four sites across all quality settings. 2.3.3 Flight and Sparse Cloud Metrics How do the UAS flight settings and sparse cloud generation parameters differ across sites? pdf_list_df %&gt;% dplyr::filter(quality_filtering==&quot;ULTRAHIGH_MILD&quot;) %&gt;% dplyr::select( study_site , number_of_images , tie_points , ground_resolution_cm_pix , flying_altitude_m , coverage_area_km2 , tidyselect::contains(&quot;_error_m&quot;) ) %&gt;% tidyr::pivot_longer( cols = -c(study_site), names_to = &quot;metric&quot;, values_to = &quot;val&quot; ) %&gt;% ggplot( mapping = aes( x = val , y = study_site , fill = metric ) ) + geom_col(width = 0.7, alpha = 0.8) + facet_wrap(facets = vars(metric), ncol = 2, scales = &quot;free_x&quot;) + scale_fill_viridis_d(option = &quot;cividis&quot;) + labs( y = &quot;&quot; , x = &quot;&quot; , title = &quot;Different processing metrics by study site&quot; , subtitle = &quot;`Ultra High` quality and `Mild` filtering used where applicable (error, resolution, coverage)&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) The study sites “Kaibab_High” and “WA85_02” have smaller coverage areas, fewer images, and higher x error values than the other four sites. 2.3.4 Metashape Dense Point Cloud Summary Dense point cloud number of points by depth map generation quality and depth map filtering mode pdf_list_df %&gt;% ggplot( mapping = aes( x = depth_maps_generation_quality , y = dense_point_cloud_points , color = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + geom_boxplot(alpha = 0.6) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_fill_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; M&quot;, scale = 1e-6, accuracy = 1) , breaks = scales::breaks_log(n = 6) ) + labs( color = &quot;Filtering Mode&quot; , fill = &quot;Filtering Mode&quot; , y = &quot;Dense Point Cloud # Points&quot; , x = &quot;Quality&quot; , title = &quot;Dense point cloud number of points by depth map generation quality and filtering mode&quot; , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) Notice there are some outlier study sites in the number of dense cloud points pdf_list_df %&gt;% ggplot( mapping = aes( y = dense_point_cloud_points , x = depth_maps_generation_quality , color = depth_maps_generation_filtering_mode ) ) + geom_point(size = 3, alpha = 0.8) + facet_grid( cols = vars(study_site) , labeller = label_wrap_gen(width = 35, multi_line = TRUE) ) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; M&quot;, scale = 1e-6, accuracy = 1) , breaks = scales::breaks_log(n = 6) ) + labs( color = &quot;Filtering Mode&quot; , y = &quot;Dense Point Cloud # Points&quot; , x = &quot;Quality&quot; , title = &quot;Dense point cloud number of points by depth map generation quality and filtering mode&quot; , subtitle = &quot;by Study Site&quot; , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , axis.text.x = element_text(angle = 90) ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) The study site “Kaibab_Low” has fewer dense cloud points than the other five sites for all filtering modes in the “ultra high” and “high” quality settings. The study site “WA85_02” has more dense cloud points than the other five sites for all filtering modes in the “ultra high” quality setting but similar point numbers for the other processing settings. "],["ptcld_analysis.html", "Section 3 R Point Cloud Processing 3.1 ODM and Pix4D Image Processing 3.2 Number of files summary 3.3 Processing Time Summary 3.4 Processing Time vs # Points 3.5 Processing Section Timing 3.6 Summary of point cloud data", " Section 3 R Point Cloud Processing After running the UAS point cloud processing script in R…the processing tracking data file is used to compare summary statistics on point cloud processing times. For comparison across software, the SfM point cloud generation processing parameters are mapped to the Metashape parameters based on the Pix4D documentation, the OpenDroneMap documentation, and the Agisoft Metashape discussion board ### get tracking data # read list of all processed tracking files tracking_list_df = dplyr::tibble( file_full_path = list.files( ptcld_processing_dir , pattern = &quot;.*_processed_tracking_data\\\\.csv$&quot; , full.names = T, recursive = T ) %&gt;% normalizePath() ) %&gt;% # get the software used dplyr::mutate( file_full_path %&gt;% toupper() %&gt;% stringr::str_extract_all(pattern = paste(toupper(software_list),collapse = &quot;|&quot;), simplify = T) %&gt;% dplyr::as_tibble() %&gt;% tidyr::unite(col = &quot;software&quot;, sep = &quot; &quot;, na.rm = T) ) %&gt;% # filter processed tracking files dplyr::mutate( software = software %&gt;% stringr::word(-1) , study_site = file_full_path %&gt;% toupper() %&gt;% stringr::str_extract(pattern = paste(toupper(study_site_list),collapse = &quot;|&quot;)) , file_name = file_full_path %&gt;% basename() %&gt;% stringr::word(1, sep = fixed(&quot;.&quot;)) %&gt;% toupper() %&gt;% stringr::str_remove_all(&quot;_PROCESSED_TRACKING_DATA&quot;) ) %&gt;% dplyr::filter( !is.na(study_site) &amp; study_site %in% toupper(study_site_list) &amp; !is.na(software) &amp; software %in% toupper(software_list) ) %&gt;% # keep only unique files for processing dplyr::group_by(software, study_site, file_name) %&gt;% dplyr::filter(dplyr::row_number()==1) %&gt;% dplyr::ungroup() %&gt;% dplyr::rename(tracking_file_full_path = file_full_path) # tracking_list_df %&gt;% dplyr::glimpse() # read each tracking data file, bind rows ptcld_processing_data = 1:nrow(tracking_list_df) %&gt;% purrr::map(function(row_n){ tracking_list_df %&gt;% dplyr::filter(dplyr::row_number() == row_n) %&gt;% dplyr::bind_cols( read.csv(tracking_list_df$tracking_file_full_path[row_n]) ) }) %&gt;% dplyr::bind_rows() # ptcld_processing_data %&gt;% dplyr::glimpse() # split file name to get processing attributes ptcld_processing_data = ptcld_processing_data %&gt;% tidyr::separate_wider_delim( cols = file_name , delim = &quot;_&quot; , names = paste0( &quot;processing_attribute&quot; , 1:(max(stringr::str_count(ptcld_processing_data$file_name, &quot;_&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% # not sure how to map processing attributes for pix4d and opendronemap ?????????????? dplyr::mutate( # temporary qqq = dplyr::case_when( tolower(software) == &quot;pix4d&quot; ~ processing_attribute2 , T ~ processing_attribute1 ) , fff = dplyr::case_when( tolower(software) == &quot;pix4d&quot; ~ processing_attribute3 , T ~ processing_attribute2 ) # mapping , depth_maps_generation_quality = dplyr::case_when( tolower(qqq) %in% c(&quot;ultrahigh&quot;, &quot;ultra&quot;, &quot;original&quot;, &quot;origianl&quot;) ~ &quot;ultra high&quot; , tolower(qqq) %in% c(&quot;half&quot;) ~ &quot;high&quot; , tolower(qqq) %in% c(&quot;quarter&quot;) ~ &quot;medium&quot; , tolower(qqq) %in% c(&quot;eighth&quot;,&quot;eightht&quot;) ~ &quot;low&quot; , T ~ tolower(qqq) ) %&gt;% factor( ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = dplyr::case_when( tolower(fff) %in% c(&quot;high&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;disabled&quot; , tolower(fff) %in% c(&quot;high&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;disabled&quot; , tolower(fff) %in% c(&quot;medium&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;mild&quot; , tolower(fff) %in% c(&quot;optimal&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;mild&quot; , tolower(fff) %in% c(&quot;low&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;moderate&quot; , tolower(fff) %in% c(&quot;low&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;moderate&quot; , tolower(fff) %in% c(&quot;lowest&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;aggressive&quot; , T ~ tolower(fff) ) %&gt;% factor( ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) what have we done? ptcld_processing_data %&gt;% dplyr::glimpse() ## Rows: 500 ## Columns: 33 ## $ tracking_file_full_path &lt;chr&gt; &quot;D:\\\\SfM_Software_Comparison\\\\Met… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASH… ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;KA… ## $ processing_attribute1 &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;… ## $ processing_attribute2 &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;, &quot;MILD&quot;,… ## $ processing_attribute3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH_DISABLED… ## $ number_of_points &lt;int&gt; 52974294, 72549206, 69858217, 698… ## $ las_area_m2 &lt;dbl&gt; 86661.27, 87175.42, 86404.78, 864… ## $ timer_tile_time_mins &lt;dbl&gt; 0.63600698, 2.49318542, 0.8413380… ## $ timer_class_dtm_norm_chm_time_mins &lt;dbl&gt; 3.6559556, 5.3289152, 5.1638296, … ## $ timer_treels_time_mins &lt;dbl&gt; 8.9065272, 19.2119663, 12.3391793… ## $ timer_itd_time_mins &lt;dbl&gt; 0.02202115, 0.02449968, 0.0379844… ## $ timer_competition_time_mins &lt;dbl&gt; 0.10590740, 0.17865245, 0.1212486… ## $ timer_estdbh_time_mins &lt;dbl&gt; 0.02290262, 0.02382533, 0.0219917… ## $ timer_silv_time_mins &lt;dbl&gt; 0.012565533, 0.015940932, 0.01503… ## $ timer_total_time_mins &lt;dbl&gt; 13.361886, 27.276985, 18.540606, … ## $ sttng_input_las_dir &lt;chr&gt; &quot;D:/Metashape_Testing_2024&quot;, &quot;D:/… ## $ sttng_use_parallel_processing &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE… ## $ sttng_desired_chm_res &lt;dbl&gt; 0.25, 0.25, 0.25, 0.25, 0.25, 0.2… ## $ sttng_max_height_threshold_m &lt;int&gt; 60, 60, 60, 60, 60, 60, 60, 60, 6… ## $ sttng_minimum_tree_height_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ sttng_dbh_max_size_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ sttng_local_dbh_model &lt;chr&gt; &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf… ## $ sttng_user_supplied_epsg &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ sttng_accuracy_level &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ sttng_pts_m2_for_triangulation &lt;int&gt; 20, 20, 20, 20, 20, 20, 20, 20, 2… ## $ sttng_normalization_with &lt;chr&gt; &quot;triangulation&quot;, &quot;triangulation&quot;,… ## $ sttng_competition_buffer_m &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, … ## $ qqq &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;… ## $ fff &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;, &quot;MILD&quot;,… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, low, low,… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, disabled, mild, moder… what is this mapping? # quality ptcld_processing_data %&gt;% dplyr::count(depth_maps_generation_quality, qqq, software) %&gt;% ggplot(aes(x = tolower(software), y = depth_maps_generation_quality, label = tolower(qqq))) + geom_tile(fill = NA, color = &quot;black&quot;) + ggrepel::geom_text_repel(color = &quot;gray33&quot;) + labs(y = &quot;Mapped: Depth Map Quality&quot;, x = &quot;&quot;) + scale_x_discrete(position = &quot;top&quot;) + coord_cartesian(expand = F) + theme_light() + theme( panel.grid = element_blank() , axis.text = element_text(size = 11, face = &quot;bold&quot;, color = &quot;black&quot;) , panel.border = element_rect(color = &quot;black&quot;) ) ggplot2::ggsave(&quot;../data/mapped_quality.jpg&quot;, height = 8, width = 6) # filtering ptcld_processing_data %&gt;% dplyr::count(depth_maps_generation_filtering_mode, fff, software) %&gt;% ggplot(aes(x = tolower(software), y = depth_maps_generation_filtering_mode, label = tolower(fff))) + geom_tile(fill = NA, color = &quot;black&quot;) + ggrepel::geom_text_repel(color = &quot;gray33&quot;) + labs(y = &quot;Mapped: Filtering Mode&quot;, x = &quot;&quot;) + scale_x_discrete(position = &quot;top&quot;) + coord_cartesian(expand = F) + theme_light() + theme( panel.grid = element_blank() , axis.text = element_text(size = 11, face = &quot;bold&quot;, color = &quot;black&quot;) , panel.border = element_rect(color = &quot;black&quot;) ) ggplot2::ggsave(&quot;../data/mapped_filtering_mode.jpg&quot;, height = 8, width = 6) # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Filtering # !!!! keep only one kind of pix4d, all metashape and odm ??????? ptcld_processing_data = ptcld_processing_data %&gt;% dplyr::select(-c(qqq,fff)) %&gt;% dplyr::filter( dplyr::case_when( tolower(software) == &quot;pix4d&quot; &amp; tolower(processing_attribute1) == &quot;original&quot; ~ T , tolower(software) != &quot;pix4d&quot; ~ T , T ~ F ) == T ) 3.1 ODM and Pix4D Image Processing This piece really belongs in the previous section on SfM Image Processing Data…but we need to match manual Excel data with the data structure we created immediately above just to make a figure on image processing time for publication even though the softwares were all run on different machines which means we need to figure out a way to standardize the image processing time to compare across software For ODM and Pix4D, the image processing (SfM algorithm) time was compiled manually and stored in an Excel ;/ worksheet with the Total Generation Time (min) column tracking the processing time. load the Excel file odm_pix_temp = readxl::read_xlsx(&quot;../data/SfM_Processing_Time.xlsx&quot;) %&gt;% dplyr::rename_with(~ .x %&gt;% stringr::str_squish() %&gt;% str_remove_all(&quot;[[:punct:]]&quot;) %&gt;% stringr::str_replace_all(&quot;\\\\s&quot;,&quot;_&quot;) %&gt;% tolower() ) %&gt;% # map the processing parameters to the columns in our current data str dplyr::mutate( software = software %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) %&gt;% toupper() , processing_attribute1 = dplyr::case_when( software == &quot;PIX4D&quot; ~ keypoint_image_scale , T ~ depth_map_quality ) , processing_attribute2 = dplyr::case_when( software == &quot;PIX4D&quot; ~ depth_map_quality , T ~ filtering_mode ) , processing_attribute3 = dplyr::case_when( software == &quot;PIX4D&quot; ~ filtering_mode , T ~ as.character(NA) ) ) %&gt;% # clean the data dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;processing_attribute&quot;) , ~ .x %&gt;% stringr::str_remove_all(&quot;\\\\s&quot;) %&gt;% toupper() ) , site = site %&gt;% stringr::str_squish() %&gt;% stringr::str_replace_all(&quot;\\\\s&quot;,&quot;_&quot;) %&gt;% stringr::str_replace_all(&quot;[^[:alnum:]]&quot;,&quot;_&quot;) %&gt;% toupper() ) %&gt;% # filter pix4d like above dplyr::filter( dplyr::case_when( tolower(software) == &quot;pix4d&quot; &amp; tolower(processing_attribute1) == &quot;original&quot; ~ T , tolower(software) != &quot;pix4d&quot; ~ T , T ~ F ) == T ) %&gt;% # follow the same mapping of the processing attributes used above # ... would prefer to join by the processing_attribute columns, but some of the # ... values are mislabeled such as &quot;eighth&quot; and &quot;origianl&quot; # not sure how to map processing attributes for pix4d and opendronemap ?????????????? dplyr::mutate( # temporary qqq = dplyr::case_when( tolower(software) == &quot;pix4d&quot; ~ processing_attribute2 , T ~ processing_attribute1 ) , fff = dplyr::case_when( tolower(software) == &quot;pix4d&quot; ~ processing_attribute3 , T ~ processing_attribute2 ) ) %&gt;% dplyr::rename( study_site = site , total_sfm_time_min = total_generation_time_min , number_of_points_sfm = pc_total_number ) %&gt;% # select columns we need for joining dplyr::select( software , study_site , total_sfm_time_min , number_of_points_sfm , qqq , fff ) clean up the metashape image processing data and combine with odm and pix4d # clean up the metashape image processing data and combine with odm and pix4d sfm_comb_temp = pdf_list_df %&gt;% dplyr::mutate( software = toupper(&quot;metashape&quot;) , total_sfm_time_min = total_dense_point_cloud_processing_time_mins + total_sparse_point_cloud_processing_time_mins , number_of_points_sfm = dense_point_cloud_points , qqq = metashape_quality , fff = metashape_depthmap_filtering ) %&gt;% dplyr::select(names(odm_pix_temp)) %&gt;% dplyr::bind_rows(odm_pix_temp) %&gt;% # map quality and filtering to match above dplyr::mutate( # mapping depth_maps_generation_quality = dplyr::case_when( tolower(qqq) %in% c(&quot;ultrahigh&quot;, &quot;ultra&quot;, &quot;original&quot;, &quot;origianl&quot;) ~ &quot;ultra high&quot; , tolower(qqq) %in% c(&quot;half&quot;) ~ &quot;high&quot; , tolower(qqq) %in% c(&quot;quarter&quot;) ~ &quot;medium&quot; , tolower(qqq) %in% c(&quot;eighth&quot;,&quot;eightht&quot;) ~ &quot;low&quot; , T ~ tolower(qqq) ) %&gt;% factor( ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = dplyr::case_when( tolower(fff) %in% c(&quot;high&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;disabled&quot; , tolower(fff) %in% c(&quot;high&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;disabled&quot; , tolower(fff) %in% c(&quot;medium&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;mild&quot; , tolower(fff) %in% c(&quot;optimal&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;mild&quot; , tolower(fff) %in% c(&quot;low&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;moderate&quot; , tolower(fff) %in% c(&quot;low&quot;) &amp; tolower(software) %in% c(&quot;pix4d&quot;) ~ &quot;moderate&quot; , tolower(fff) %in% c(&quot;lowest&quot;) &amp; tolower(software) %in% c(&quot;opendronemap&quot;) ~ &quot;aggressive&quot; , T ~ tolower(fff) ) %&gt;% factor( ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) %&gt;% dplyr::select(-c(qqq,fff)) %&gt;% # keep only one thing record dplyr::group_by( software, study_site, depth_maps_generation_quality, depth_maps_generation_filtering_mode ) %&gt;% dplyr::filter(dplyr::row_number()==1) %&gt;% dplyr::ungroup() join to the processing data which we’ll use to build our full analysis data set and create the normalized processing time using Min-Max normalization as: \\[ x^{\\prime}_{ij} = \\frac{x_{ij}-x_{min[j]}}{x_{max[j]}-x_{min[j]}} \\] where \\(i\\) is the the study site observation within each software \\(j\\) where each software was implemented on a different computer. ptcld_processing_data = ptcld_processing_data %&gt;% dplyr::left_join( sfm_comb_temp , by = dplyr::join_by( software, study_site, depth_maps_generation_quality, depth_maps_generation_filtering_mode ) ) %&gt;% # create the standardized time by software since the processing machine varied by software dplyr::group_by(software) %&gt;% dplyr::mutate( total_sfm_time_norm = (total_sfm_time_min-min(total_sfm_time_min, na.rm = T)) / (max(total_sfm_time_min, na.rm = T)-min(total_sfm_time_min, na.rm = T)) ) %&gt;% dplyr::ungroup() quick summary of the normalized SfM processing time ptcld_processing_data %&gt;% dplyr::group_by(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::summarise(total_sfm_time_norm = mean(total_sfm_time_norm)) %&gt;% dplyr::mutate(depth_maps_generation_quality = forcats::fct_rev(depth_maps_generation_quality)) %&gt;% ggplot(mapping = aes( x = depth_maps_generation_filtering_mode , y = total_sfm_time_norm , fill = total_sfm_time_norm )) + geom_col() + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_fill_viridis_c(option = &quot;mako&quot;, direction = -1, end = 0.9) + scale_y_continuous( limits = c(-0.02,1.02) , breaks = c(0, 1) , minor_breaks = seq(0.2,0.8,0.2) , labels = c(&quot;minimum&quot;,&quot;maximum&quot;) ) + labs(x = &quot;filtering mode&quot;, y = &quot;SfM Image Processing Time (normalized)&quot;) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , panel.grid.major.y = element_line(color = &quot;black&quot;) , axis.ticks.y = element_blank() , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 7) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , plot.subtitle = element_text(hjust = 0.5) ) 3.2 Number of files summary ptcld_processing_data %&gt;% dplyr::count(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = n , label = n )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8) + labs( x = &quot;filtering mode&quot; , y = &quot;depth map quality&quot; , fill = &quot;number of sites&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) ggplot2::ggsave(&quot;../data/n_sites_comp_quick.png&quot;, height = 9, width = 8) 3.3 Processing Time Summary Total processing time by depth map generation quality and depth map filtering mode ptcld_processing_data %&gt;% ggplot( mapping = aes( x = depth_maps_generation_quality , y = timer_total_time_mins , color = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + geom_boxplot(alpha = 0.6) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_fill_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 9) ) + labs( color = &quot;Filtering Mode&quot; , fill = &quot;Filtering Mode&quot; , y = &quot;Point Cloud Total Processing Time&quot; , x = &quot;Quality&quot; , title = bquote( bold(&quot;R&quot;) ~ &quot;point cloud total processing time by depth map generation quality and filtering mode&quot; ) , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) Notice there are some outlier study sites in the point cloud processing time ptcld_processing_data %&gt;% ggplot( mapping = aes( y = timer_total_time_mins , x = depth_maps_generation_quality , color = depth_maps_generation_filtering_mode ) ) + geom_point(size = 3, alpha = 0.8) + facet_grid( cols = vars(study_site) , labeller = label_wrap_gen(width = 35, multi_line = TRUE) ) + scale_color_viridis_d(option = &quot;plasma&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 9) ) + labs( color = &quot;Filtering Mode&quot; , y = &quot;Point Cloud Total Processing Time&quot; , x = &quot;Quality&quot; , title = bquote( bold(&quot;R&quot;) ~ &quot;point cloud total processing time by depth map generation quality and filtering mode&quot; ) , subtitle = &quot;by Study Site&quot; , caption = &quot;*Note the log scale on the y-axis&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , axis.text.x = element_text(angle = 90) ) + guides( color = guide_legend(override.aes = list(shape = 15, size = 6, alpha = 0.9)) ) 3.4 Processing Time vs # Points ptcld_processing_data %&gt;% ggplot( mapping = aes( x = number_of_points , y = timer_total_time_mins ) ) + geom_point(alpha = 0.7, color = &quot;navy&quot;) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 9) ) + scale_x_log10( labels = scales::comma_format(suffix = &quot; M&quot;, scale = 1e-6, accuracy = 1) , breaks = scales::breaks_log(n = 6) ) + labs( y = &quot;Point Cloud Total Processing Time&quot; , x = &quot;Dense Point Cloud # Points&quot; , title = bquote( bold(&quot;R&quot;) ~ &quot;point cloud total processing time versus dense point cloud number of points&quot; ) , caption = &quot;*Note the log scale on both axes&quot; ) + theme_light() 3.5 Processing Section Timing ptcld_processing_data %&gt;% dplyr::select( depth_maps_generation_quality , tidyselect::ends_with(&quot;_mins&quot;) ) %&gt;% dplyr::select(-c(timer_total_time_mins)) %&gt;% tidyr::pivot_longer( cols = -c(depth_maps_generation_quality) , names_to = &quot;section&quot; , values_to = &quot;mins&quot; ) %&gt;% # dplyr::count(depth_maps_generation_quality, section) dplyr::group_by(depth_maps_generation_quality, section) %&gt;% dplyr::summarise(med_mins = median(mins)) %&gt;% dplyr::group_by(depth_maps_generation_quality) %&gt;% dplyr::mutate( total_mins = sum(med_mins) , pct_mins = med_mins/total_mins ) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate( section = section %&gt;% stringr::str_remove_all(&quot;timer_&quot;) %&gt;% stringr::str_remove_all(&quot;_time_mins&quot;) %&gt;% factor( ordered = T , levels = c( &quot;tile&quot; , &quot;class_dtm_norm_chm&quot; , &quot;treels&quot; , &quot;itd&quot; , &quot;estdbh&quot; , &quot;competition&quot; , &quot;silv&quot; ## olde # &quot;tile&quot; # , &quot;denoise&quot; # , &quot;classify&quot; # , &quot;dtm&quot; # , &quot;normalize&quot; # , &quot;chm&quot; # , &quot;treels&quot; # , &quot;itd&quot; # , &quot;estdbh&quot; # , &quot;competition&quot; # , &quot;silv&quot; ) , labels = c( &quot;Tile&quot; , &quot;Classify+Denoise+DTM+Normalize+CHM&quot; , &quot;TreeLS SfM DBH&quot; , &quot;CHM I.T.D.&quot; , &quot;Local DBH Est.&quot; , &quot;Tree Competition&quot; , &quot;Silvicultural Metrics&quot; ) ) %&gt;% forcats::fct_rev() ) %&gt;% ggplot( mapping = aes(x = pct_mins, y = depth_maps_generation_quality, fill=section, group=section) ) + geom_col( width = 0.7, alpha=0.8 ) + geom_text( mapping = aes( label = scales::percent(ifelse(pct_mins&gt;=0.06,pct_mins,NA), accuracy = 1) , fontface = &quot;bold&quot; ) , position = position_stack(vjust = 0.5) , color = &quot;black&quot;, size = 4 ) + scale_fill_viridis_d(option = &quot;turbo&quot;, begin = 0.1, end = 0.9) + scale_x_continuous(labels = scales::percent_format()) + labs( fill = &quot;R script\\nsection&quot; , y = &quot;depth map quality&quot; , x = &quot;% Point Cloud Total Processing Time&quot; , title = bquote( bold(&quot;R&quot;) ~ &quot;point cloud total processing time by depth map generation quality and R script section&quot; ) , subtitle = &quot;Median across software, study site, &amp; depth map filtering mode &quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_text(size=7) , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_text(size = 8) , axis.text.x = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;) , axis.ticks.x = element_blank() ) + guides( fill = guide_legend(nrow = 3, byrow = T, reverse = T, override.aes = list(alpha = 0.9)) ) ggplot2::ggsave(&quot;../data/processing_time_brkdown.png&quot;, width = 8.5, height = 6) 3.6 Summary of point cloud data Use flight boundary to calculate the per ha metrics but all of the flight boundaries based on the SfM data are different ; so will just use the Metashape “high” quality area median across filtering modes applied to all. 3.6.1 Table table_temp = ptcld_processing_data %&gt;% dplyr::select( # unique vars software, tidyselect::starts_with(&quot;depth_maps&quot;), study_site # vars , number_of_points, timer_total_time_mins ) %&gt;% # add area dplyr::inner_join( ptcld_processing_data %&gt;% dplyr::mutate( las_area_m2 = dplyr::case_when( tolower(software)==&quot;metashape&quot; &amp; tolower(depth_maps_generation_quality)==&quot;high&quot; ~ las_area_m2 , T ~ NA ) ) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::summarise(las_area_m2 = median(las_area_m2, na.rm = T)) , by = &quot;study_site&quot; ) %&gt;% # calculate per area metrics dplyr::mutate( number_of_points_m2 = number_of_points/las_area_m2 , timer_total_time_mins_ha = timer_total_time_mins/(las_area_m2/10000) ) %&gt;% # summary dplyr::rename_with( .fn = function(x){ x %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) } ) %&gt;% # plot it? # ggplot(mapping = aes(fill = software)) + # geom_boxplot(mapping = aes(x = software, y = timer_total_time_mins_ha)) + # facet_wrap(facets = vars(quality, filtering), ncol = 10) + # scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + # scale_y_log10( # labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 0.1) # , breaks = scales::breaks_log(n = 9) # ) + # theme_light() # or table it dplyr::group_by(software, quality, filtering) %&gt;% dplyr::summarise( dplyr::across( c(number_of_points_m2, timer_total_time_mins_ha) , .fns = list(mean = mean, sd = sd) ) , n = dplyr::n() ) %&gt;% # combine mean/sd dplyr::mutate( pts = paste0( number_of_points_m2_mean %&gt;% round(1) %&gt;% scales::comma(accuracy = 1) , &quot;&lt;br&gt;(&quot; , number_of_points_m2_sd %&gt;% round(1) %&gt;% scales::comma(accuracy = 1) , &quot;)&quot; ) , mins = paste0( timer_total_time_mins_ha_mean %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;&lt;br&gt;(&quot; , timer_total_time_mins_ha_sd %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;)&quot; ) ) %&gt;% dplyr::ungroup() %&gt;% select(software,quality,filtering,pts,mins) table_temp = dplyr::bind_rows( table_temp %&gt;% dplyr::select(-c(mins)) %&gt;% tidyr::pivot_wider(names_from = filtering, values_from = pts) %&gt;% dplyr::mutate(metric = &quot;Points m&lt;sup&gt;-2&lt;/sup&gt;&quot;) , table_temp %&gt;% dplyr::select(-c(pts)) %&gt;% tidyr::pivot_wider(names_from = filtering, values_from = mins) %&gt;% dplyr::mutate(metric = &quot;Processing time&lt;br&gt;mins ha&lt;sup&gt;-1&lt;/sup&gt;&quot;) ) %&gt;% dplyr::relocate(software) %&gt;% dplyr::relocate(metric) # table table_temp %&gt;% kableExtra::kbl(escape = F) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) metric software quality aggressive moderate mild disabled Points m-2 METASHAPE ultra high 3,546(1,444) 4,446(1,687) 4,544(1,801) 4,597(1,786) high 789(296) 972(345) 1,019(378) 1,028(377) medium 183(64) 224(76) 238(84) 239(84) low 43(13) 52(17) 57(19) 57(20) lowest 11(3) 12(4) 13(4) 13(4) OPENDRONEMAP ultra high 1,684(664) 1,678(603) 1,557(515) 1,455(566) high 421(125) 421(128) 418(134) 418(133) medium 100(32) 100(32) 99(33) 100(34) low 99(32) 100(33) 99(33) 100(33) lowest 99(31) 100(33) 100(32) 99(33) PIX4D ultra high NA 262(84) 934(317) 3,454(1,185) high NA 58(24) 217(90) 774(318) medium NA 14(4) 54(16) 193(60) low NA 4(1) 13(4) 47(14) Processing timemins ha-1 METASHAPE ultra high 9.1(4.4) 13.3(6.1) 14.0(6.2) 17.5(8.2) high 2.2(0.8) 2.9(0.9) 3.2(1.2) 4.3(1.2) medium 0.9(0.3) 1.0(0.3) 1.0(0.4) 1.3(0.4) low 0.3(0.1) 0.3(0.1) 0.3(0.1) 0.4(0.1) lowest 0.1(0.0) 0.2(0.0) 0.2(0.0) 0.2(0.0) OPENDRONEMAP ultra high 2.8(1.1) 2.7(1.0) 2.4(0.7) 2.4(0.9) high 0.7(0.2) 0.7(0.2) 0.7(0.2) 0.6(0.2) medium 0.2(0.1) 0.2(0.1) 0.2(0.1) 0.2(0.1) low 0.2(0.1) 0.2(0.1) 0.2(0.1) 0.2(0.0) lowest 0.2(0.1) 0.2(0.1) 0.2(0.1) 0.2(0.0) PIX4D ultra high NA 1.1(0.4) 3.8(1.7) 42.1(31.0) high NA 0.3(0.1) 0.9(0.5) 3.5(1.6) medium NA 0.1(0.0) 0.3(0.1) 0.8(0.3) low NA 0.1(0.0) 0.1(0.0) 0.3(0.1) 3.6.2 Plot summary table_temp = ptcld_processing_data %&gt;% dplyr::select( # unique vars software, tidyselect::starts_with(&quot;depth_maps&quot;), study_site # vars , number_of_points, timer_total_time_mins ) %&gt;% # add area dplyr::inner_join( ptcld_processing_data %&gt;% dplyr::mutate( las_area_m2 = dplyr::case_when( tolower(software)==&quot;metashape&quot; &amp; tolower(depth_maps_generation_quality)==&quot;high&quot; ~ las_area_m2 , T ~ NA ) ) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::summarise(las_area_m2 = median(las_area_m2, na.rm = T)) , by = &quot;study_site&quot; ) %&gt;% # calculate per area metrics dplyr::mutate( number_of_points_m2 = number_of_points/las_area_m2 , timer_total_time_mins_ha = timer_total_time_mins/(las_area_m2/10000) ) %&gt;% # summary dplyr::rename_with( .fn = function(x){ x %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) } ) # plot it? p1_temp = table_temp %&gt;% dplyr::mutate(quality = forcats::fct_rev(quality)) %&gt;% ggplot(mapping = aes(x = filtering, y = timer_total_time_mins_ha, fill = software)) + geom_point( mapping = aes(group=software, color = software) , position = position_nudge(x = -0.4) , alpha = 0.8 , shape = &quot;-&quot;, size = 5 ) + geom_boxplot( width = 0.7, alpha = 0.8 , position = position_dodge2(preserve = &quot;single&quot;) , outliers = F ) + # set vertical lines between x groups geom_vline(xintercept = seq(0.5, length(table_temp$filtering), by = 1), color=&quot;gray22&quot;, lwd=.5) + facet_grid(cols = vars(quality)) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_color_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 0.1) , breaks = scales::breaks_log(n = 9) ) + labs( subtitle = &quot;quality&quot; , y = latex2exp::TeX(&quot;Pt. Cld. Processing Time (mins $\\\\cdot ha^{-1}$)&quot;) , x = &quot;filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;bottom&quot; , legend.direction = &quot;horizontal&quot; , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 7) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , plot.subtitle = element_text(hjust = 0.5) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) , color = &quot;none&quot; ) # plot it? p2_temp = table_temp %&gt;% dplyr::mutate(quality = forcats::fct_rev(quality)) %&gt;% ggplot(mapping = aes(x = filtering, y = number_of_points_m2, fill = software)) + geom_point( mapping = aes(group=software, color = software) , position = position_nudge(x = -0.4) , alpha = 0.8 , shape = &quot;-&quot;, size = 5 ) + geom_boxplot( width = 0.7, alpha = 0.8 , position = position_dodge2(preserve = &quot;single&quot;) , outliers = F ) + # set vertical lines between x groups geom_vline(xintercept = seq(0.5, length(table_temp$filtering), by = 1), color=&quot;gray22&quot;, lwd=.5) + facet_grid(cols = vars(quality)) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_color_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_log10( labels = scales::comma_format(accuracy = 1) , breaks = scales::breaks_log(n = 9) ) + labs( subtitle = &quot;quality&quot; , y = latex2exp::TeX(&quot;Point Density (points $\\\\cdot m^{-2}$)&quot;) , x = &quot;filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;bottom&quot; , legend.direction = &quot;horizontal&quot; , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 7) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , plot.subtitle = element_text(hjust = 0.5) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) , color = &quot;none&quot; ) # combine plots p2_temp / p1_temp + patchwork::plot_layout(guides = &quot;collect&quot;) &amp; theme(legend.position = &quot;bottom&quot;) ggplot2::ggsave(&quot;../data/ptcld_summary_stats.png&quot;, height = 8.5, width = 11) 3.6.3 SfM image processing time summary Summary of the normalized SfM image processing time normalized using Min-Max normalization as: \\[ x^{\\prime}_{ij} = \\frac{x_{ij}-x_{min[j]}}{x_{max[j]}-x_{min[j]}} \\] where \\(i\\) is the the study site observation within each software \\(j\\) where each software was implemented on a different computer. ptcld_processing_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(med = median(total_sfm_time_norm, na.rm = T)) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate(depth_maps_generation_quality = forcats::fct_rev(depth_maps_generation_quality)) %&gt;% ggplot(mapping = aes( x = depth_maps_generation_filtering_mode , y = total_sfm_time_norm , fill = med )) + geom_boxplot(width = 0.7, outliers = F, fill = &quot;slategray&quot;) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + scale_fill_viridis_c(option = &quot;mako&quot;, direction = -1, end = 0.9) + scale_y_continuous( limits = c(-0.02,1.02) , breaks = c(0, 1) , minor_breaks = seq(0.2,0.8,0.2) , labels = c(&quot;min&quot;,&quot;max&quot;) ) + labs(x = &quot;filtering mode&quot;, y = &quot;SfM Image Processing Time (normalized)&quot;,subtitle = &quot;quality&quot;) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , panel.grid.major.y = element_line(color = &quot;black&quot;) , axis.ticks.y = element_blank() , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , plot.subtitle = element_text(hjust = 0.5) ) ggplot2::ggsave(&quot;../data/sfm_img_processing_time.png&quot;, height = 7, width = 10.5) table it table_temp = ptcld_processing_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::summarise( dplyr::across( total_sfm_time_norm , .fns = list(mean = mean, sd = sd, min = min, max = max) ) , n = dplyr::n() ) %&gt;% dplyr::mutate( range = paste0( total_sfm_time_norm_min %&gt;% scales::number(accuracy = 0.01) , &quot;—&quot; , total_sfm_time_norm_max %&gt;% scales::number(accuracy = 0.01) ) , depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev() ) %&gt;% select(-c(n,total_sfm_time_norm_min, total_sfm_time_norm_max)) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Normalized SfM Image Processing Time&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;Mean&quot; , &quot;Std Dev&quot;, &quot;Range&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 3.1: Normalized SfM Image Processing Time software quality filtering mode Mean Std Dev Range METASHAPE lowest aggressive 0.00 0.00 0.00—0.01 moderate 0.00 0.00 0.00—0.01 mild 0.00 0.00 0.00—0.01 disabled 0.00 0.00 0.00—0.01 low aggressive 0.01 0.01 0.00—0.02 moderate 0.01 0.01 0.00—0.02 mild 0.01 0.01 0.00—0.02 disabled 0.01 0.01 0.00—0.02 medium aggressive 0.04 0.02 0.02—0.06 moderate 0.04 0.02 0.02—0.06 mild 0.04 0.02 0.02—0.05 disabled 0.04 0.02 0.02—0.06 high aggressive 0.18 0.07 0.10—0.24 moderate 0.18 0.06 0.10—0.23 mild 0.16 0.06 0.09—0.21 disabled 0.17 0.06 0.09—0.22 ultra high aggressive 0.77 0.29 0.45—1.00 moderate 0.78 0.28 0.46—1.00 mild 0.72 0.26 0.43—0.93 disabled 0.76 0.27 0.45—0.99 OPENDRONEMAP lowest aggressive 0.02 0.00 0.02—0.02 moderate 0.02 0.01 0.00—0.03 mild 0.05 0.00 0.04—0.05 disabled 0.11 0.02 0.08—0.14 low aggressive 0.02 0.00 0.02—0.03 moderate 0.03 0.00 0.02—0.03 mild 0.05 0.01 0.04—0.06 disabled 0.11 0.03 0.08—0.15 medium aggressive 0.02 0.00 0.02—0.02 moderate 0.02 0.00 0.02—0.03 mild 0.05 0.00 0.04—0.05 disabled 0.11 0.02 0.09—0.14 high aggressive 0.09 0.01 0.08—0.10 moderate 0.09 0.01 0.08—0.10 mild 0.12 0.01 0.10—0.13 disabled 0.18 0.03 0.14—0.22 ultra high aggressive 0.71 0.08 0.61—0.80 moderate 0.73 0.11 0.60—0.85 mild 0.79 0.09 0.66—0.90 disabled 0.86 0.13 0.69—1.00 PIX4D low moderate 0.00 0.00 0.00—0.01 mild 0.01 0.00 0.01—0.01 disabled 0.01 0.01 0.01—0.02 medium moderate 0.01 0.01 0.00—0.02 mild 0.02 0.00 0.01—0.02 disabled 0.04 0.01 0.02—0.05 high moderate 0.02 0.01 0.01—0.03 mild 0.06 0.02 0.03—0.08 disabled 0.18 0.07 0.12—0.28 ultra high moderate 0.10 0.03 0.05—0.12 mild 0.29 0.09 0.15—0.39 disabled 0.78 0.17 0.54—1.00 "],["stats_processing_time.html", "Section 4 Statistical Analysis: Processing Time 4.1 One Nominal Predictor 4.2 Two Nominal Predictors 4.3 Two Nominal Predictors + site effects 4.4 Gamma: Two Nominal Predictors + site effects", " Section 4 Statistical Analysis: Processing Time In this section, we’ll evaluate the influence of the processing parameters on point cloud processing time. This data was described in this section. The objective of this study is to determine the influence of different structure from motion (SfM) software (e.g. Agisoft Metashap, OpenDroneMap, Pix4D) and processing parameters on processing time needed to create the data required for quantifying forest structure from UAS imagery. The data required includes: i) SfM-derived point cloud(s) in .laz or .las format, and ii) data extracted from these point clouds such as canopy height models (CHM), tree locations, and tree measurements (height and diameter). All of the predictor variables of interest in this study are categorical (a.k.a. factor or nominal) while the predicted variables are metric and include processing time (continuous &gt; 0) and F-score (ranges from 0-1). This type of statistical analysis is described in the second edition of Kruschke’s Doing Bayesian data analysis (2015): This chapter considers data structures that consist of a metric predicted variable and two (or more) nominal predictors….Data structures of the type considered in this chapter are often encountered in real research. For example, we might want to predict monetary income from political party affiliation and religious affiliation, or we might want to predict galvanic skin response to different combinations of categories of visual stimulus and categories of auditory stimulus. As mentioned in the previous chapter, this type of data structure can arise from experiments or from observational studies. In experiments, the researcher assigns the categories (at random) to the experimental subjects. In observational studies, both the nominal predictor values and the metric predicted value are generated by processes outside the direct control of the researcher. The traditional treatment of this sort of data structure is called multifactor analysis of variance (ANOVA). Our Bayesian approach will be a hierarchical generalization of the traditional ANOVA model. The chapter also considers generalizations of the traditional models, because it is straight forward in Bayesian software to implement heavy-tailed distributions to accommodate outliers, along with hierarchical structure to accommodate heterogeneous variances in the different groups. Kruschke (2015, pp.583–584) The following analysis will expand the traditional mixed ANOVA approach following the methods outlined by Kassambara in the Comparing Multiple Means in R online course to build a Bayesian approach based on Kruschke (2015). This analysis was greatly enhanced by A. Solomon Kurz’s ebook supplement to Kruschke (2015). For this example we’ll use data from Agisoft Metashape only ptime_data = ptcld_processing_data %&gt;% dplyr::filter(tolower(software)==&quot;metashape&quot;) 4.1 One Nominal Predictor We’ll start by exploring the influence of the depth map generation quality parameter on the point cloud processing time. 4.1.1 Summary Statistics Summary statistics by group: ptime_data %&gt;% dplyr::group_by(depth_maps_generation_quality) %&gt;% dplyr::summarise( mean_processing_mins = mean(timer_total_time_mins, na.rm = T) # , med_processing_mins = median(timer_total_time_mins, na.rm = T) , sd_processing_mins = sd(timer_total_time_mins, na.rm = T) , n = dplyr::n() ) %&gt;% kableExtra::kbl(digits = 1, caption = &quot;summary statistics: point cloud processing time by depth map quality&quot;) %&gt;% kableExtra::kable_styling() Table 4.1: summary statistics: point cloud processing time by depth map quality depth_maps_generation_quality mean_processing_mins sd_processing_mins n ultra high 83.5 27.5 20 high 20.2 6.1 20 medium 6.7 1.6 20 low 2.2 0.3 20 lowest 1.0 0.1 20 4.1.2 Linear Model We can use a linear model to obtain means by group: lm1_temp = lm( timer_total_time_mins ~ 0 + depth_maps_generation_quality , data = ptime_data ) # summary lm1_temp %&gt;% broom::tidy() %&gt;% mutate(term = stringr::str_remove_all(term, &quot;depth_maps_generation_quality&quot;)) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;linear model: point cloud processing time by depth map quality&quot;) %&gt;% kableExtra::kable_styling() Table 4.2: linear model: point cloud processing time by depth map quality term estimate std.error statistic p.value ultra high 83.49 2.82 29.61 0.00 high 20.22 2.82 7.17 0.00 medium 6.70 2.82 2.38 0.02 low 2.18 2.82 0.77 0.44 lowest 1.04 2.82 0.37 0.71 and plot these means with 95% confidence interval lm1_temp %&gt;% broom::tidy() %&gt;% dplyr::bind_cols( lm1_temp %&gt;% confint() %&gt;% dplyr::as_tibble() %&gt;% dplyr::rename(lower = 1, upper = 2) ) %&gt;% mutate( term = term %&gt;% stringr::str_remove_all(&quot;depth_maps_generation_quality&quot;) %&gt;% factor( ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() ) %&gt;% ggplot( mapping = aes(x = term, y = estimate, fill = term) ) + geom_col() + geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = &quot;gray66&quot;) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=8)) + labs(x = &quot;depth map quality&quot;, y = &quot;point cloud processing mins.&quot;) + theme_light() + theme(legend.position = &quot;none&quot;, panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 4.1.3 ANOVA One-way ANOVA to test for differences in group means aov1_temp = aov( timer_total_time_mins ~ 0 + depth_maps_generation_quality , data = ptime_data ) # summary aov1_temp %&gt;% broom::tidy() %&gt;% kableExtra::kbl(digits = 2, caption = &quot;one-way ANOVA: point cloud processing time by depth map quality&quot;) %&gt;% kableExtra::kable_styling() Table 4.3: one-way ANOVA: point cloud processing time by depth map quality term df sumsq meansq statistic p.value depth_maps_generation_quality 5 148594.20 29718.84 186.85 0 Residuals 95 15109.77 159.05 NA NA The sum of squared residuals is the same between the linear model and the ANOVA model # RSS identical( # linear model lm1_temp$residuals %&gt;% dplyr::as_tibble() %&gt;% mutate(value=value^2) %&gt;% dplyr::pull(value) %&gt;% sum() # anova , summary(aov1_temp)[[1]][[&quot;Sum Sq&quot;]][[2]] ) ## [1] TRUE # F value identical( # linear model summary(lm1_temp)$fstatistic[&quot;value&quot;] %&gt;% unname() %&gt;% round(6) # anova , summary(aov1_temp)[[1]][[&quot;F value&quot;]][[1]] %&gt;% unname() %&gt;% round(6) ) ## [1] TRUE we can use the marginaleffects package to compare and contrast the mean estimates by group. # calculate average group effects contrast_temp = marginaleffects::avg_comparisons( model = lm1_temp , variables = list(depth_maps_generation_quality = &quot;revpairwise&quot;) , comparison = &quot;difference&quot; ) %&gt;% dplyr::mutate( contrast = contrast %&gt;% stringr::str_remove_all(&quot;mean\\\\(&quot;) %&gt;% stringr::str_remove_all(&quot;\\\\)&quot;) ) # separate contrast contrast_temp = contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptime_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , sig_lvl = dplyr::case_when( p.value &lt;= 0.01 ~ &quot;0.01&quot; , p.value &lt;= 0.05 ~ &quot;0.05&quot; , p.value &lt;= 0.1 ~ &quot;0.10&quot; , T ~ &quot;not significant&quot; ) %&gt;% factor( ordered = T , levels = c( &quot;0.01&quot; , &quot;0.05&quot; , &quot;0.10&quot; , &quot;not significant&quot; ) ) ) %&gt;% dplyr::arrange(contrast) # plot contrast_temp %&gt;% # plot ggplot(mapping = aes(y = contrast)) + geom_linerange( mapping = aes(xmin = conf.low, xmax = conf.high, color = sig_lvl) , linewidth = 5 , alpha = 0.9 ) + geom_point(mapping = aes(x = estimate)) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + scale_color_viridis_d(option = &quot;mako&quot;, begin = 0.3, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , subtitle = &quot;Mean group constrasts&quot; , color = &quot;sig. level&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) and view the contrasts in a table contrast_temp %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, estimate, conf.low, conf.high, p.value) %&gt;% dplyr::rename(difference=estimate) %&gt;% kableExtra::kbl( digits = 2, caption = &quot;Mean group effects: depth map quality processing time constrasts&quot; ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.4: Mean group effects: depth map quality processing time constrasts contrast difference conf.low conf.high p.value ultra high - high 63.27 55.46 71.09 0.00 ultra high - medium 76.78 68.97 84.60 0.00 ultra high - low 81.31 73.50 89.13 0.00 ultra high - lowest 82.45 74.63 90.26 0.00 high - medium 13.51 5.70 21.33 0.00 high - low 18.04 10.22 25.86 0.00 high - lowest 19.18 11.36 26.99 0.00 medium - low 4.53 -3.29 12.35 0.26 medium - lowest 5.66 -2.15 13.48 0.16 low - lowest 1.14 -6.68 8.95 0.78 4.1.4 Bayesian Kruschke (2015) notes: The terminology, “analysis of variance,” comes from a decomposition of overall data variance into within-group variance and between-group variance (Fisher, 1925). Algebraically, the sum of squared deviations of the scores from their overall mean equals the sum of squared deviations of the scores from their respective group means plus the sum of squared deviations of the group means from the overall mean. In other words, the total variance can be partitioned into within-group variance plus between-group variance. Because one definition of the word “analysis” is separation into constituent parts, the term ANOVA accurately describes the underlying algebra in the traditional methods. That algebraic relation is not used in the hierarchical Bayesian approach presented here. The Bayesian method can estimate component variances, however. Therefore, the Bayesian approach is not ANOVA, but is analogous to ANOVA. (p. 556) and see section 19 from Kurz’s ebook supplement The metric predicted variable with one nominal predictor variable model has the form: \\[\\begin{align*} y_{i} &amp;\\sim {\\sf Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} &amp;= \\beta_0 + \\sum_{j=1}^{J} \\beta_{1[j]} x_{1[j]} \\bigl(i\\bigr) \\\\ \\beta_{0} &amp;\\sim {\\sf Normal} (0,10) \\\\ \\beta_{1[j]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{1}}) \\\\ \\sigma_{\\beta_{1}} &amp;\\sim {\\sf uniform} (0,100) \\\\ \\sigma_{y} &amp;\\sim {\\sf uniform} (0,100) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\) to start, we’ll use the default brms::brm prior settings which may not match those described in the model specification above brms1_mod = brms::brm( formula = timer_total_time_mins ~ 1 + (1 | depth_maps_generation_quality) , data = ptime_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 3000, warmup = 1000, chains = 4 , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms1_mod&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms1_mod) check the prior distributions # check priors brms::prior_summary(brms1_mod) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source student_t(3, 6.6, 8.2) Intercept default student_t(3, 0, 8.2) sd 0 default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default student_t(3, 0, 8.2) sigma 0 default The brms::brm model summary brms1_mod %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_remove_all(&quot;b_depth_maps_generation_quality&quot;) %&gt;% stringr::str_remove_all(&quot;r_depth_maps_generation_quality&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian one nominal predictor: point cloud processing time by depth map quality&quot;) %&gt;% kableExtra::kable_styling() Table 4.5: Bayesian one nominal predictor: point cloud processing time by depth map quality parameter estimate est.error q2.5 q97.5 b_Intercept 12.09 8.69 -3.91 30.55 sigma 12.67 0.93 11.00 14.65 [ultra.high,Intercept] 70.66 9.13 51.67 87.34 [high,Intercept] 8.10 9.15 -10.79 25.05 [medium,Intercept] -5.33 9.00 -24.25 11.58 [low,Intercept] -9.81 9.09 -28.62 7.16 [lowest,Intercept] -10.87 9.10 -29.81 5.89 With the stats::coef function, we can get the group-level summaries in a “non-deflection” metric. In the model, the group means represented by \\(\\beta_{1[j]}\\) are deflections from overall baseline, such that the deflections sum to zero (see Kruschke (2015, p.554)). Summaries of the group-specific deflections are available via the brms::ranef function. stats::coef(brms1_mod) %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;group&quot;) %&gt;% dplyr::rename_with( .cols = -c(&quot;group&quot;) , .fn = ~ stringr::str_remove_all(.x, &quot;depth_maps_generation_quality.&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model: point cloud processing time by depth map quality&quot;) %&gt;% kableExtra::kable_styling() Table 4.6: brms::brm model: point cloud processing time by depth map quality group Estimate.Intercept Est.Error.Intercept Q2.5.Intercept Q97.5.Intercept ultra high 82.75 2.90 76.96 88.42 high 20.19 2.85 14.58 25.77 medium 6.76 2.88 1.02 12.36 low 2.28 2.90 -3.45 7.92 lowest 1.21 2.85 -4.33 6.81 We can look at the model noise standard deviation \\(\\sigma_y\\) # extract the posterior draws brms::as_draws_df(brms1_mod) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + xlab(latex2exp::TeX(&quot;$\\\\sigma_y$&quot;)) + theme_light() plot the posterior distributions of the conditional means with the median processing time and the 95% highest posterior density interval (HDI) ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms1_mod) %&gt;% dplyr::mutate(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + # tidybayes::stat_dotsinterval( # point_interval = median_hdi, .width = .95 # , shape = 21, point_fill = &quot;gray&quot;, justification = -0.04 # , quantiles = 100 # ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;depth map quality&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;) we can also make pairwise comparisons # define comparisons to make contrast_temp = contrast_temp %&gt;% dplyr::arrange(contrast) contrast_list = 1:nrow(contrast_temp) %&gt;% purrr::map(function(x){ c(contrast_temp$sorter1[x],contrast_temp$sorter2[x]) }) %&gt;% list() %&gt;% purrr::list_flatten() # obtain posterior draws and calculate contrasts using tidybayes::compare_levels brms_contrast_temp = brms1_mod %&gt;% tidybayes::spread_draws(r_depth_maps_generation_quality[depth_maps_generation_quality]) %&gt;% dplyr::mutate( depth_maps_generation_quality = depth_maps_generation_quality %&gt;% stringr::str_replace_all(&quot;\\\\.&quot;, &quot; &quot;) %&gt;% factor( levels = levels(ptime_data$depth_maps_generation_quality) , ordered = T ) ) %&gt;% dplyr::rename(value = r_depth_maps_generation_quality) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::mutate( contrast = depth_maps_generation_quality %&gt;% factor( levels = levels(contrast_temp$contrast) , ordered = T ) ) # median_hdi summary for coloring brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value, .width = c(0.5,0.95)) %&gt;% dplyr::mutate( sig_level = dplyr::case_when( .lower&lt;0 &amp; .upper&gt;0 ~ 1 , T ~ 0 ) ) %&gt;% dplyr::select(.width,sig_level,contrast) %&gt;% tidyr::pivot_wider(names_from = .width, values_from = sig_level) %&gt;% dplyr::mutate( sig_level = dplyr::case_when( `0.5` == 1 ~ 0 , `0.95` == 1 ~ 1 , T ~ 2 ) %&gt;% factor(levels = c(0,1,2), labels = c(&quot;50%&quot;,&quot;5%&quot;,&quot;0%&quot;)) %&gt;% forcats::fct_rev() ) %&gt;% dplyr::select(contrast, sig_level) , by = dplyr::join_by(contrast) ) %&gt;% dplyr::group_by(contrast) %&gt;% dplyr::mutate( is_gt_zero = value &gt; 0 , pct_gt_zero = sum(is_gt_zero)/dplyr::n() , sig_level2 = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 80,000 ## Columns: 10 ## Groups: contrast [10] ## $ .chain &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ .iteration &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ depth_maps_generation_quality &lt;chr&gt; &quot;ultra high - high&quot;, &quot;ultra high - high&quot;… ## $ value &lt;dbl&gt; 58.31630, 69.37204, 54.19820, 60.82334, … ## $ contrast &lt;ord&gt; ultra high - high, ultra high - high, ul… ## $ sig_level &lt;fct&gt; 0%, 0%, 0%, 0%, 0%, 0%, 0%, 0%, 0%, 0%, … ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE… ## $ pct_gt_zero &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ sig_level2 &lt;ord&gt; &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%… plot it # plot, finally brms_contrast_temp %&gt;% ggplot(aes(x = value, y = contrast, fill = sig_level2)) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + scale_fill_viridis_d( option = &quot;mako&quot;, begin = 0.3 , drop = F # , labels = scales::percent ) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , fill = &quot;Pr(contrast &gt; 0)&quot; , subtitle = &quot;95% &amp; 50% HDI of the posterior distribution of conditional mean group constrasts&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) ) and summarize these contrasts # # can also use the following as substitute for the &quot;tidybayes::spread_draws&quot; used above to get same result brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% select(-c(.point,.interval)) %&gt;% dplyr::arrange(desc(contrast)) %&gt;% dplyr::rename(difference=value) %&gt;% kableExtra::kbl(digits = 1, caption = &quot;brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts&quot;) %&gt;% kableExtra::kable_styling() Table 4.7: brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts contrast difference .lower .upper .width low - lowest 1.1 -6.8 8.9 0.9 medium - lowest 5.6 -2.0 13.9 0.9 medium - low 4.5 -3.9 12.3 0.9 high - lowest 19.0 11.1 26.7 0.9 high - low 17.9 10.1 25.8 0.9 high - medium 13.4 5.6 21.5 0.9 ultra high - lowest 81.6 73.6 89.5 0.9 ultra high - low 80.5 72.1 88.2 0.9 ultra high - medium 76.0 68.2 84.1 0.9 ultra high - high 62.6 54.5 70.4 0.9 4.2 Two Nominal Predictors Now, we’ll determine the combined influence of the depth map generation quality and the depth map filtering parameters on the point cloud processing time. 4.2.1 Summary Statistics Summary statistics by group: ptime_data %&gt;% dplyr::group_by(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::summarise( mean_processing_mins = mean(timer_total_time_mins, na.rm = T) # , med_processing_mins = median(timer_total_time_mins, na.rm = T) , sd_processing_mins = sd(timer_total_time_mins, na.rm = T) , n = dplyr::n() ) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;summary statistics: point cloud processing time by depth map quality and filtering mode&quot; , col.names = c( &quot;depth map quality&quot; , &quot;filtering mode&quot; , &quot;mean time&quot; , &quot;sd&quot; , &quot;n&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.8: summary statistics: point cloud processing time by depth map quality and filtering mode depth map quality filtering mode mean time sd n ultra high aggressive 56.3 14.8 5 ultra high moderate 82.5 19.7 5 ultra high mild 86.8 20.0 5 ultra high disabled 108.3 29.5 5 high aggressive 13.9 3.3 5 high moderate 18.6 3.2 5 high mild 20.8 4.7 5 high disabled 27.5 3.5 5 medium aggressive 5.7 1.3 5 medium moderate 6.3 1.2 5 medium mild 6.6 1.7 5 medium disabled 8.3 1.4 5 low aggressive 2.0 0.2 5 low moderate 2.1 0.3 5 low mild 2.2 0.2 5 low disabled 2.4 0.3 5 lowest aggressive 1.0 0.1 5 lowest moderate 1.0 0.1 5 lowest mild 1.1 0.1 5 lowest disabled 1.1 0.2 5 4.2.2 Linear Model We can use a linear model to obtain means by group: lm2_temp = lm( timer_total_time_mins ~ 1 + depth_maps_generation_quality + depth_maps_generation_filtering_mode + depth_maps_generation_quality:depth_maps_generation_filtering_mode , data = ptime_data ) # summary predict( lm2_temp , newdata = ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) , interval = &quot;confidence&quot; ) %&gt;% dplyr::as_tibble() %&gt;% dplyr::bind_cols( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::relocate(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::arrange(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;linear model: point cloud processing time by depth map quality and filtering mode&quot; , col.names = c( &quot;depth map quality&quot; , &quot;filtering mode&quot; , &quot;y_hat&quot; , &quot;q2.5&quot; , &quot;q97.5&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.9: linear model: point cloud processing time by depth map quality and filtering mode depth map quality filtering mode y_hat q2.5 q97.5 ultra high aggressive 56.3 47.6 65.1 ultra high moderate 82.5 73.7 91.2 ultra high mild 86.8 78.1 95.6 ultra high disabled 108.3 99.6 117.1 high aggressive 13.9 5.2 22.7 high moderate 18.6 9.9 27.4 high mild 20.8 12.0 29.5 high disabled 27.5 18.7 36.3 medium aggressive 5.7 -3.1 14.4 medium moderate 6.3 -2.5 15.0 medium mild 6.6 -2.2 15.4 medium disabled 8.3 -0.5 17.1 low aggressive 2.0 -6.7 10.8 low moderate 2.1 -6.7 10.8 low mild 2.2 -6.6 11.0 low disabled 2.4 -6.4 11.2 lowest aggressive 1.0 -7.8 9.7 lowest moderate 1.0 -7.8 9.8 lowest mild 1.1 -7.7 9.8 lowest disabled 1.1 -7.6 9.9 and plot these means with 95% confidence interval predict( lm2_temp , newdata = ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) , interval = &quot;confidence&quot; ) %&gt;% dplyr::as_tibble() %&gt;% dplyr::bind_cols( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% ggplot( mapping = aes( y = fit , x = depth_maps_generation_quality , fill = depth_maps_generation_filtering_mode , group = depth_maps_generation_filtering_mode ) ) + geom_col(width = 0.7, position = &quot;dodge&quot;) + geom_errorbar( mapping = aes(ymin = lwr, ymax = upr) , width = 0.2, color = &quot;gray66&quot; , position = position_dodge(width = 0.7) ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=14)) + labs( fill = &quot;filtering mode&quot; , x = &quot;depth map quality&quot; , y = &quot;point cloud processing mins.&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; ) + guides( fill = guide_legend(override.aes = list(alpha = 0.9)) ) 4.2.3 ANOVA ANOVA to test for differences in group means aov2_temp = aov( timer_total_time_mins ~ 1 + depth_maps_generation_quality + depth_maps_generation_filtering_mode + depth_maps_generation_quality:depth_maps_generation_filtering_mode , data = ptime_data ) # summary aov2_temp %&gt;% broom::tidy() %&gt;% kableExtra::kbl(digits = 2, caption = &quot;two-way ANOVA: point cloud processing time by depth map quality and filtering mode&quot;) %&gt;% kableExtra::kable_styling() Table 4.10: two-way ANOVA: point cloud processing time by depth map quality and filtering mode term df sumsq meansq statistic p.value depth_maps_generation_quality 4 96952.48 24238.12 249.35 0 depth_maps_generation_filtering_mode 3 2387.66 795.89 8.19 0 depth_maps_generation_quality:depth_maps_generation_filtering_mode 12 4945.59 412.13 4.24 0 Residuals 80 7776.52 97.21 NA NA We can perform pairwise comparisons of the filtering mode between at each depth map quality level # Pairwise comparisons between group levels ptime_data %&gt;% group_by(depth_maps_generation_quality) %&gt;% rstatix::pairwise_t_test( timer_total_time_mins ~ depth_maps_generation_filtering_mode , p.adjust.method = &quot;bonferroni&quot; ) %&gt;% dplyr::select(-c(n1,p,p.signif,.y.)) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;Pairwise comparisons between filtering mode at each depth map quality group&quot; ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.11: Pairwise comparisons between filtering mode at each depth map quality group depth_maps_generation_quality group1 group2 n2 p.adj p.adj.signif ultra high aggressive moderate 5 0.4 ns ultra high aggressive mild 5 0.2 ns ultra high moderate mild 5 1.0 ns ultra high aggressive disabled 5 0.0 ** ultra high moderate disabled 5 0.5 ns ultra high mild disabled 5 0.8 ns high aggressive moderate 5 0.4 ns high aggressive mild 5 0.1 ns high moderate mild 5 1.0 ns high aggressive disabled 5 0.0 *** high moderate disabled 5 0.0 high mild disabled 5 0.1 ns medium aggressive moderate 5 1.0 ns medium aggressive mild 5 1.0 ns medium moderate mild 5 1.0 ns medium aggressive disabled 5 0.1 ns medium moderate disabled 5 0.2 ns medium mild disabled 5 0.4 ns low aggressive moderate 5 1.0 ns low aggressive mild 5 1.0 ns low moderate mild 5 1.0 ns low aggressive disabled 5 0.3 ns low moderate disabled 5 0.5 ns low mild disabled 5 1.0 ns lowest aggressive moderate 5 1.0 ns lowest aggressive mild 5 1.0 ns lowest moderate mild 5 1.0 ns lowest aggressive disabled 5 0.3 ns lowest moderate disabled 5 0.7 ns lowest mild disabled 5 1.0 ns we can use the emmeans package to perform interaction analysis of the mean estimates using Tukey’s Honest Significant Differences method. we can use the marginaleffects package to compare and contrast the mean estimates by group. # calculate average group effects # ... for a &quot;cross-contrast&quot; use cross = T (code below) where... # ......contrasts represent the changes in adjusted predictions when # ......all the predictors specified in the variables argument are manipulated simultaneously # avg_comparisons(mod, variables = c(&quot;cyl&quot;, &quot;gear&quot;), cross = TRUE) contrast_temp = marginaleffects::avg_comparisons( model = lm2_temp , variables = list(depth_maps_generation_quality = &quot;revpairwise&quot;) , comparison = &quot;difference&quot; , by = &quot;depth_maps_generation_filtering_mode&quot; ) %&gt;% dplyr::mutate( contrast = contrast %&gt;% stringr::str_remove_all(&quot;mean\\\\(&quot;) %&gt;% stringr::str_remove_all(&quot;\\\\)&quot;) ) # separate contrast contrast_temp = contrast_temp %&gt;% dplyr::mutate( contrast = contrast %&gt;% stringr::str_remove_all(&quot;mean\\\\(&quot;) %&gt;% stringr::str_remove_all(&quot;\\\\)&quot;) ) %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptime_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , sig_lvl = dplyr::case_when( p.value &lt;= 0.01 ~ &quot;0.01&quot; , p.value &lt;= 0.05 ~ &quot;0.05&quot; , p.value &lt;= 0.1 ~ &quot;0.10&quot; , T ~ &quot;not significant&quot; ) %&gt;% factor( ordered = T , levels = c( &quot;0.01&quot; , &quot;0.05&quot; , &quot;0.10&quot; , &quot;not significant&quot; ) ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( ordered = T , levels = levels(ptime_data$depth_maps_generation_filtering_mode) ) ) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) # what? contrast_temp %&gt;% dplyr::ungroup() %&gt;% dplyr::glimpse() ## Rows: 40 ## Columns: 16 ## $ term &lt;chr&gt; &quot;depth_maps_generation_quality&quot;, … ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, medium, m… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, moderate, mild, disab… ## $ estimate &lt;dbl&gt; 42.39916, 63.80675, 66.06454, 80.… ## $ std.error &lt;dbl&gt; 6.235593, 6.235587, 6.235590, 6.2… ## $ statistic &lt;dbl&gt; 6.799539, 10.232677, 10.594754, 1… ## $ p.value &lt;dbl&gt; 1.049541e-11, 1.415513e-24, 3.151… ## $ s.value &lt;dbl&gt; 36.471450, 79.224949, 84.714012, … ## $ conf.low &lt;dbl&gt; 30.1776215, 51.5852240, 53.843009… ## $ conf.high &lt;dbl&gt; 54.62070, 76.02828, 78.28607, 93.… ## $ predicted_lo &lt;dbl&gt; 13.9287619, 18.6492584, 20.771895… ## $ predicted_hi &lt;dbl&gt; 56.32792, 82.45601, 86.83644, 108… ## $ predicted &lt;dbl&gt; 13.92876, 18.64926, 20.77190, 27.… ## $ sig_lvl &lt;ord&gt; 0.01, 0.01, 0.01, 0.01, 0.01, 0.0… plot it contrast_temp %&gt;% # plot ggplot(mapping = aes(y = contrast)) + geom_linerange( mapping = aes(xmin = conf.low, xmax = conf.high, color = sig_lvl) , linewidth = 5 , alpha = 0.9 ) + geom_point(mapping = aes(x = estimate)) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + scale_color_viridis_d(option = &quot;mako&quot;, begin = 0.3, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , subtitle = &quot;Mean group constrasts&quot; , color = &quot;sig. level&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and view the contrasts in a table contrast_temp %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, estimate, conf.low, conf.high, p.value) %&gt;% dplyr::rename(difference=estimate) %&gt;% kableExtra::kbl( digits = 2, caption = &quot;Mean group effects: depth map quality processing time constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (mins.)&quot; , &quot;conf.low&quot;, &quot;conf.high&quot;, &quot;p.value&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.12: Mean group effects: depth map quality processing time constrasts quality contrast filtering mode difference (mins.) conf.low conf.high p.value ultra high - high aggressive 42.40 30.18 54.62 0.00 ultra high - high moderate 63.81 51.59 76.03 0.00 ultra high - high mild 66.06 53.84 78.29 0.00 ultra high - high disabled 80.82 68.60 93.04 0.00 ultra high - medium aggressive 50.67 38.44 62.89 0.00 ultra high - medium moderate 76.18 63.96 88.40 0.00 ultra high - medium mild 80.25 68.03 92.48 0.00 ultra high - medium disabled 100.03 87.81 112.26 0.00 ultra high - low aggressive 54.29 42.07 66.51 0.00 ultra high - low moderate 80.38 68.16 92.61 0.00 ultra high - low mild 84.63 72.41 96.85 0.00 ultra high - low disabled 105.95 93.73 118.17 0.00 ultra high - lowest aggressive 55.37 43.15 67.59 0.00 ultra high - lowest moderate 81.45 69.23 93.67 0.00 ultra high - lowest mild 85.77 73.55 98.00 0.00 ultra high - lowest disabled 107.20 94.98 119.42 0.00 high - medium aggressive 8.27 -3.95 20.49 0.18 high - medium moderate 12.37 0.15 24.60 0.05 high - medium mild 14.19 1.97 26.41 0.02 high - medium disabled 19.22 7.00 31.44 0.00 high - low aggressive 11.89 -0.33 24.11 0.06 high - low moderate 16.58 4.36 28.80 0.01 high - low mild 18.57 6.34 30.79 0.00 high - low disabled 25.13 12.91 37.35 0.00 high - lowest aggressive 12.97 0.75 25.19 0.04 high - lowest moderate 17.65 5.42 29.87 0.00 high - lowest mild 19.71 7.49 31.93 0.00 high - lowest disabled 26.38 14.16 38.60 0.00 medium - low aggressive 3.62 -8.60 15.84 0.56 medium - low moderate 4.20 -8.02 16.42 0.50 medium - low mild 4.38 -7.85 16.60 0.48 medium - low disabled 5.91 -6.31 18.14 0.34 medium - lowest aggressive 4.70 -7.52 16.92 0.45 medium - lowest moderate 5.27 -6.95 17.49 0.40 medium - lowest mild 5.52 -6.70 17.74 0.38 medium - lowest disabled 7.16 -5.06 19.39 0.25 low - lowest aggressive 1.08 -11.14 13.30 0.86 low - lowest moderate 1.07 -11.15 13.29 0.86 low - lowest mild 1.14 -11.08 13.37 0.85 low - lowest disabled 1.25 -10.97 13.47 0.84 4.2.4 Bayesian Kruschke (2015) describes the Hierarchical Bayesian approach to describe groups of metric data with multiple nominal predictors: This chapter considers data structures that consist of a metric predicted variable and two (or more) nominal predictors….The traditional treatment of this sort of data structure is called multifactor analysis of variance (ANOVA). Our Bayesian approach will be a hierarchical generalization of the traditional ANOVA model. The chapter also considers generalizations of the traditional models, because it is straight forward in Bayesian software to implement heavy-tailed distributions to accommodate outliers, along with hierarchical structure to accommodate heterogeneous variances in the different groups. (pp. 583–584) and see section 20 from Kurz’s ebook supplement The metric predicted variable with two nominal predictor variables model has the form: \\[\\begin{align*} y_{i} &amp;\\sim {\\sf Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} &amp;= \\beta_0 + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} \\\\ \\beta_{0} &amp;\\sim {\\sf Normal} (0,100) \\\\ \\beta_{1[j]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{1\\times2[j,k]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\sigma_{\\beta_{1}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{\\beta_{2}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{y} &amp;\\sim {\\sf Cauchy} (0,109) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\) and \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\) for this model, we’ll define the priors following Kurz who notes that: The noise standard deviation \\(\\sigma_y\\) is depicted in the prior statement including the argument class = sigma…in order to be weakly informative, we will use the half-Cauchy. Recall that since the brms default is to set the lower bound for any variance parameter to 0, there’s no need to worry about doing so ourselves. So even though the syntax only indicates cauchy, it’s understood to mean Cauchy with a lower bound at zero; since the mean is usually 0, that makes this a half-Cauchy…The tails of the half-Cauchy are sufficiently fat that, in practice, I’ve found it doesn’t matter much what you set the \\(SD\\) of its prior to. # from Kurz: gamma_a_b_from_omega_sigma &lt;- function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate &lt;- (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape &lt;- 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp &lt;- mean(ptime_data$timer_total_time_mins) sd_y_temp &lt;- sd(ptime_data$timer_total_time_mins) omega_temp &lt;- sd_y_temp / 2 sigma_temp &lt;- 2 * sd_y_temp s_r_temp &lt;- gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp &lt;- brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) Now fit the model. brms2_mod = brms::brm( formula = timer_total_time_mins ~ 1 + (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) , data = ptime_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 4000, warmup = 2000, chains = 4 , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms2_mod&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms2_mod) check the prior distributions # check priors brms::prior_summary(brms2_mod) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(mean_y, sd_y * 5) Intercept user gamma(alpha, beta) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default cauchy(0, sd_y) sigma 0 user The brms::brm model summary brms2_mod %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian two nominal predictors: point cloud processing time by depth map quality and filtering mode&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.13: Bayesian two nominal predictors: point cloud processing time by depth map quality and filtering mode parameter estimate est.error q2.5 q97.5 b_Intercept 22.69 22.14 -22.31 67.96 sd_filtering__Intercept 9.47 8.99 0.82 33.84 sd_quality__Intercept 45.16 19.70 20.89 97.64 sd_quality:filtering__Intercept 8.93 2.60 4.80 14.93 sigma 10.03 0.82 8.56 11.77 r_filtering[aggressive,Intercept] -4.45 7.22 -20.85 8.06 r_filtering[moderate,Intercept] -0.50 6.90 -15.04 13.80 r_filtering[mild,Intercept] 0.52 6.96 -13.65 15.25 r_filtering[disabled,Intercept] 4.28 7.13 -8.62 19.95 r_quality[ultra.high,Intercept] 59.63 21.61 16.21 104.73 r_quality[high,Intercept] -2.31 21.60 -46.77 41.48 r_quality[medium,Intercept] -15.58 21.48 -60.28 27.91 r_quality[low,Intercept] -20.14 21.54 -65.01 23.93 r_quality[lowest,Intercept] -21.14 21.68 -65.81 22.52 r_quality:filtering[high_aggressive,Intercept] -1.60 6.41 -14.49 10.84 r_quality:filtering[high_disabled,Intercept] 2.32 6.53 -10.57 15.62 r_quality:filtering[high_mild,Intercept] -0.12 6.22 -12.47 12.45 r_quality:filtering[high_moderate,Intercept] -0.95 6.29 -13.59 11.16 r_quality:filtering[low_aggressive,Intercept] 3.00 6.40 -9.57 15.79 r_quality:filtering[low_disabled,Intercept] -3.34 6.50 -16.54 9.21 r_quality:filtering[low_mild,Intercept] -0.71 6.17 -12.77 11.50 r_quality:filtering[low_moderate,Intercept] -0.01 6.12 -12.46 12.03 r_quality:filtering[lowest_aggressive,Intercept] 2.94 6.32 -9.42 15.77 r_quality:filtering[lowest_disabled,Intercept] -3.57 6.38 -16.58 8.70 r_quality:filtering[lowest_mild,Intercept] -0.80 6.21 -13.19 11.55 r_quality:filtering[lowest_moderate,Intercept] -0.09 6.21 -12.65 12.31 r_quality:filtering[medium_aggressive,Intercept] 2.20 6.39 -10.77 15.22 r_quality:filtering[medium_disabled,Intercept] -2.31 6.32 -14.91 10.39 r_quality:filtering[medium_mild,Intercept] -0.83 6.29 -13.32 11.63 r_quality:filtering[medium_moderate,Intercept] -0.25 6.28 -13.18 12.06 r_quality:filtering[ultra.high_aggressive,Intercept] -16.56 6.96 -30.88 -3.72 r_quality:filtering[ultra.high_disabled,Intercept] 16.89 7.13 4.10 32.41 r_quality:filtering[ultra.high_mild,Intercept] 3.13 6.48 -9.55 16.47 r_quality:filtering[ultra.high_moderate,Intercept] 0.55 6.46 -11.94 13.63 We can look at the model noise standard deviation \\(\\sigma_y\\) # extract the posterior draws brms::as_draws_df(brms2_mod) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + xlab(latex2exp::TeX(&quot;$\\\\sigma_y$&quot;)) + theme_light() # how is it compared to the first model dplyr::bind_rows( brms::as_draws_df(brms1_mod) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;one nominal predictor&quot;) , brms::as_draws_df(brms2_mod) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model noise standard deviation comparison&quot;) %&gt;% kableExtra::kable_styling() Table 4.14: brms::brm model noise standard deviation comparison model sigma .lower .upper .width .point .interval one nominal predictor 12.60 10.89 14.50 0.95 median hdi two nominal predictor 9.98 8.45 11.64 0.95 median hdi plot the posterior distributions of the conditional means with the median processing time and the 95% highest posterior density interval (HDI) ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws(brms2_mod, allow_new_levels = T) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; , fill = &quot;Filtering Mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) # guides( # fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) # ) we can also make pairwise comparisons brms_contrast_temp = ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws(brms2_mod, allow_new_levels = T) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptime_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptime_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate( is_gt_zero = value &gt; 0 , pct_gt_zero = sum(is_gt_zero)/dplyr::n() , sig_level2 = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 320,000 ## Columns: 11 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 49.69898, 36.26862, 45.16237, 43.… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ sig_level2 &lt;ord&gt; &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99… plot it # plot it brms_contrast_temp %&gt;% ggplot( mapping = aes( x = value, y = contrast , fill = sig_level2 # pct_gt_zero # , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + scale_fill_viridis_d( option = &quot;mako&quot;, begin = 0.3 , drop = F # , labels = scales::percent ) + # scale_fill_viridis_c( # option = &quot;mako&quot;, begin = 0.3, direction = -1 # , labels = scales::percent # ) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , subtitle = &quot;95% &amp; 50% HDI of the posterior distribution of conditional mean group constrasts&quot; , fill = &quot;Pr(contrast &gt; 0)&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% dplyr::rename(difference=value) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (mins.)&quot; , &quot;conf.low&quot;, &quot;conf.high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.15: brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts quality contrast filtering mode difference (mins.) conf.low conf.high ultra high - high aggressive 46.9 34.6 59.3 ultra high - high moderate 63.4 52.3 75.0 ultra high - high mild 65.2 53.7 76.4 ultra high - high disabled 76.5 64.2 87.9 ultra high - medium aggressive 56.4 43.8 68.6 ultra high - medium moderate 76.1 65.0 87.4 ultra high - medium mild 79.1 67.7 90.5 ultra high - medium disabled 94.4 81.8 106.7 ultra high - low aggressive 60.1 47.6 73.0 ultra high - low moderate 80.4 69.0 91.5 ultra high - low mild 83.7 72.2 94.7 ultra high - low disabled 100.2 87.8 112.4 ultra high - lowest aggressive 61.2 48.3 73.6 ultra high - lowest moderate 81.4 69.9 92.7 ultra high - lowest mild 84.7 73.3 95.9 ultra high - lowest disabled 101.2 89.1 113.7 high - medium aggressive 9.5 -2.3 20.4 high - medium moderate 12.6 1.6 24.1 high - medium mild 14.0 2.5 25.3 high - medium disabled 17.9 6.6 29.7 high - low aggressive 13.2 1.5 24.7 high - low moderate 17.0 5.8 28.1 high - low mild 18.5 6.9 29.8 high - low disabled 23.5 11.7 34.1 high - lowest aggressive 14.3 2.1 25.2 high - lowest moderate 17.9 6.5 29.0 high - lowest mild 19.5 8.3 30.6 high - lowest disabled 24.8 13.3 36.3 medium - low aggressive 3.7 -7.2 15.2 medium - low moderate 4.4 -6.7 16.1 medium - low mild 4.5 -6.5 15.6 medium - low disabled 5.6 -5.7 16.9 medium - lowest aggressive 4.8 -6.0 16.7 medium - lowest moderate 5.4 -6.1 16.6 medium - lowest mild 5.6 -5.7 16.7 medium - lowest disabled 6.9 -4.5 17.9 low - lowest aggressive 1.0 -10.2 12.1 low - lowest moderate 1.1 -10.4 12.2 low - lowest mild 1.2 -10.5 12.2 low - lowest disabled 1.2 -10.0 12.3 Kruschke (2015) notes that for the multiple nominal predictors model: In applications with multiple levels of the factors, it is virtually always the case that we are interested in comparing particular levels with each other…These sorts of comparisons, which involve levels of a single factor and collapse across the other factor(s), are called main effect comparisons or contrasts.(p. 595) First, let’s collapse across the filtering mode to compare the depth map quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;depth map quality&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above # let&#39;s compare these results to the results from our [one nominal predictor model above](#one_pred_mod) ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;two nominal predictor&quot;) %&gt;% dplyr::bind_rows( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms1_mod) %&gt;% dplyr::mutate(value = .epred, src = &quot;one nominal predictor&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_viridis_d(option = &quot;turbo&quot;, begin = 0.2, end = 0.8) + labs( y = &quot;&quot;, x = &quot;point cloud processing mins.&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) these results are as expected, with Kruschke (2015) noting: It is important to realize that the estimates of interaction contrasts are typically much more uncertain than the estimates of simple effects or main effects…This large uncertainty of an interaction contrast is caused by the fact that it involves at least four sources of uncertainty (i.e., at least four groups of data), unlike its component simple effects which each involve only half of those sources of uncertainty. In general, interaction contrasts require a lot of data to estimate accurately. (p. 598) For completeness, let’s also collapse across the depth map quality to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;) …it looks like the variation in processing time is driven by the depth map quality setting. We can quantify the variation in processing time by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms2_mod) %&gt;% dplyr::select(c(sigma,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_light() Finally we can perform model selection via information criteria, from section 10 in Kurz’s ebook supplement: expected log predictive density (elpd_loo), the estimated effective number of parameters (p_loo), and the Pareto smoothed importance-sampling leave-one-out cross-validation (PSIS-LOO; looic). Each estimate comes with a standard error (i.e., SE). Like other information criteria, the LOO values aren’t of interest in and of themselves. However, the estimate of one model’s LOO relative to that of another can be of great interest. We generally prefer models with lower information criteria. With the brms::loo_compare() function, we can compute a formal difference score between two models…The brms::loo_compare() output rank orders the models such that the best fitting model appears on top. brms1_mod = brms::add_criterion(brms1_mod, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms2_mod = brms::add_criterion(brms2_mod, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms1_mod, brms2_mod, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms2_mod 0.0 0.0 ## brms1_mod -16.4 11.9 4.3 Two Nominal Predictors + site effects Now, we’ll add the average deflection from the baseline (i.e. the “grand mean”) due to study site (i.e. the “subjects” in our data). The main effect for the study site will be added to our model with the combined influence of the depth map generation quality and the depth map filtering parameters on the point cloud processing time. In the model we use below, the study site is modeled as a “random effect.” Hobbs et al. (2024) describe a similar model: It is important to understand that fitting treatment intercepts and slopes as random rather than fixed means that our inference applied to all possible sites suitable for [inclusion in the study]. In contrast, assuming fixed effects of treatment would dramatically reduce the uncertainty about those effects, but would constrain inference to the four sites that we studied. (p. 13) From this point forward we will only show the Bayesian methodology. 4.3.1 Summary Statistics Each study site contributes one observation per depth map quality and filtering mode setting. That is, a row in the underlying data is unique by study site, depth map quality, and filtering mode. identical( # base data nrow(ptime_data) # distinct group , ptime_data %&gt;% dplyr::distinct( study_site , depth_maps_generation_quality , depth_maps_generation_filtering_mode ) %&gt;% nrow() ) ## [1] TRUE we can visualize the data using ggplot2::geom_tile ptime_data %&gt;% dplyr::mutate( depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev() ) %&gt;% ggplot(mapping = aes( y = study_site , x = depth_maps_generation_filtering_mode , fill = log(timer_total_time_mins) )) + geom_tile(color = &quot;white&quot;) + geom_text( mapping = aes(label = round(timer_total_time_mins)), color = &quot;white&quot; , size = 3, angle = 90 ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_viridis_c( option = &quot;viridis&quot; , labels = c(&quot;&quot;, &quot;short&quot;,&quot;&quot;,&quot;&quot;, &quot;long&quot;, &quot;&quot;) ) + labs( x = &quot;filtering mode&quot; , subtitle = &quot;depth map quality&quot; , y = &quot;study site&quot; , fill = &quot;point cloud\\nprocessing time&quot; ) + theme_light() + theme( axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 4.3.2 Bayesian Kruschke (2015) describes the Hierarchical Bayesian approach to describe groups of metric data with multiple nominal predictors when every subject (“study site” in our research) contributes many measurements to each cell versus situations when each subject only contributes one observation per cell/condition: When every subject contributes many measurements to every cell, then the model of the situation is a straight-forward extension of the models we have already considered. We merely add “subject” as another nominal predictor in the model, with each individual subject being a level of the predictor. If there is one predictor other than subject, the model becomes \\[ y = \\beta_0 + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_S \\overrightarrow x_S + \\overrightarrow \\beta_{1 \\times S} \\overrightarrow x_{1 \\times S} \\] This is exactly the two-predictor model we have already considered, with the second predictor being subject. When there are two predictors other than subject, the model becomes \\[\\begin{align*} y = &amp; \\; \\beta_0 &amp; \\text{baseline} \\\\ &amp; + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_2 \\overrightarrow x_2 + \\overrightarrow \\beta_S \\overrightarrow x_S &amp; \\text{main effects} \\\\ &amp; + \\overrightarrow \\beta_{1 \\times 2} \\overrightarrow x_{1 \\times 2} + \\overrightarrow \\beta_{1 \\times S} \\overrightarrow x_{1 \\times S} + \\overrightarrow \\beta_{2 \\times S} \\overrightarrow x_{2 \\times S} &amp; \\text{two-way interactions} \\\\ &amp; + \\overrightarrow \\beta_{1 \\times 2 \\times S} \\overrightarrow x_{1 \\times 2 \\times S} &amp; \\text{three-way interactions} \\end{align*}\\] This model includes all the two-way interactions of the factors, plus the three-way interaction. (p. 607) In situations in which subjects only contribute one observation per condition/cell, we simplify the model to \\[\\begin{align*} y = &amp; \\; \\beta_0 \\\\ &amp; + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_2 \\overrightarrow x_2 + \\overrightarrow \\beta_{1 \\times 2} \\overrightarrow x_{1 \\times 2} \\\\ &amp; + \\overrightarrow \\beta_S \\overrightarrow x_S \\end{align*}\\] In other words, we assume a main effect of subject, but no interaction of subject with other predictors. In this model, the subject effect (deflection) is constant across treatments, and the treatment effects (deflections) are constant across subjects. Notice that the model makes no requirement that every subject contributes a datum to every condition. Indeed, the model allows zero or multiple data per subject per condition. Bayesian estimation makes no assumptions or requirements that the design is balanced (i.e., has equal numbers of measurement in each cell). (p. 608) and see section 20 from Kurz’s ebook supplement for this model, we’ll define the priors following Kurz: # from Kurz: gamma_a_b_from_omega_sigma &lt;- function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate &lt;- (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape &lt;- 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp &lt;- mean(ptime_data$timer_total_time_mins) sd_y_temp &lt;- sd(ptime_data$timer_total_time_mins) omega_temp &lt;- sd_y_temp / 2 sigma_temp &lt;- 2 * sd_y_temp s_r_temp &lt;- gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp &lt;- brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) Now fit the model. brms3_mod = brms::brm( formula = timer_total_time_mins ~ 1 + (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | study_site) , data = ptime_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 4000, warmup = 2000, chains = 4 , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms3_mod&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms3_mod) check the prior distributions # check priors brms::prior_summary(brms3_mod) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(mean_y, sd_y * 5) Intercept user gamma(alpha, beta) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd study_site default sd Intercept study_site default cauchy(0, sd_y) sigma 0 user The brms::brm model summary brms3_mod %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian two nominal predictors + study site effects for point cloud processing time&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.16: Bayesian two nominal predictors + study site effects for point cloud processing time parameter estimate est.error q2.5 q97.5 b_Intercept 22.32 22.53 -23.77 67.69 sd_filtering__Intercept 9.26 8.88 0.71 33.16 sd_quality__Intercept 44.93 19.97 21.31 97.68 sd_quality:filtering__Intercept 9.04 2.42 5.22 14.65 sd_study_site__Intercept 6.09 4.47 1.67 17.50 sigma 9.32 0.77 7.95 11.01 r_filtering[aggressive,Intercept] -4.29 6.86 -19.55 7.94 r_filtering[moderate,Intercept] -0.30 6.55 -13.86 13.28 r_filtering[mild,Intercept] 0.55 6.56 -12.14 14.80 r_filtering[disabled,Intercept] 4.39 6.88 -6.86 19.95 r_quality[ultra.high,Intercept] 59.88 21.87 16.82 105.55 r_quality[high,Intercept] -2.00 21.92 -45.98 43.30 r_quality[medium,Intercept] -15.36 21.92 -59.34 28.81 r_quality[low,Intercept] -19.83 22.09 -64.57 25.85 r_quality[lowest,Intercept] -20.87 22.01 -65.27 23.19 r_quality:filtering[high_aggressive,Intercept] -1.69 6.38 -14.52 10.70 r_quality:filtering[high_disabled,Intercept] 2.33 6.35 -10.03 15.09 r_quality:filtering[high_mild,Intercept] -0.08 6.19 -12.18 12.18 r_quality:filtering[high_moderate,Intercept] -1.09 6.07 -13.09 11.02 r_quality:filtering[low_aggressive,Intercept] 3.06 6.43 -9.41 15.83 r_quality:filtering[low_disabled,Intercept] -3.52 6.37 -16.45 8.99 r_quality:filtering[low_mild,Intercept] -0.69 6.05 -12.66 11.57 r_quality:filtering[low_moderate,Intercept] -0.09 6.23 -12.69 12.34 r_quality:filtering[lowest_aggressive,Intercept] 3.03 6.48 -9.99 15.88 r_quality:filtering[lowest_disabled,Intercept] -3.74 6.44 -16.55 8.76 r_quality:filtering[lowest_mild,Intercept] -0.74 6.34 -13.51 11.56 r_quality:filtering[lowest_moderate,Intercept] -0.11 6.30 -12.83 12.61 r_quality:filtering[medium_aggressive,Intercept] 2.39 6.48 -10.44 15.13 r_quality:filtering[medium_disabled,Intercept] -2.33 6.49 -15.04 10.73 r_quality:filtering[medium_mild,Intercept] -0.72 6.26 -13.26 11.59 r_quality:filtering[medium_moderate,Intercept] -0.27 6.28 -12.89 12.39 r_quality:filtering[ultra.high_aggressive,Intercept] -17.33 6.73 -30.77 -4.71 r_quality:filtering[ultra.high_disabled,Intercept] 17.58 6.98 4.84 32.18 r_quality:filtering[ultra.high_mild,Intercept] 3.41 6.41 -8.76 16.85 r_quality:filtering[ultra.high_moderate,Intercept] 0.44 6.24 -11.81 13.09 r_study_site[KAIBAB_HIGH,Intercept] -1.93 3.67 -9.41 5.02 r_study_site[KAIBAB_LOW,Intercept] -5.14 3.82 -13.38 1.60 r_study_site[N1,Intercept] 2.18 3.76 -4.89 10.04 r_study_site[SQ09_02,Intercept] 2.35 3.68 -4.57 10.03 r_study_site[WA85_02,Intercept] 2.46 3.72 -4.60 10.47 We can look at the model noise standard deviation \\(\\sigma_y\\) # extract the posterior draws brms::as_draws_df(brms3_mod) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + xlab(latex2exp::TeX(&quot;$\\\\sigma_y$&quot;)) + theme_light() # how is it compared to our other models? dplyr::bind_rows( brms::as_draws_df(brms1_mod) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;one nominal predictor&quot;) , brms::as_draws_df(brms2_mod) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor&quot;) , brms::as_draws_df(brms3_mod) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor + site effect&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model noise standard deviation comparison&quot;) %&gt;% kableExtra::kable_styling() Table 4.17: brms::brm model noise standard deviation comparison model sigma .lower .upper .width .point .interval one nominal predictor 12.60 10.89 14.50 0.95 median hdi two nominal predictor 9.98 8.45 11.64 0.95 median hdi two nominal predictor + site effect 9.27 7.81 10.82 0.95 median hdi plot the posterior distributions of the conditional means with the median processing time and the 95% highest posterior density interval (HDI) Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of study_site (i.e., we left (1 | study_site) out of the formula). For this model we have to collapse across the study site effects to compare the depth map quality and filtering mode setting effects. ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms3_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; , fill = &quot;Filtering Mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) # guides( # fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) # ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms3_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptime_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptime_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate( is_gt_zero = value &gt; 0 , pct_gt_zero = sum(is_gt_zero)/dplyr::n() , sig_level2 = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 320,000 ## Columns: 11 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 56.16488, 38.73338, 50.98472, 48.… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ sig_level2 &lt;ord&gt; &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99… plot it # plot it brms_contrast_temp %&gt;% ggplot( mapping = aes( x = value, y = contrast , fill = sig_level2 # pct_gt_zero # , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + scale_fill_viridis_d( option = &quot;mako&quot;, begin = 0.3 , drop = F # , labels = scales::percent ) + # scale_fill_viridis_c( # option = &quot;mako&quot;, begin = 0.3, direction = -1 # , labels = scales::percent # ) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , subtitle = &quot;95% &amp; 50% HDI of the posterior distribution of conditional mean group constrasts&quot; , fill = &quot;Pr(contrast &gt; 0)&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% dplyr::rename(difference=value) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (mins.)&quot; , &quot;conf.low&quot;, &quot;conf.high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.18: brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts quality contrast filtering mode difference (mins.) conf.low conf.high ultra high - high aggressive 46.3 34.6 57.6 ultra high - high moderate 63.4 52.6 74.0 ultra high - high mild 65.4 54.5 76.2 ultra high - high disabled 77.1 66.1 88.9 ultra high - medium aggressive 55.5 43.5 66.6 ultra high - medium moderate 75.9 64.8 86.0 ultra high - medium mild 79.4 69.1 90.6 ultra high - medium disabled 95.2 83.8 106.6 ultra high - low aggressive 59.3 48.0 71.1 ultra high - low moderate 80.2 69.8 90.8 ultra high - low mild 83.8 73.4 94.5 ultra high - low disabled 100.9 89.2 112.8 ultra high - lowest aggressive 60.4 48.6 72.0 ultra high - lowest moderate 81.3 70.5 92.0 ultra high - lowest mild 84.9 73.9 95.4 ultra high - lowest disabled 102.0 90.5 113.9 high - medium aggressive 9.3 -1.8 19.9 high - medium moderate 12.6 1.9 23.4 high - medium mild 14.1 2.9 24.3 high - medium disabled 18.0 7.5 28.9 high - low aggressive 13.1 3.0 24.3 high - low moderate 16.9 6.5 28.1 high - low mild 18.4 7.7 29.1 high - low disabled 23.7 13.0 34.5 high - lowest aggressive 14.2 3.3 24.7 high - lowest moderate 17.9 7.3 28.6 high - lowest mild 19.5 9.0 30.6 high - lowest disabled 25.0 14.2 35.9 medium - low aggressive 3.9 -6.8 14.6 medium - low moderate 4.3 -6.3 15.4 medium - low mild 4.4 -6.2 15.0 medium - low disabled 5.6 -5.6 15.7 medium - lowest aggressive 4.9 -5.9 15.4 medium - lowest moderate 5.4 -4.9 16.6 medium - lowest mild 5.5 -5.7 15.9 medium - lowest disabled 6.9 -3.8 17.5 low - lowest aggressive 1.1 -10.2 11.1 low - lowest moderate 1.0 -9.5 12.1 low - lowest mild 1.1 -9.1 12.1 low - lowest disabled 1.3 -9.4 11.8 let’s collapse across the filtering mode and study site to compare the depth map quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;depth map quality&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above and two nominal predictor model without site effects above ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor&quot;) %&gt;% dplyr::bind_rows( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;two nominal predictor&quot;) , ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms1_mod) %&gt;% dplyr::mutate(value = .epred, src = &quot;one nominal predictor&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + # scale_color_viridis_d(option = &quot;turbo&quot;, begin = 0.2, end = 0.8) + scale_color_manual(values = viridis::turbo(n = 4, begin = 0.2, end = 0.8)[c(1,3:4)]) + labs( y = &quot;&quot;, x = &quot;point cloud processing mins.&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) For completeness, let’s also collapse across the depth map quality to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above and two nominal predictor model without site effects above ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor&quot;) %&gt;% dplyr::bind_rows( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;two nominal predictor&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_filtering_mode), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n=4, begin = 0.2, end = 0.8)[3:4]) + labs( y = &quot;filtering mode&quot;, x = &quot;point cloud processing mins.&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) Finally, we can quantify the variation in processing time by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms3_mod) %&gt;% dplyr::select(c(sigma,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_light() and perform model selection via information criteria with the brms::loo_compare() function brms3_mod = brms::add_criterion(brms3_mod, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms1_mod, brms2_mod, brms3_mod, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms3_mod 0.0 0.0 ## brms2_mod -6.6 2.4 ## brms1_mod -23.0 11.4 # brms::model_weights(brms1_mod, brms2_mod, brms3_mod) %&gt;% round(3) 4.4 Gamma: Two Nominal Predictors + site effects To this point, we have been modelling point cloud processing time presuming a Gaussian likelihood. However, the gamma likelihood more accurately represents the processing time data which is continuous and strictly positive (i.e. it is impossible to have a negative runtime). The gamma distribution is a great alternative that accounts for data with a zero lower limit and any right skew. We borrow here from the excellent series on causal inference by A. Solomon Kurz 4.4.1 Summary Statistics let’s check our underlying data for point cloud processing time (our dependent or \\(y\\) variable) # distribution ptime_data %&gt;% ggplot(mapping = aes(x = timer_total_time_mins)) + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) + geom_density(fill = &quot;lightblue&quot;, alpha = 0.7, color = NA) + labs(y=&quot;&quot;,x=&quot;point cloud processing mins.&quot;) + scale_y_continuous(breaks = c(0)) + theme_light() + theme(panel.grid = element_blank()) and the summary statistics ptime_data$timer_total_time_mins %&gt;% summary() ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.835 1.978 6.577 22.725 24.287 144.272 4.4.2 Bayesian With the gamma likelihood our model becomes: Need to check our prior selection…just go with brms defaults for now \\[\\begin{align*} y_{i} &amp;\\sim {\\sf Gamma} \\bigl(\\mu_{i}, \\alpha \\bigr) \\\\ log(\\mu_{i}) &amp;= \\beta_0 + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{s} \\beta_{3[s]} x_{3[s]} \\\\ \\beta_{0} &amp;\\sim {\\sf Normal} (0,100) \\\\ \\beta_{1[j]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{1\\times2[j,k]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{3[s]} &amp;\\sim {\\sf Normal} (0,\\sigma_{\\beta_{3}}) \\\\ \\sigma_{\\beta_{1}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{\\beta_{2}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\sigma_{\\beta_{3}} &amp;\\sim {\\sf Gamma} (1.28,0.005) \\\\ \\alpha &amp;\\sim {\\sf Gamma} (0.01,0.01) \\\\ \\end{align*}\\] Note that the \\({\\sf Gamma}\\) likelihood is parameterized in terms of the mean (\\(\\mu\\)) and the shape (\\(\\alpha\\)) Now fit the model. brms4_mod = brms::brm( formula = timer_total_time_mins ~ 1 + (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | study_site) , data = ptime_data , family = brms::brmsfamily(&quot;Gamma&quot;, link = &quot;log&quot;) # Gamma(link = &quot;log&quot;) , iter = 4000, warmup = 2000, chains = 4 , cores = round(parallel::detectCores()/2) # , prior = c( # brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) # , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) # , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) # ) # , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms4_mod&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms4_mod) posterior-predictive check to make sure the model does an okay job simulating data that resemble the sample data # posterior predictive check brms::pp_check( brms4_mod , type = &quot;dens_overlay&quot; , ndraws = 50 ) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)&quot;) + theme_light() + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;, legend.text = element_text(size = 14)) How’d we do capturing the conditional means and standard deviations by depth map generation quality? # means p1_temp = brms::pp_check( brms4_mod , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;mean&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms4_mod , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;sd&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # combine (p1_temp / p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\nby depth map quality&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) The means are decent, the sd’s are terrible…see the section “Heterogeneous variances and robustness against outliers” in Kruschke (2015) on p.602 and in Kurz’s ebook companion check the prior distributions # check priors brms::prior_summary(brms4_mod) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source student_t(3, 1.9, 2.5) Intercept default student_t(3, 0, 2.5) sd 0 default sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd study_site default sd Intercept study_site default gamma(0.01, 0.01) shape 0 default The brms::brm model summary brms4_mod %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;shape&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian two nominal predictors + study site effects for point cloud processing time&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.19: Bayesian two nominal predictors + study site effects for point cloud processing time parameter estimate est.error q2.5 q97.5 b_Intercept 2.02 0.89 0.25 3.82 sd_filtering__Intercept 0.31 0.26 0.09 1.04 sd_quality__Intercept 2.07 0.78 1.06 4.01 sd_quality:filtering__Intercept 0.09 0.04 0.02 0.18 sd_study_site__Intercept 0.18 0.12 0.06 0.49 shape 41.53 6.81 29.30 55.69 r_filtering[aggressive,Intercept] -0.18 0.20 -0.57 0.20 r_filtering[moderate,Intercept] -0.03 0.20 -0.42 0.37 r_filtering[mild,Intercept] 0.03 0.19 -0.35 0.43 r_filtering[disabled,Intercept] 0.19 0.20 -0.17 0.60 r_quality[ultra.high,Intercept] 2.38 0.87 0.58 4.11 r_quality[high,Intercept] 0.95 0.87 -0.86 2.68 r_quality[medium,Intercept] -0.13 0.87 -1.93 1.59 r_quality[low,Intercept] -1.24 0.87 -3.04 0.48 r_quality[lowest,Intercept] -1.97 0.87 -3.77 -0.23 r_quality:filtering[high_aggressive,Intercept] -0.09 0.08 -0.28 0.05 r_quality:filtering[high_disabled,Intercept] 0.09 0.08 -0.05 0.27 r_quality:filtering[high_mild,Intercept] 0.02 0.08 -0.13 0.17 r_quality:filtering[high_moderate,Intercept] -0.01 0.07 -0.16 0.14 r_quality:filtering[low_aggressive,Intercept] 0.07 0.08 -0.07 0.24 r_quality:filtering[low_disabled,Intercept] -0.06 0.08 -0.22 0.08 r_quality:filtering[low_mild,Intercept] -0.01 0.07 -0.16 0.14 r_quality:filtering[low_moderate,Intercept] -0.01 0.07 -0.16 0.13 r_quality:filtering[lowest_aggressive,Intercept] 0.06 0.08 -0.09 0.23 r_quality:filtering[lowest_disabled,Intercept] -0.06 0.08 -0.23 0.08 r_quality:filtering[lowest_mild,Intercept] 0.00 0.08 -0.16 0.15 r_quality:filtering[lowest_moderate,Intercept] 0.00 0.07 -0.16 0.14 r_quality:filtering[medium_aggressive,Intercept] 0.01 0.07 -0.14 0.17 r_quality:filtering[medium_disabled,Intercept] 0.02 0.08 -0.12 0.19 r_quality:filtering[medium_mild,Intercept] -0.02 0.08 -0.18 0.13 r_quality:filtering[medium_moderate,Intercept] -0.01 0.07 -0.16 0.14 r_quality:filtering[ultra.high_aggressive,Intercept] -0.10 0.08 -0.29 0.04 r_quality:filtering[ultra.high_disabled,Intercept] 0.06 0.08 -0.08 0.23 r_quality:filtering[ultra.high_mild,Intercept] 0.02 0.08 -0.12 0.18 r_quality:filtering[ultra.high_moderate,Intercept] 0.03 0.07 -0.12 0.19 r_study_site[KAIBAB_HIGH,Intercept] 0.01 0.10 -0.18 0.21 r_study_site[KAIBAB_LOW,Intercept] -0.13 0.10 -0.33 0.06 r_study_site[N1,Intercept] 0.08 0.10 -0.11 0.27 r_study_site[SQ09_02,Intercept] 0.12 0.10 -0.07 0.32 r_study_site[WA85_02,Intercept] -0.08 0.10 -0.28 0.11 We can look at the model noise standard deviation (shape) \\(\\alpha\\) # extract the posterior draws brms::as_draws_df(brms4_mod) %&gt;% # plot ggplot(aes(x = shape, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + xlab(latex2exp::TeX(&quot;$\\\\alpha$&quot;)) + theme_light() plot the posterior distributions of the conditional means with the median processing time and the 95% highest posterior density interval (HDI) Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of study_site (i.e., we left (1 | study_site) out of the formula). For this model we have to collapse across the study site effects to compare the depth map quality and filtering mode setting effects. ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms4_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = scales::breaks_log(n = 8) ) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; , fill = &quot;Filtering Mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) # guides( # fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) # ) That really tightened-up our estimates. Note that we had to use a log scale on the y axis (using ggplot2::scale_y_log10) and that none of our estimates for processing time are below zero. we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms4_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptime_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptime_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate( is_gt_zero = value &gt; 0 , pct_gt_zero = sum(is_gt_zero)/dplyr::n() , sig_level2 = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 320,000 ## Columns: 11 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 53.82774, 42.97583, 42.28363, 46.… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ sig_level2 &lt;ord&gt; &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99%, &gt;99… plot it with the help of ggplot2::scale_x_log10 # plot it brms_contrast_temp %&gt;% ggplot( mapping = aes( x = value, y = contrast , fill = sig_level2 # pct_gt_zero # , fill = depth_maps_generation_filtering_mode ) ) + # # for kicks and giggles we&#39;ll throw in the ROPE geom_vline(xintercept = 0.1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d( option = &quot;mako&quot;, begin = 0.3 , drop = F # , labels = scales::percent ) + # scale_fill_viridis_c( # option = &quot;mako&quot;, begin = 0.3, direction = -1 # , labels = scales::percent # ) + scale_x_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = c(0.1,1,3,10,30,100,300,800) # scales::breaks_log(n = 8) ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( y = &quot;depth map quality&quot; , x = &quot;constrast (mins.)&quot; , subtitle = &quot;95% &amp; 50% HDI of the posterior distribution of conditional mean group constrasts&quot; , fill = &quot;Pr(contrast &gt; 0)&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 45, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 1, color = NA, shape = NA, lwd = NA)) ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% dplyr::rename(difference=value) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (mins.)&quot; , &quot;conf.low&quot;, &quot;conf.high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 4.20: brms::brm model: 95% HDI of the posterior distribution of conditional mean group constrasts quality contrast filtering mode difference (mins.) conf.low conf.high ultra high - high aggressive 45.8 35.1 58.5 ultra high - high moderate 61.9 47.0 77.1 ultra high - high mild 64.7 49.3 80.5 ultra high - high disabled 77.9 60.0 97.9 ultra high - medium aggressive 55.0 43.2 69.1 ultra high - medium moderate 74.2 58.7 92.5 ultra high - medium mild 78.5 62.2 97.1 ultra high - medium disabled 95.7 75.5 118.6 ultra high - low aggressive 58.5 45.7 72.7 ultra high - low moderate 78.4 63.2 98.2 ultra high - low mild 82.9 65.2 101.3 ultra high - low disabled 101.4 80.2 125.0 ultra high - lowest aggressive 59.6 46.8 74.0 ultra high - lowest moderate 79.5 64.1 99.5 ultra high - lowest mild 84.0 66.7 103.0 ultra high - lowest disabled 102.7 81.8 127.0 high - medium aggressive 9.2 6.4 11.8 high - medium moderate 12.3 9.3 15.7 high - medium mild 13.7 10.4 17.4 high - medium disabled 17.6 13.3 22.6 high - low aggressive 12.8 9.7 15.9 high - low moderate 16.6 13.0 20.4 high - low mild 18.1 14.2 22.4 high - low disabled 23.3 18.2 29.0 high - lowest aggressive 13.8 10.7 17.1 high - lowest moderate 17.6 13.9 21.7 high - lowest mild 19.3 15.2 23.7 high - lowest disabled 24.6 19.7 30.8 medium - low aggressive 3.6 2.7 4.6 medium - low moderate 4.2 3.2 5.3 medium - low mild 4.4 3.3 5.5 medium - low disabled 5.6 4.3 7.2 medium - lowest aggressive 4.6 3.6 5.7 medium - lowest moderate 5.3 4.2 6.6 medium - lowest mild 5.5 4.3 6.8 medium - lowest disabled 6.9 5.4 8.6 low - lowest aggressive 1.0 0.7 1.4 low - lowest moderate 1.1 0.8 1.4 low - lowest mild 1.1 0.8 1.5 low - lowest disabled 1.3 0.9 1.7 let’s collapse across the filtering mode and study site to compare the depth map quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws we continue to use ggplot2::scale_x_log10 ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms4_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + geom_vline(xintercept = 0.1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1) + tidybayes::stat_dotsinterval(quantiles = 100) + # tidybayes::stat_halfeye( # point_interval = median_hdi, .width = .95 # , interval_color = &quot;gray66&quot; # , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; # , justification = -0.01 # ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = c(0.1,1,3,10,30,100,300,1000) ) + labs( y = &quot;depth map quality&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 1)) let’s compare these results to the results from our one nominal predictor model above and two nominal predictor model without site effects above and two nominal predictor model with site effects above ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms4_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor: gamma&quot;) %&gt;% dplyr::bind_rows( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor: gauss&quot;) , ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;two nominal predictor&quot;) , ptime_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms1_mod) %&gt;% dplyr::mutate(value = .epred, src = &quot;one nominal predictor&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_x_continuous(breaks = scales::extended_breaks(10)) + scale_color_viridis_d(option = &quot;turbo&quot;, begin = 0.2, end = 0.8) + labs( y = &quot;&quot;, x = &quot;point cloud processing mins.&quot; , color = &quot;model&quot; ) + theme_light() + theme( legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( color = guide_legend( nrow = 2, byrow = T , override.aes = list(shape = 15, size = 10, lwd = NA) ) ) Notice that our gamma likelihood model constrains the processing time estimate to strictly positive values while the other models which utilized a Gaussian likelihood predict nonsensical negative processing times. The gamma distribution also does a nice job representing the right-skew observed in the processing time data. Let’s check the posterior distribution for the overall grand mean \\(\\beta_{0}\\) to see how well the right-skew is represented (we also saw this in our posterior predictive checks). We’ll make use of brms::fixef and we use the \\(exp()\\) to transform the predicted values because we are using the log link with the gamma likelihood # we can make use of brms::fixef brms::fixef(brms4_mod, summary = F) %&gt;% dplyr::as_tibble() %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate(value = exp(Intercept)) %&gt;% # plot ggplot(aes(x = value, y = 0)) + geom_vline(xintercept = 0) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + labs(y=&quot;&quot;,x=&quot;point cloud processing mins.&quot;, subtitle = latex2exp::TeX(&quot;gamma likelihood model posterior distribution of the grand mean $\\\\beta_0$&quot;)) + scale_y_continuous(NULL, breaks = NULL) + scale_x_continuous(breaks = scales::extended_breaks(15)) + theme_light() and get the summary statistics of the grand mean using brms::as_draws_df and posterior::summarise_draws brms::as_draws_df(brms4_mod) %&gt;% select(b_Intercept) %&gt;% dplyr::mutate(b_Intercept = exp(b_Intercept)) %&gt;% posterior::summarise_draws() %&gt;% kableExtra::kbl(digits = 1, caption = &quot;brms::brm model: summary statiscits of the grand mean&quot;) %&gt;% kableExtra::kable_styling() Table 4.21: brms::brm model: summary statiscits of the grand mean variable mean median sd mad q5 q95 rhat ess_bulk ess_tail b_Intercept 11.4 7.5 15.6 5.7 1.8 32.4 1 2117.1 3176.9 For completeness, let’s also collapse across the depth map quality to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms4_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + geom_vline(xintercept = 0.1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1) + tidybayes::stat_dotsinterval(quantiles = 100) + # tidybayes::stat_halfeye( # point_interval = median_hdi, .width = .95 # , interval_color = &quot;gray66&quot; # , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; # , justification = -0.01 # ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_log10( labels = scales::comma_format(suffix = &quot; mins&quot;, accuracy = 1) , breaks = c(0.1,1,3,10,30,100,300,1000) ) + labs( y = &quot;filtering mode&quot;, x = &quot;point cloud processing mins.&quot; , subtitle = &quot;posterior distribution of conditional means with 95% HDI&quot; ) + theme_light() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 1)) let’s compare these results to the results from our one nominal predictor model above and two nominal predictor model without site effects above and two nominal predictor model with site effects above ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms4_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor: gamma&quot;) %&gt;% dplyr::bind_rows( ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms3_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;site+two nominal predictor: gauss&quot;) , ptime_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms2_mod # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;two nominal predictor&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_filtering_mode), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_x_continuous(breaks = scales::extended_breaks(10)) + scale_color_manual(values = viridis::turbo(n = 4, begin = 0.2, end = 0.8)[c(2:4)]) + labs( y = &quot;&quot;, x = &quot;point cloud processing mins.&quot; , color = &quot;model&quot; ) + theme_light() + theme( legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( color = guide_legend( nrow = 2, byrow = T , override.aes = list(shape = 15, size = 10, lwd = NA) ) ) Finally, we can quantify the variation in processing time by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms4_mod) %&gt;% dplyr::select(c(shape,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_light() and perform model selection via information criteria with the brms::loo_compare() function brms4_mod = brms::add_criterion(brms4_mod, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms1_mod, brms2_mod, brms3_mod, brms4_mod, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms4_mod 0.0 0.0 ## brms3_mod -210.3 17.0 ## brms2_mod -216.9 16.9 ## brms1_mod -233.3 18.7 # brms::model_weights(brms1_mod, brms2_mod, brms3_mod, brms4_mod) %&gt;% round(3) "],["field_valid.html", "Section 5 Field Validation 5.1 Setup 5.2 Data Load Functions 5.3 Validation Data Functions 5.4 Full pipeline function 5.5 Apply validation for all 5.6 Full Validation Summary Data 5.7 Example Validation Process 5.8 Mapped validation for all sites 5.9 Field Data Descriptive Statistics 5.10 Summary of Dependent Variables", " Section 5 Field Validation This section combines the SfM-derived tree locations with stem-mapped tree locations from field sampling. Tinkham and Swayze (2021; p.6) describe a methodology for matching UAS detected trees with stem mapped trees identified via traditional field survey methods. Note, detected trees in the excerpt below references UAS detected trees while survey trees references field-based stem mapped trees: Each of the detected tree outputs was matched with survey tree locations through an iterative process. Iteratively, a detected tree was selected, and all survey trees within a 3 m radius and 10% height of the detected tree were identified. If a survey tree met both the location and height precision requirements, it was considered a true positive (TP) detection, and both the survey and detected trees were removed from further matching. However, if no match was made, the detected tree was considered a commission (Co) and removed from further matching. This process was repeated until all detected trees were classified as true positive or commission, with all unmatched survey trees classified as omission (Om). Overall tree detection performance was described using the F-score metric. The F-score incorporates true positive, commission, and omission rates to determine how well the UAS detected trees represent the field-based stem mapped trees. As a measure of predictive performance, the highest possible value of an F-score is 1.0, indicating perfect precision and recall, and the lowest possible value is 0, if either precision or recall are zero. \\[ \\textrm{F-score} = 2 \\times \\frac{\\bigl(\\frac{TP}{TP+Om} \\times \\frac{TP}{TP+Co} \\bigr)}{\\bigl(\\frac{TP}{TP+Om} + \\frac{TP}{TP+Co} \\bigr)} \\] The process to match UAS detected trees to field stem mapped trees implemented here is slightly different than the process described above. To match the data parametrization from the UAS point cloud processing workflow, only stem-mapped trees above 2 m were considered for analysis. Each UAS detected tree was matched with stem-mapped tree locations that were within a 3 m radius and 2 m height of the UAS detected tree. The matched UAS and stem-mapped tree pairs were jointly compared (rather than iteratively) to select the pair that minimized the height difference for both the stem-mapped tree and the UAS detected tree to ensure that only one UAS detected tree was selected for each stem-mapped tree. If more than one UAS detected tree had the same height difference to a stem-mapped tree, the UAS detected tree spatially nearest to the stem-mapped tree was selected as the match. These UAS detected trees with a paired stem-mapped tree after this filtering process were considered true positive (\\(TP\\)) detections. To determine UAS detected tree commissions (i.e. UAS detected trees within the overstory plot for which there was no stem-mapped tree pair; \\(Co\\)) this analysis used the 2023-06 BHEF overstory field survey plot center and plot radius with a minimum DBH of 5 in (12.69 cm) as only trees above this size were sampled as part of the overstory survey. UAS detected trees within this radius with an estimated DBH over 5 in (12.69 cm) that did not have a matched stem-mapped tree pair were considered commissions (\\(Co\\)). The 2023-06 BHEF field surveys used \\(\\frac{1}{10}\\) acre (404.686 m2) plots with a 37.24 ft (11.35 m) radius for overstory sampling and \\(\\frac{1}{400}\\) acre (10.117 m2) plots with a 5.89 ft (1.795 m) radius for regeneration sampling. All unmatched stem-mapped survey trees were classified as omissions (\\(Om\\)). 5.1 Setup Pick a DBH to use for the validation. For this project, the UAS point cloud processing script utilized the random forest model to estimate missing DBH values using training values extracted from the point cloud using the TreeLS package. The script below adds two linear model estimates of DBH based on the training data: 1) a linear model with an intercept (dbh_cm ~ 1 + tree_height_m); and 2) a linear model with no intercept (dbh_cm ~ 0 + tree_height_m). The options for picking a DBH to use are: “rf” for random forest estimate “lin” for linear model with an intercept (dbh_cm ~ 1 + tree_height_m) estimate “lin_noint” for linear model with no intercept (dbh_cm ~ 0 + tree_height_m) estimate “regional” for regional estimate based on regional FIA data using the USFS TreeMap data # Pick a DBH to use for the validation my_dbh_estimate = &quot;lin&quot; Load field validation plot data and update the ptcld_processing_data created in this section by adding a processing_id which we’ll use to process the files for validation. # list of study sites with completed uas data study_site_list = ptcld_processing_data$study_site %&gt;% unique() %&gt;% toupper() # list of field validation data validation_data = list.files( &quot;../data/field_validation&quot; , pattern = &quot;\\\\.gpkg$&quot;, full.names = T ) %&gt;% normalizePath() %&gt;% dplyr::as_tibble() %&gt;% dplyr::rename(validation_file_full_path=1) %&gt;% dplyr::mutate( study_site = validation_file_full_path %&gt;% toupper() %&gt;% stringr::str_extract(pattern = paste(study_site_list, collapse = &quot;|&quot;)) ) %&gt;% dplyr::filter(study_site %in% study_site_list) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::filter(dplyr::row_number() == 1) %&gt;% dplyr::ungroup() # what about the field plot boundary? validation_plots = sf::st_read(&quot;../data/field_validation/Field_Data_Boundary.shp&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::mutate( study_site = site %&gt;% toupper() %&gt;% stringr::str_extract(pattern = paste(study_site_list, collapse = &quot;|&quot;)) ) %&gt;% dplyr::filter(study_site %in% study_site_list) %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::filter(dplyr::row_number() == 1) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate( area_ha = sf::st_area(.) %&gt;% as.numeric() %&gt;% `/`(10000) , area_acres = area_ha*2.471 ) ## Reading layer `Field_Data_Boundary&#39; from data source ## `C:\\Data\\usfs\\metashape_testing\\data\\field_validation\\Field_Data_Boundary.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 5 features and 4 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -157287.6 ymin: 4068511 xmax: 608828.5 ymax: 4892131 ## Projected CRS: WGS 84 / UTM zone 13N # where is the uas processed data? ptcld_processing_data = ptcld_processing_data %&gt;% dplyr::mutate( processed_data_dir = dirname(tracking_file_full_path) , processing_id = dplyr::row_number() ) where are these validation plots and what do they look like? # what? validation_plots %&gt;% dplyr::glimpse() ## Rows: 5 ## Columns: 8 ## $ id &lt;dbl&gt; NA, NA, NA, NA, NA ## $ site &lt;chr&gt; &quot;WA85_02&quot;, &quot;SQ09_02&quot;, &quot;N1&quot;, &quot;Kaibab_Low&quot;, &quot;Kaibab_High&quot; ## $ acres &lt;dbl&gt; 2.476617, 2.476617, 3.911949, 5.059504, 4.264751 ## $ hectares &lt;dbl&gt; 1.002679, 1.002679, 1.583785, 2.048382, 1.726620 ## $ geometry &lt;POLYGON [m]&gt; POLYGON ((608678.6 4892131,..., POLYGON ((608720.2 4889252,… ## $ study_site &lt;chr&gt; &quot;WA85_02&quot;, &quot;SQ09_02&quot;, &quot;N1&quot;, &quot;KAIBAB_LOW&quot;, &quot;KAIBAB_HIGH&quot; ## $ area_ha &lt;dbl&gt; 1.002168, 1.002168, 1.582522, 2.068603, 1.743671 ## $ area_acres &lt;dbl&gt; 2.476358, 2.476358, 3.910412, 5.111518, 4.308611 # where? mapview::mapviewOptions(basemaps = c(&quot;OpenStreetMap&quot;,&quot;Esri.WorldImagery&quot;)) validation_plots %&gt;% sf::st_buffer(2000) %&gt;% # because they are small mapview::mapview(col.regions = &quot;blue&quot;, layer.name = &quot;plot&quot;, alpha.regions = 0.7) create a function to calculate the basal area of a tree in m2 from DBH measured in cm calc_ba_m2_from_dbh_cm = function(dbh_cm){ return( pi * dbh_cm^2 / (4*10000) ) } 5.2 Data Load Functions field validation data # function to read field data once per site read_field_data &lt;- function(my_study_site) { d = sf::st_read( validation_data %&gt;% dplyr::filter(study_site == my_study_site) %&gt;% dplyr::pull(validation_file_full_path) ) %&gt;% dplyr::mutate( study_site = my_study_site ) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::rename( field_dbh_cm = dbh_cm , field_tree_height_m = ht_m ) %&gt;% sf::st_set_geometry(&quot;geometry&quot;) %&gt;% dplyr::filter( !is.na(field_dbh_cm) &amp; !is.na(field_tree_height_m) &amp; sf::st_is_valid(geometry) # only keep trees that are above height threshold used for uas processing &amp; field_tree_height_m &gt;= min(ptcld_processing_data$sttng_minimum_tree_height_m) # &amp; field_dbh_cm &gt;= min_tree_dbh_cm # if know min field dbh for field sampling ) # keep only trees within sampling plot d %&gt;% sf::st_intersection( validation_plots %&gt;% dplyr::filter(study_site == my_study_site) %&gt;% dplyr::mutate(intersected_with_plot_geom = T) %&gt;% dplyr::select(intersected_with_plot_geom) %&gt;% sf::st_transform(sf::st_crs(d)) ) %&gt;% dplyr::mutate( field_tree_id = dplyr::row_number() , tree_utm_x = sf::st_coordinates(geometry)[,1] #lon , tree_utm_y = sf::st_coordinates(geometry)[,2] #lat # basal area , basal_area_m2 = calc_ba_m2_from_dbh_cm(field_dbh_cm) ) %&gt;% dplyr::relocate(field_tree_id) } 5.2.1 Summary of field validation plot data table_temp = validation_plots %&gt;% dplyr::pull(study_site) %&gt;% purrr::map(function(x){ read_field_data(x) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site,field_dbh_cm,field_tree_height_m,basal_area_m2) }) %&gt;% dplyr::bind_rows() %&gt;% dplyr::group_by(study_site) %&gt;% dplyr::summarise( dplyr::across( tidyselect::starts_with(&quot;field_&quot;) , .fns = list(mean = mean, sd = sd) ) , n_trees = dplyr::n() , basal_area_m2 = sum(basal_area_m2) ) %&gt;% # add area dplyr::inner_join( validation_plots %&gt;% dplyr::select(study_site, area_ha) %&gt;% sf::st_drop_geometry() , by = &quot;study_site&quot; ) %&gt;% dplyr::mutate( ht = paste0( field_tree_height_m_mean %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;&lt;br&gt;(&quot; , field_tree_height_m_sd %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;)&quot; ) , dbh = paste0( field_dbh_cm_mean %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;&lt;br&gt;(&quot; , field_dbh_cm_sd %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) , &quot;)&quot; ) , trees_ha = n_trees/area_ha , basal_area_m2_per_ha = basal_area_m2/area_ha , area_ha = area_ha %&gt;% round(1) %&gt;% scales::comma(accuracy = 0.1) ) %&gt;% dplyr::select( study_site, area_ha, trees_ha, basal_area_m2_per_ha, ht, dbh ) table_temp %&gt;% kableExtra::kbl( escape = F , digits = 1 , col.names = c( &quot;&quot; , &quot;Hectares&quot; , &quot;Trees&lt;br&gt;ha&lt;sup&gt;-1&lt;/sup&gt;&quot; , &quot;Basal Area&lt;br&gt;m&lt;sup&gt;2&lt;/sup&gt; ha&lt;sup&gt;-1&lt;/sup&gt;&quot; , &quot;Height (m)&quot;, &quot;DBH (cm)&quot; ) ) %&gt;% kableExtra::kable_styling() Hectares Treesha-1 Basal Aream2 ha-1 Height (m) DBH (cm) KAIBAB_HIGH 1.7 574.1 39.6 12.8(7.2) 24.0(17.4) KAIBAB_LOW 2.1 246.5 22.5 12.5(8.6) 27.3(20.5) N1 1.6 639.5 24.8 8.5(7.3) 15.4(16.0) SQ09_02 1.0 308.3 11.2 11.1(4.8) 19.7(8.8) WA85_02 1.0 171.6 14.9 15.7(6.0) 30.7(12.8) 5.2.2 Load UAS data function # function finds uas tree list # reads it # estimates linear model if not already used for DBH read_uas_data = function(my_processing_id, my_crs = NULL, use_this_dbh = my_dbh_estimate) { # where is this file? fnm = ptcld_processing_data %&gt;% dplyr::filter( processing_id == my_processing_id ) %&gt;% dplyr::mutate( fnm = paste0( processed_data_dir , &quot;/&quot; , file_name , &quot;_final_detected_tree_tops.gpkg&quot; ) ) %&gt;% dplyr::pull(fnm) if(file.exists(fnm)){ # read it dta = sf::st_read(fnm) %&gt;% dplyr::mutate( processing_id = my_processing_id ) %&gt;% dplyr::rename_with(tolower) %&gt;% sf::st_set_geometry(&quot;geometry&quot;) # transform if(is.null(my_crs)){ tcrs = sf::st_crs(dta) }else{tcrs = my_crs} dta = dta %&gt;% sf::st_transform(tcrs) ################# # estimate linear model if not already used for DBH ################# if( # is there sufficient training data? dta %&gt;% dplyr::filter(is_training_data == T) %&gt;% nrow() &gt; 10 &amp; # was rf model used? ptcld_processing_data %&gt;% dplyr::filter(processing_id == my_processing_id) %&gt;% dplyr::pull(sttng_local_dbh_model) %&gt;% tolower() == &quot;rf&quot; ){ # Gamma distribution for strictly positive response variable dbh # !!!! fit with intercept stem_prediction_model = brms::brm( formula = dbh_cm ~ 1 + tree_height_m , data = dta %&gt;% dplyr::filter(is_training_data==T) %&gt;% dplyr::select(dbh_cm, tree_height_m) , family = brms::brmsfamily(&quot;Gamma&quot;, link = &quot;log&quot;) , prior = c(prior(gamma(0.01, 0.01), class = shape)) , iter = 4000, warmup = 2000, chains = 4 , cores = lasR::half_cores() , file = ptcld_processing_data %&gt;% dplyr::filter(processing_id == my_processing_id) %&gt;% dplyr::mutate( fff = paste0( processed_data_dir , &quot;/&quot; , file_name , &quot;_local_dbh_height_model&quot; ) ) %&gt;% dplyr::pull(fff) # , file_refit = &quot;on_change&quot; ) # Gamma distribution for strictly positive response variable dbh # !!!! fit with NO intercept stem_prediction_noint_model = brms::brm( formula = dbh_cm ~ 0 + tree_height_m , data = dta %&gt;% dplyr::filter(is_training_data==T) %&gt;% dplyr::select(dbh_cm, tree_height_m) , family = brms::brmsfamily(&quot;Gamma&quot;, link = &quot;log&quot;) , prior = c(prior(gamma(0.01, 0.01), class = shape)) , iter = 4000, warmup = 2000, chains = 4 , cores = lasR::half_cores() , file = ptcld_processing_data %&gt;% dplyr::filter(processing_id == my_processing_id) %&gt;% dplyr::mutate( fff = paste0( processed_data_dir , &quot;/&quot; , file_name , &quot;_local_dbh_height_noint_model&quot; ) ) %&gt;% dplyr::pull(fff) # , file_refit = &quot;on_change&quot; ) ################# # prediction data ################# pred_temp = predict(stem_prediction_model, dta) %&gt;% dplyr::as_tibble() %&gt;% dplyr::pull(1) pred_noint_temp = predict(stem_prediction_noint_model, dta) %&gt;% dplyr::as_tibble() %&gt;% dplyr::pull(1) # add to data dta = dta %&gt;% dplyr::mutate( rf_dbh_cm = dbh_cm , pred_dbh_cm = pred_temp , pred_noint_dbh_cm = pred_noint_temp , lin_dbh_cm = ifelse(is_training_data==T, dbh_cm, pred_dbh_cm) , lin_noint_dbh_cm = ifelse(is_training_data==T, dbh_cm, pred_noint_dbh_cm) ) %&gt;% dplyr::select(-c(pred_dbh_cm,pred_noint_dbh_cm)) }else if(# is there sufficient training data? dta %&gt;% dplyr::filter(is_training_data == T) %&gt;% nrow() &lt;= 10 ){ # the regional model was used which would result in the same est for rf and lin dta = dta %&gt;% dplyr::mutate( rf_dbh_cm = dbh_cm , lin_dbh_cm = dbh_cm , lin_noint_dbh_cm = dbh_cm ) }else{ # linear model was already used and no rf pred # could update this to estimate rf model if missing...#nextyear dta = dta %&gt;% dplyr::mutate( rf_dbh_cm = as.numeric(NA) , lin_dbh_cm = dbh_cm , lin_noint_dbh_cm = as.numeric(NA) ) } # return with dbh updated return( dta %&gt;% dplyr::mutate( dbh_cm = dplyr::case_when( # update dbh to selected tolower(use_this_dbh) == &quot;rf&quot; &amp; !is.na(rf_dbh_cm) ~ rf_dbh_cm , tolower(use_this_dbh) == &quot;lin&quot; &amp; !is.na(lin_dbh_cm) ~ lin_dbh_cm , tolower(use_this_dbh) == &quot;lin_noint&quot; &amp; !is.na(lin_noint_dbh_cm) ~ lin_noint_dbh_cm , tolower(use_this_dbh) == &quot;regional&quot; &amp; !is.na(reg_est_dbh_cm) ~ reg_est_dbh_cm , T ~ reg_est_dbh_cm )) %&gt;% dplyr::mutate( basal_area_m2 = calc_ba_m2_from_dbh_cm(dbh_cm) , basal_area_ft2 = basal_area_m2 * 10.764 ) ) }else{stop(&quot;could not find file: &quot;, fnm)} } 5.3 Validation Data Functions 5.3.1 True Positive Identification The UAS detected and stem-mapped tree pairs identified in this filtering process (detailed above) were considered true positive (\\(TP\\)) detections. ## BUFFER THE UAS TREES AND SPATIALLY MATCH FIELD TREES BASED ON THAT BUFFER true_positive_trees_fn = function(uas_data, field_data, max_dist_m = 3, max_height_error_m = 2){ ## get FIELD trees within radius OF UAS TREES potential_tree_pairs_temp = uas_data %&gt;% dplyr::select(treeid, tree_height_m) %&gt;% # buffer point sf::st_buffer(max_dist_m) %&gt;% # spatial join with all FIELD tree points sf::st_join( field_data %&gt;% dplyr::select( field_tree_id, field_tree_height_m , tree_utm_x, tree_utm_y ) , join = sf::st_intersects , left = F # performs inner join to only keep uas trees with a match ) %&gt;% # calculate height difference dplyr::mutate( height_diff_m = abs(tree_height_m-field_tree_height_m) , height_diff_pct = height_diff_m/field_tree_height_m ) %&gt;% # removes tree pairs that are outside of the allowable error # dplyr::filter(height_diff_pct &lt;= max_height_error_pct) %&gt;% dplyr::filter(height_diff_m &lt;= max_height_error_m) %&gt;% dplyr::select(-c(height_diff_m)) %&gt;% dplyr::relocate(treeid, field_tree_id) ## apply pair selection criteria if there are potential tree pairs if(nrow(potential_tree_pairs_temp)&gt;0){ ## calculate row by row distances and height differences potential_tree_pairs_temp = potential_tree_pairs_temp %&gt;% # this is the position of the uas tree sf::st_centroid() %&gt;% sf::st_set_geometry(&quot;geom1&quot;) %&gt;% dplyr::bind_cols( potential_tree_pairs_temp %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(&quot;tree_utm_x&quot;, &quot;tree_utm_y&quot;) %&gt;% # this is the position of the field tree sf::st_as_sf( coords = c(&quot;tree_utm_x&quot;, &quot;tree_utm_y&quot;), crs = sf::st_crs(uas_data) ) %&gt;% sf::st_set_geometry(&quot;geom2&quot;) ) %&gt;% dplyr::mutate( distance_m = sf::st_distance(geom1, geom2, by_element = T) %&gt;% as.numeric() ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(-c(tree_utm_x, tree_utm_y, geom2)) ## define function to select the best tree pair select_best_tree_pair_fn &lt;- function(df) { df %&gt;% dplyr::group_by(field_tree_id) %&gt;% dplyr::arrange(field_tree_id, height_diff_pct, distance_m, desc(tree_height_m), treeid) %&gt;% dplyr::mutate( # at the field tree level...the number of uas trees n_uas_trees = dplyr::n() # at the field tree level... # the closest uas tree in height tie breaker distance, uas_tree_height_m, id , rank_within_field_tree = dplyr::row_number() ) %&gt;% dplyr::group_by(treeid) %&gt;% dplyr::arrange(treeid, height_diff_pct, distance_m, desc(field_tree_height_m), field_tree_id) %&gt;% dplyr::mutate( # at the uas tree level...the number of field trees n_field_trees = dplyr::n() # at the field tree level... # the closest field tree in height tie breaker distance, uas_tree_height_m, id , rank_within_uas_tree = dplyr::row_number() ) %&gt;% dplyr::ungroup() %&gt;% # select the uas-field tree pair with the minimum height difference dplyr::filter( rank_within_field_tree == 1 &amp; rank_within_uas_tree == 1 ) %&gt;% # remove columns dplyr::select( -c(tidyselect::starts_with(&quot;rank_&quot;), tidyselect::starts_with(&quot;n_&quot;)) ) } ## first filter for tree pairs true_positive_trees = select_best_tree_pair_fn(potential_tree_pairs_temp) ##remove matches from potential tree pairs potential_tree_pairs_temp = potential_tree_pairs_temp %&gt;% dplyr::filter( !(treeid %in% true_positive_trees$treeid) &amp; !(field_tree_id %in% true_positive_trees$field_tree_id) ) ## keep filtering for best pair until no unique pairs remain while(nrow(potential_tree_pairs_temp)&gt;0) { # keep filtering for best pair until no unique pairs remain true_positive_trees = true_positive_trees %&gt;% dplyr::bind_rows( select_best_tree_pair_fn(potential_tree_pairs_temp) ) #remove matches from potential tree pairs potential_tree_pairs_temp = potential_tree_pairs_temp %&gt;% dplyr::filter( !(treeid %in% true_positive_trees$treeid) &amp; !(field_tree_id %in% true_positive_trees$field_tree_id) ) } ## rename columns and flag true_positive_trees = true_positive_trees %&gt;% dplyr::rename( uas_tree_height_m = tree_height_m , uas_tree_id = treeid , field_uas_distance_m = distance_m ) %&gt;% dplyr::mutate( field_uas_group = &quot;true positive&quot; ) }else{ # if there are spatially matched trees true_positive_trees = dplyr::tibble( uas_tree_id = as.character(NA) , field_tree_id = as.character(NA) , uas_tree_height_m = as.numeric(NA) , field_tree_height_m = as.numeric(NA) , height_diff_pct = as.numeric(NA) , field_uas_distance_m = as.numeric(NA) , field_uas_group = as.character(NA) ) } # return return(true_positive_trees) } 5.3.2 Combine with Commission and Omission To determine UAS detected tree commissions (i.e. UAS detected trees within the overstory plot for which there was no stem-mapped tree pair; \\(Co\\)) this analysis used the 2023-06 BHEF overstory field survey plot center and plot radius of 11.35 m. UAS detected trees within this radius with an estimated DBH over 5 in (12.69 cm) that did not have a matched stem-mapped tree pair were considered commissions (\\(Co\\)). Omissions (\\(Om\\)) are stem-mapped trees without a UAS detected tree match. field_uas_comparison_fn = function(uas_data, field_data, true_positive_trees, plot_data, overstory_ht_m = 7){ field_uas_comparison = dplyr::bind_rows( ## true positive true_positive_trees %&gt;% dplyr::mutate(field_tree_id = as.numeric(field_tree_id)) ## omission , field_data %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select( field_tree_id, field_tree_height_m ) %&gt;% dplyr::anti_join( true_positive_trees %&gt;% dplyr::mutate(field_tree_id = as.numeric(field_tree_id)) , by = dplyr::join_by(field_tree_id) ) %&gt;% dplyr::mutate( field_uas_group = &quot;omission&quot; ) ## commission , plot_data %&gt;% sf::st_transform(sf::st_crs(uas_data)) %&gt;% dplyr::select(study_site) %&gt;% # join with uas tree points sf::st_join( uas_data %&gt;% dplyr::filter( !treeid %in% true_positive_trees$uas_tree_id ) %&gt;% dplyr::select(treeid) %&gt;% dplyr::rename(uas_tree_id=treeid) , join = sf::st_intersects , left = F # performs inner join to only keep uas trees and plots with a match ) %&gt;% dplyr::select(-c(study_site)) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate( field_uas_group = &quot;commission&quot; ) ) %&gt;% dplyr::filter(!is.na(field_uas_group) &amp; field_uas_group!=&quot;&quot;) %&gt;% # attach uas data dplyr::left_join( uas_data %&gt;% sf::st_set_geometry(&quot;geometry&quot;) %&gt;% dplyr::mutate( uas_tree_utm_x = sf::st_coordinates(geometry)[,1] #lon , uas_tree_utm_y = sf::st_coordinates(geometry)[,2] #lat ) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(treeid, tree_height_m, dbh_cm, basal_area_m2, uas_tree_utm_x, uas_tree_utm_y) %&gt;% dplyr::rename( uas_tree_id = treeid , uas_tree_height_m = tree_height_m , uas_dbh_cm = dbh_cm , uas_basal_area_m2 = basal_area_m2 ) , by = dplyr::join_by(uas_tree_id) ) %&gt;% # attach field data dplyr::left_join( field_data %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select( field_tree_id, field_tree_height_m, field_dbh_cm, basal_area_m2 , tree_utm_x, tree_utm_y ) %&gt;% dplyr::rename( field_basal_area_m2 = basal_area_m2 , field_tree_utm_x = tree_utm_x , field_tree_utm_y = tree_utm_y ) , by = dplyr::join_by(field_tree_id) ) %&gt;% # update data dplyr::mutate( uas_tree_height_m = uas_tree_height_m.y , field_tree_height_m = field_tree_height_m.y , field_uas_group = factor( field_uas_group , ordered = T , levels = c( &quot;true positive&quot; , &quot;commission&quot; , &quot;omission&quot; ) ) %&gt;% forcats::fct_rev() , dbh_diff_cm = uas_dbh_cm - field_dbh_cm , tree_height_diff_m = uas_tree_height_m - field_tree_height_m , dbh_diff_pct = dbh_diff_cm/field_dbh_cm , height_diff_pct = tree_height_diff_m/field_tree_height_m , abs_dbh_diff_pct = abs(dbh_diff_pct) , abs_height_diff_pct = abs(height_diff_pct) # determine overstory/understory , overstory_understory_grp = dplyr::case_when( dplyr::coalesce(field_tree_height_m, uas_tree_height_m) &gt;= overstory_ht_m ~ &quot;overstory&quot; , dplyr::coalesce(field_tree_height_m, uas_tree_height_m) &lt; overstory_ht_m ~ &quot;understory&quot; , T ~ &quot;error&quot; ) %&gt;% factor() # attach identifying data , study_site = uas_data$study_site[1] , file_name = uas_data$file_name[1] , software = uas_data$software[1] , overstory_ht_m = overstory_ht_m ) %&gt;% dplyr::relocate(field_uas_group) %&gt;% dplyr::select(-c(tidyselect::ends_with(&quot;.x&quot;), tidyselect::ends_with(&quot;.y&quot;))) # # convert to imperial units # calc_imperial_units_fn() # return return(field_uas_comparison) } 5.3.3 Full validation function function to write comparison data and return aggregate metrics when passed a ptcld_processing_data$processing_id function returns: write full validation tree list to disk update ptcld_processing_data with metrics for testing: f-score height comparison metrics (mae, mape, smape, mse, rmse) dbh comparison metrics (mae, mape, smape, mse, rmse) path to full validation tree list written to disk ##################################################### # function to map over each file for a particular study site ##################################################### # function for a file name identified by processing_id in ptcld_processing_data validate_file_fn = function(p_id, fld_dta, plt_dta){ # tree list file name tl_fnm = paste0( ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(processed_data_dir) , &quot;/&quot; , ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(file_name) , &quot;_field_uas_comparison_data.csv&quot; ) # brms model brms_fnm = paste0( ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(processed_data_dir) , &quot;/&quot; , ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(file_name) , &quot;_local_dbh_height_model.rds&quot; ) # brms model noint brms_noint_fnm = paste0( ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(processed_data_dir) , &quot;/&quot; , ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::pull(file_name) , &quot;_local_dbh_height_noint_model.rds&quot; ) # check it if(file.exists(tl_fnm) &amp; file.exists(brms_fnm) &amp; file.exists(brms_noint_fnm)){ # read it field_uas_comparison = readr::read_csv(tl_fnm) }else{ # uas_data u_dta = read_uas_data( my_processing_id = p_id , my_crs = sf::st_crs(fld_dta) ) # true positives tp_trees = true_positive_trees_fn(uas_data = u_dta, field_data = fld_dta) # field uas comparison field_uas_comparison = field_uas_comparison_fn( uas_data = u_dta , field_data = fld_dta , true_positive_trees = tp_trees , plot_data = plt_dta ) %&gt;% # attach id information dplyr::bind_cols( ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% dplyr::select( processing_id, study_site, file_name, software , depth_maps_generation_quality , depth_maps_generation_filtering_mode , processing_attribute3 , processed_data_dir ) ) # write it write.csv( field_uas_comparison , tl_fnm , row.names = F ) } ############################################ # aggregate field_uas_comparison for return ############################################ # get plot area from plot data plot_area_ha = plt_dta$area_ha[1] # this is the return data which has lots of columns return_dta = ptcld_processing_data %&gt;% dplyr::filter(processing_id == p_id) %&gt;% ############################################ # overall statistics ############################################ # attach f score dplyr::bind_cols( # blank data in case missing dplyr::tibble(field_uas_group = c(&quot;tp&quot;, &quot;co&quot;, &quot;om&quot;)) %&gt;% dplyr::left_join( field_uas_comparison %&gt;% dplyr::count(field_uas_group) %&gt;% dplyr::mutate(field_uas_group = dplyr::case_when( field_uas_group == &quot;true positive&quot; ~ &quot;tp&quot; , field_uas_group == &quot;commission&quot; ~ &quot;co&quot; , field_uas_group == &quot;omission&quot; ~ &quot;om&quot; )) , by = dplyr::join_by(field_uas_group) ) %&gt;% dplyr::mutate(n = ifelse(is.na(n),0,n)) %&gt;% tidyr::pivot_wider( names_from = field_uas_group , values_from = n , values_fill = 0 ) %&gt;% dplyr::mutate( f_score = dplyr::coalesce( 2 * ( (tp/(tp+om)) * (tp/(tp+co)) ) / ( (tp/(tp+om)) + (tp/(tp+co)) ) , 0 ) ) %&gt;% dplyr::rename( true_positive_n_trees = tp , commission_n_trees = co , omission_n_trees = om ) %&gt;% dplyr::ungroup() ) %&gt;% # attach summary error metrics dplyr::bind_cols( field_uas_comparison %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% dplyr::ungroup() %&gt;% # thx Metrics pkg!! dplyr::summarise( # tree_height_m tree_height_m_me = mean(uas_tree_height_m-field_tree_height_m, na.rm = T) , tree_height_m_mpe = mean((uas_tree_height_m-field_tree_height_m)/field_tree_height_m, na.rm = T) , tree_height_m_mae = Metrics::mae(field_tree_height_m, uas_tree_height_m) , tree_height_m_mape = Metrics::mape(field_tree_height_m, uas_tree_height_m) , tree_height_m_smape = Metrics::smape(field_tree_height_m, uas_tree_height_m) , tree_height_m_mse = Metrics::mse(field_tree_height_m, uas_tree_height_m) , tree_height_m_rmse = Metrics::rmse(field_tree_height_m, uas_tree_height_m) # dbh_cm , dbh_cm_me = mean(uas_dbh_cm-field_dbh_cm, na.rm = T) , dbh_cm_mpe = mean((uas_dbh_cm-field_dbh_cm)/field_dbh_cm, na.rm = T) , dbh_cm_mae = Metrics::mae(field_dbh_cm, uas_dbh_cm) , dbh_cm_mape = Metrics::mape(field_dbh_cm, uas_dbh_cm) , dbh_cm_smape = Metrics::smape(field_dbh_cm, uas_dbh_cm) , dbh_cm_mse = Metrics::mse(field_dbh_cm, uas_dbh_cm) , dbh_cm_rmse = Metrics::rmse(field_dbh_cm, uas_dbh_cm) ) ) %&gt;% # attach basal area dplyr::bind_cols( field_uas_comparison %&gt;% dplyr::ungroup() %&gt;% dplyr::summarise( uas_basal_area_m2 = sum(uas_basal_area_m2, na.rm = T) , field_basal_area_m2 = sum(field_basal_area_m2, na.rm = T) ) %&gt;% # ba/ha and error dplyr::mutate( uas_basal_area_m2_per_ha = uas_basal_area_m2/plot_area_ha , field_basal_area_m2_per_ha = field_basal_area_m2/plot_area_ha # error , basal_area_m2_error = uas_basal_area_m2-field_basal_area_m2 , basal_area_m2_per_ha_error = uas_basal_area_m2_per_ha-field_basal_area_m2_per_ha , basal_area_pct_error = (uas_basal_area_m2-field_basal_area_m2)/field_basal_area_m2 , basal_area_abs_pct_error = abs(basal_area_pct_error) ) ) %&gt;% ############################################ # overstory/understory statistics ############################################ # attach f score dplyr::bind_cols( # blank data in case missing tidyr::crossing( field_uas_group = c(&quot;tp&quot;, &quot;co&quot;, &quot;om&quot;) , overstory_understory_grp = c(&quot;overstory&quot;, &quot;understory&quot;) ) %&gt;% dplyr::left_join( field_uas_comparison %&gt;% dplyr::count(field_uas_group, overstory_understory_grp) %&gt;% dplyr::mutate(field_uas_group = dplyr::case_when( field_uas_group == &quot;true positive&quot; ~ &quot;tp&quot; , field_uas_group == &quot;commission&quot; ~ &quot;co&quot; , field_uas_group == &quot;omission&quot; ~ &quot;om&quot; )) , by = dplyr::join_by(field_uas_group, overstory_understory_grp) ) %&gt;% dplyr::mutate(n = ifelse(is.na(n),0,n)) %&gt;% tidyr::pivot_wider( names_from = field_uas_group , values_from = n , values_fill = 0 ) %&gt;% dplyr::mutate( f_score = dplyr::coalesce( 2 * ( (tp/(tp+om)) * (tp/(tp+co)) ) / ( (tp/(tp+om)) + (tp/(tp+co)) ) , 0 ) ) %&gt;% dplyr::rename( true_positive_n_trees = tp , commission_n_trees = co , omission_n_trees = om ) %&gt;% dplyr::ungroup() %&gt;% tidyr::pivot_wider( names_from = overstory_understory_grp , values_from = -c(overstory_understory_grp) , values_fill = 0 , names_glue = &quot;{overstory_understory_grp}_{.value}&quot; ) ) %&gt;% # attach summary error metrics dplyr::bind_cols( tidyr::crossing( field_uas_group = c(&quot;true positive&quot;) , overstory_understory_grp = c(&quot;overstory&quot;,&quot;understory&quot;) ) %&gt;% dplyr::left_join( field_uas_comparison %&gt;% dplyr::mutate(overstory_understory_grp=as.character(overstory_understory_grp)) , by = dplyr::join_by(&quot;field_uas_group&quot;, &quot;overstory_understory_grp&quot;) ) %&gt;% dplyr::group_by(overstory_understory_grp) %&gt;% # thx Metrics pkg!! dplyr::summarise( # tree_height_m tree_height_m_me = mean(uas_tree_height_m-field_tree_height_m, na.rm = T) , tree_height_m_mpe = mean((uas_tree_height_m-field_tree_height_m)/field_tree_height_m, na.rm = T) , tree_height_m_mae = Metrics::mae(field_tree_height_m, uas_tree_height_m) , tree_height_m_mape = Metrics::mape(field_tree_height_m, uas_tree_height_m) , tree_height_m_smape = Metrics::smape(field_tree_height_m, uas_tree_height_m) , tree_height_m_mse = Metrics::mse(field_tree_height_m, uas_tree_height_m) , tree_height_m_rmse = Metrics::rmse(field_tree_height_m, uas_tree_height_m) # dbh_cm , dbh_cm_me = mean(uas_dbh_cm-field_dbh_cm, na.rm = T) , dbh_cm_mpe = mean((uas_dbh_cm-field_dbh_cm)/field_dbh_cm, na.rm = T) , dbh_cm_mae = Metrics::mae(field_dbh_cm, uas_dbh_cm) , dbh_cm_mape = Metrics::mape(field_dbh_cm, uas_dbh_cm) , dbh_cm_smape = Metrics::smape(field_dbh_cm, uas_dbh_cm) , dbh_cm_mse = Metrics::mse(field_dbh_cm, uas_dbh_cm) , dbh_cm_rmse = Metrics::rmse(field_dbh_cm, uas_dbh_cm) ) %&gt;% dplyr::ungroup() %&gt;% tidyr::pivot_wider( names_from = overstory_understory_grp , values_from = -c(overstory_understory_grp) , values_fill = 0 , names_glue = &quot;{overstory_understory_grp}_{.value}&quot; ) ) %&gt;% # attach basal area dplyr::bind_cols( dplyr::tibble( overstory_understory_grp = c(&quot;overstory&quot;,&quot;understory&quot;) ) %&gt;% dplyr::left_join( field_uas_comparison %&gt;% dplyr::group_by(overstory_understory_grp) %&gt;% dplyr::summarise( uas_basal_area_m2 = sum(uas_basal_area_m2, na.rm = T) , field_basal_area_m2 = sum(field_basal_area_m2, na.rm = T) ) %&gt;% dplyr::ungroup() %&gt;% # ba/ha and error dplyr::mutate( uas_basal_area_m2_per_ha = uas_basal_area_m2/plot_area_ha , field_basal_area_m2_per_ha = field_basal_area_m2/plot_area_ha # error , basal_area_m2_per_ha_error = uas_basal_area_m2_per_ha-field_basal_area_m2_per_ha , basal_area_pct_error = (uas_basal_area_m2_per_ha-field_basal_area_m2_per_ha)/field_basal_area_m2_per_ha , basal_area_abs_pct_error = abs(basal_area_pct_error) ) , by = dplyr::join_by(&quot;overstory_understory_grp&quot;) ) %&gt;% tidyr::pivot_wider( names_from = overstory_understory_grp , values_from = -c(overstory_understory_grp) , values_fill = 0 , names_glue = &quot;{overstory_understory_grp}_{.value}&quot; ) ) %&gt;% # where is the tree list ? dplyr::mutate( validation_file_full_path = tl_fnm # what is this overstory/understory? , overstory_ht_m = field_uas_comparison$overstory_ht_m[1] ) # return return(return_dta) } check validation function validation_temp = validate_file_fn( p_id = ptcld_processing_data %&gt;% dplyr::filter(study_site == study_site_list[1]) %&gt;% dplyr::pull(processing_id) %&gt;% .[1] , fld_dta = read_field_data(study_site_list[1]) , plt_dta = validation_plots %&gt;% dplyr::filter(study_site == study_site_list[1]) ) # what? validation_temp %&gt;% dplyr::glimpse() ## Rows: 1 ## Columns: 114 ## $ tracking_file_full_path &lt;chr&gt; &quot;D:\\\\SfM_Software_Comparison\\\\Me… ## $ software &lt;chr&gt; &quot;METASHAPE&quot; ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot; ## $ processing_attribute1 &lt;chr&gt; &quot;HIGH&quot; ## $ processing_attribute2 &lt;chr&gt; &quot;AGGRESSIVE&quot; ## $ processing_attribute3 &lt;chr&gt; NA ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot; ## $ number_of_points &lt;int&gt; 52974294 ## $ las_area_m2 &lt;dbl&gt; 86661.27 ## $ timer_tile_time_mins &lt;dbl&gt; 0.636007 ## $ timer_class_dtm_norm_chm_time_mins &lt;dbl&gt; 3.655956 ## $ timer_treels_time_mins &lt;dbl&gt; 8.906527 ## $ timer_itd_time_mins &lt;dbl&gt; 0.02202115 ## $ timer_competition_time_mins &lt;dbl&gt; 0.1059074 ## $ timer_estdbh_time_mins &lt;dbl&gt; 0.02290262 ## $ timer_silv_time_mins &lt;dbl&gt; 0.01256553 ## $ timer_total_time_mins &lt;dbl&gt; 13.36189 ## $ sttng_input_las_dir &lt;chr&gt; &quot;D:/Metashape_Testing_2024&quot; ## $ sttng_use_parallel_processing &lt;lgl&gt; FALSE ## $ sttng_desired_chm_res &lt;dbl&gt; 0.25 ## $ sttng_max_height_threshold_m &lt;int&gt; 60 ## $ sttng_minimum_tree_height_m &lt;int&gt; 2 ## $ sttng_dbh_max_size_m &lt;int&gt; 2 ## $ sttng_local_dbh_model &lt;chr&gt; &quot;rf&quot; ## $ sttng_user_supplied_epsg &lt;lgl&gt; NA ## $ sttng_accuracy_level &lt;int&gt; 2 ## $ sttng_pts_m2_for_triangulation &lt;int&gt; 20 ## $ sttng_normalization_with &lt;chr&gt; &quot;triangulation&quot; ## $ sttng_competition_buffer_m &lt;int&gt; 5 ## $ depth_maps_generation_quality &lt;ord&gt; high ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive ## $ total_sfm_time_min &lt;dbl&gt; 54.8 ## $ number_of_points_sfm &lt;dbl&gt; 52974294 ## $ total_sfm_time_norm &lt;dbl&gt; 0.1117824 ## $ processed_data_dir &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ processing_id &lt;int&gt; 1 ## $ true_positive_n_trees &lt;int&gt; 229 ## $ commission_n_trees &lt;int&gt; 173 ## $ omission_n_trees &lt;int&gt; 772 ## $ f_score &lt;dbl&gt; 0.3264433 ## $ tree_height_m_me &lt;dbl&gt; 0.2703367 ## $ tree_height_m_mpe &lt;dbl&gt; 0.002357383 ## $ tree_height_m_mae &lt;dbl&gt; 0.787361 ## $ tree_height_m_mape &lt;dbl&gt; 0.06624939 ## $ tree_height_m_smape &lt;dbl&gt; 0.06776453 ## $ tree_height_m_mse &lt;dbl&gt; 0.9842433 ## $ tree_height_m_rmse &lt;dbl&gt; 0.9920904 ## $ dbh_cm_me &lt;dbl&gt; 9.143272 ## $ dbh_cm_mpe &lt;dbl&gt; 0.8634605 ## $ dbh_cm_mae &lt;dbl&gt; 11.55026 ## $ dbh_cm_mape &lt;dbl&gt; 0.9048948 ## $ dbh_cm_smape &lt;dbl&gt; 0.4584621 ## $ dbh_cm_mse &lt;dbl&gt; 168.3442 ## $ dbh_cm_rmse &lt;dbl&gt; 12.97475 ## $ uas_basal_area_m2 &lt;dbl&gt; 59.81562 ## $ field_basal_area_m2 &lt;dbl&gt; 69.04409 ## $ uas_basal_area_m2_per_ha &lt;dbl&gt; 34.30442 ## $ field_basal_area_m2_per_ha &lt;dbl&gt; 39.59697 ## $ basal_area_m2_error &lt;dbl&gt; -9.228474 ## $ basal_area_m2_per_ha_error &lt;dbl&gt; -5.292554 ## $ basal_area_pct_error &lt;dbl&gt; -0.1336606 ## $ basal_area_abs_pct_error &lt;dbl&gt; 0.1336606 ## $ overstory_commission_n_trees &lt;int&gt; 141 ## $ understory_commission_n_trees &lt;int&gt; 32 ## $ overstory_omission_n_trees &lt;int&gt; 558 ## $ understory_omission_n_trees &lt;int&gt; 214 ## $ overstory_true_positive_n_trees &lt;int&gt; 185 ## $ understory_true_positive_n_trees &lt;int&gt; 44 ## $ overstory_f_score &lt;dbl&gt; 0.3461179 ## $ understory_f_score &lt;dbl&gt; 0.2634731 ## $ overstory_tree_height_m_me &lt;dbl&gt; 0.4169317 ## $ understory_tree_height_m_me &lt;dbl&gt; -0.3460289 ## $ overstory_tree_height_m_mpe &lt;dbl&gt; 0.02079067 ## $ understory_tree_height_m_mpe &lt;dbl&gt; -0.07514623 ## $ overstory_tree_height_m_mae &lt;dbl&gt; 0.8201433 ## $ understory_tree_height_m_mae &lt;dbl&gt; 0.6495266 ## $ overstory_tree_height_m_mape &lt;dbl&gt; 0.04662933 ## $ understory_tree_height_m_mape &lt;dbl&gt; 0.1487428 ## $ overstory_tree_height_m_smape &lt;dbl&gt; 0.04589942 ## $ understory_tree_height_m_smape &lt;dbl&gt; 0.1596974 ## $ overstory_tree_height_m_mse &lt;dbl&gt; 1.062376 ## $ understory_tree_height_m_mse &lt;dbl&gt; 0.65573 ## $ overstory_tree_height_m_rmse &lt;dbl&gt; 1.030716 ## $ understory_tree_height_m_rmse &lt;dbl&gt; 0.8097715 ## $ overstory_dbh_cm_me &lt;dbl&gt; 7.123961 ## $ understory_dbh_cm_me &lt;dbl&gt; 17.63356 ## $ overstory_dbh_cm_mpe &lt;dbl&gt; 0.3555183 ## $ understory_dbh_cm_mpe &lt;dbl&gt; 2.999127 ## $ overstory_dbh_cm_mae &lt;dbl&gt; 10.10342 ## $ understory_dbh_cm_mae &lt;dbl&gt; 17.63356 ## $ overstory_dbh_cm_mape &lt;dbl&gt; 0.4068072 ## $ understory_dbh_cm_mape &lt;dbl&gt; 2.999127 ## $ overstory_dbh_cm_smape &lt;dbl&gt; 0.3087332 ## $ understory_dbh_cm_smape &lt;dbl&gt; 1.088004 ## $ overstory_dbh_cm_mse &lt;dbl&gt; 132.5806 ## $ understory_dbh_cm_mse &lt;dbl&gt; 318.7138 ## $ overstory_dbh_cm_rmse &lt;dbl&gt; 11.51437 ## $ understory_dbh_cm_rmse &lt;dbl&gt; 17.85256 ## $ overstory_uas_basal_area_m2 &lt;dbl&gt; 55.94051 ## $ understory_uas_basal_area_m2 &lt;dbl&gt; 3.875108 ## $ overstory_field_basal_area_m2 &lt;dbl&gt; 67.50326 ## $ understory_field_basal_area_m2 &lt;dbl&gt; 1.540832 ## $ overstory_uas_basal_area_m2_per_ha &lt;dbl&gt; 32.08203 ## $ understory_uas_basal_area_m2_per_ha &lt;dbl&gt; 2.222385 ## $ overstory_field_basal_area_m2_per_ha &lt;dbl&gt; 38.7133 ## $ understory_field_basal_area_m2_per_ha &lt;dbl&gt; 0.883671 ## $ overstory_basal_area_m2_per_ha_error &lt;dbl&gt; -6.631268 ## $ understory_basal_area_m2_per_ha_error &lt;dbl&gt; 1.338714 ## $ overstory_basal_area_pct_error &lt;dbl&gt; -0.1712917 ## $ understory_basal_area_pct_error &lt;dbl&gt; 1.514946 ## $ overstory_basal_area_abs_pct_error &lt;dbl&gt; 0.1712917 ## $ understory_basal_area_abs_pct_error &lt;dbl&gt; 1.514946 ## $ validation_file_full_path &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ overstory_ht_m &lt;dbl&gt; 7 # output file is the same thing as field_uas_comparison_fn validation_temp$validation_file_full_path %&gt;% readr::read_csv() %&gt;% dplyr::glimpse() ## Rows: 1,174 ## Columns: 30 ## $ field_uas_group &lt;chr&gt; &quot;true positive&quot;, &quot;true positive&quot;,… ## $ uas_tree_id &lt;chr&gt; &quot;1000_-157206.9_4068542.9&quot;, &quot;1020… ## $ field_tree_id &lt;dbl&gt; 96, 82, 87, 42, 77, 85, 51, 56, 4… ## $ height_diff_pct &lt;dbl&gt; -0.065845684, -0.014773812, 0.009… ## $ field_uas_distance_m &lt;dbl&gt; 0.5527370, 1.7755352, 2.1687497, … ## $ uas_dbh_cm &lt;dbl&gt; 31.88706, 42.63619, 37.67259, 43.… ## $ uas_basal_area_m2 &lt;dbl&gt; 0.07985806, 0.14277319, 0.1114656… ## $ uas_tree_utm_x &lt;dbl&gt; 380396.4, 380441.5, 380403.7, 380… ## $ uas_tree_utm_y &lt;dbl&gt; 4044246, 4044246, 4044240, 404423… ## $ field_dbh_cm &lt;dbl&gt; 25.908, 33.020, 28.448, 34.290, 4… ## $ field_basal_area_m2 &lt;dbl&gt; 0.052717846, 0.085633564, 0.06356… ## $ field_tree_utm_x &lt;dbl&gt; 380396.4, 380441.9, 380403.7, 380… ## $ field_tree_utm_y &lt;dbl&gt; 4044246, 4044244, 4044242, 404423… ## $ uas_tree_height_m &lt;dbl&gt; 10.851, 19.284, 15.638, 20.122, 2… ## $ field_tree_height_m &lt;dbl&gt; 11.615854, 19.573171, 15.487805, … ## $ dbh_diff_cm &lt;dbl&gt; 5.979056, 9.616189, 9.224593, 9.5… ## $ tree_height_diff_m &lt;dbl&gt; -0.7648538, -0.2891703, 0.1501947… ## $ dbh_diff_pct &lt;dbl&gt; 0.2307803, 0.2912232, 0.3242616, … ## $ abs_dbh_diff_pct &lt;dbl&gt; 0.2307803, 0.2912232, 0.3242616, … ## $ abs_height_diff_pct &lt;dbl&gt; 0.065845684, 0.014773812, 0.00969… ## $ overstory_understory_grp &lt;chr&gt; &quot;overstory&quot;, &quot;overstory&quot;, &quot;overst… ## $ overstory_ht_m &lt;dbl&gt; 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, … ## $ processing_id &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;KA… ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH_AGGRESSI… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASH… ## $ depth_maps_generation_quality &lt;chr&gt; &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, &quot;high&quot;, &quot;… ## $ depth_maps_generation_filtering_mode &lt;chr&gt; &quot;aggressive&quot;, &quot;aggressive&quot;, &quot;aggr… ## $ processing_attribute3 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ processed_data_dir &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Metas… 5.4 Full pipeline function function to map over study sites represented in ptcld_processing_data # function to map over study sites represented in ptcld_processing_data # set up in a way so that only have to read field data from disk once and # perform validation for each uas data represented for that site in ptcld_processing_data # Returns: # 1) write full validation tree list to disk # 2) update ptcld_processing_data with metrics for testing: # f-score # ht rmse # dbh rmse # path to validation tree list full_validation_fn = function(study_site_nm) { # filter plot data validation_plot = validation_plots %&gt;% dplyr::filter(study_site == study_site_nm) # read field data field_data = read_field_data(study_site_nm) # # map over file validation function and return data # function for a file name identified by processing_id in ptcld_processing_data d = ptcld_processing_data %&gt;% dplyr::filter(study_site == study_site_nm) %&gt;% dplyr::pull(processing_id) %&gt;% purrr::map(validate_file_fn, fld_dta = field_data, plt_dta = validation_plot) %&gt;% dplyr::bind_rows() # return return(d) } 5.5 Apply validation for all ptcld_validation_data = study_site_list %&gt;% purrr::map(full_validation_fn) %&gt;% dplyr::bind_rows() # write this! write.csv( ptcld_validation_data , &quot;../data/ptcld_full_analysis_data.csv&quot; , row.names = F ) what is this validation data? ptcld_validation_data %&gt;% dplyr::glimpse() ## Rows: 260 ## Columns: 114 ## $ tracking_file_full_path &lt;chr&gt; &quot;D:\\\\SfM_Software_Comparison\\\\Me… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METAS… ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;K… ## $ processing_attribute1 &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, … ## $ processing_attribute2 &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;, &quot;MILD&quot;… ## $ processing_attribute3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH_DISABLE… ## $ number_of_points &lt;int&gt; 52974294, 72549206, 69858217, 69… ## $ las_area_m2 &lt;dbl&gt; 86661.27, 87175.42, 86404.78, 86… ## $ timer_tile_time_mins &lt;dbl&gt; 0.63600698, 2.49318542, 0.841338… ## $ timer_class_dtm_norm_chm_time_mins &lt;dbl&gt; 3.6559556, 5.3289152, 5.1638296,… ## $ timer_treels_time_mins &lt;dbl&gt; 8.9065272, 19.2119663, 12.339179… ## $ timer_itd_time_mins &lt;dbl&gt; 0.02202115, 0.02449968, 0.037984… ## $ timer_competition_time_mins &lt;dbl&gt; 0.10590740, 0.17865245, 0.121248… ## $ timer_estdbh_time_mins &lt;dbl&gt; 0.02290262, 0.02382533, 0.021991… ## $ timer_silv_time_mins &lt;dbl&gt; 0.012565533, 0.015940932, 0.0150… ## $ timer_total_time_mins &lt;dbl&gt; 13.361886, 27.276985, 18.540606,… ## $ sttng_input_las_dir &lt;chr&gt; &quot;D:/Metashape_Testing_2024&quot;, &quot;D:… ## $ sttng_use_parallel_processing &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALS… ## $ sttng_desired_chm_res &lt;dbl&gt; 0.25, 0.25, 0.25, 0.25, 0.25, 0.… ## $ sttng_max_height_threshold_m &lt;int&gt; 60, 60, 60, 60, 60, 60, 60, 60, … ## $ sttng_minimum_tree_height_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_dbh_max_size_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_local_dbh_model &lt;chr&gt; &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;r… ## $ sttng_user_supplied_epsg &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ sttng_accuracy_level &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_pts_m2_for_triangulation &lt;int&gt; 20, 20, 20, 20, 20, 20, 20, 20, … ## $ sttng_normalization_with &lt;chr&gt; &quot;triangulation&quot;, &quot;triangulation&quot;… ## $ sttng_competition_buffer_m &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, low, low… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, disabled, mild, mode… ## $ total_sfm_time_min &lt;dbl&gt; 54.800000, 60.316667, 55.933333,… ## $ number_of_points_sfm &lt;dbl&gt; 52974294, 72549206, 69858217, 69… ## $ total_sfm_time_norm &lt;dbl&gt; 0.1117823680, 0.1237564664, 0.11… ## $ processed_data_dir &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ processing_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1… ## $ true_positive_n_trees &lt;dbl&gt; 229, 261, 260, 234, 220, 175, 23… ## $ commission_n_trees &lt;dbl&gt; 173, 222, 213, 193, 148, 223, 16… ## $ omission_n_trees &lt;dbl&gt; 772, 740, 741, 767, 781, 826, 77… ## $ f_score &lt;dbl&gt; 0.3264433, 0.3517520, 0.3527815,… ## $ tree_height_m_me &lt;dbl&gt; 0.270336679, 0.283568790, 0.3122… ## $ tree_height_m_mpe &lt;dbl&gt; 0.002357383, 0.013286785, 0.0142… ## $ tree_height_m_mae &lt;dbl&gt; 0.7873610, 0.6886235, 0.6914983,… ## $ tree_height_m_mape &lt;dbl&gt; 0.06624939, 0.06903969, 0.060550… ## $ tree_height_m_smape &lt;dbl&gt; 0.06776453, 0.06838733, 0.060410… ## $ tree_height_m_mse &lt;dbl&gt; 0.9842433, 0.8507862, 0.8259923,… ## $ tree_height_m_rmse &lt;dbl&gt; 0.9920904, 0.9223807, 0.9088412,… ## $ dbh_cm_me &lt;dbl&gt; 9.1432719, 6.5708955, 8.4202884,… ## $ dbh_cm_mpe &lt;dbl&gt; 0.863460500, 0.815124639, 0.9569… ## $ dbh_cm_mae &lt;dbl&gt; 11.550258, 9.444397, 11.668345, … ## $ dbh_cm_mape &lt;dbl&gt; 0.9048948, 0.8693847, 1.0137530,… ## $ dbh_cm_smape &lt;dbl&gt; 0.4584621, 0.4673925, 0.5094000,… ## $ dbh_cm_mse &lt;dbl&gt; 168.34419, 113.68139, 165.40074,… ## $ dbh_cm_rmse &lt;dbl&gt; 12.974752, 10.662147, 12.860822,… ## $ uas_basal_area_m2 &lt;dbl&gt; 59.81562, 58.24249, 58.89314, 49… ## $ field_basal_area_m2 &lt;dbl&gt; 69.04409, 69.04409, 69.04409, 69… ## $ uas_basal_area_m2_per_ha &lt;dbl&gt; 34.30442, 33.40222, 33.77538, 28… ## $ field_basal_area_m2_per_ha &lt;dbl&gt; 39.59697, 39.59697, 39.59697, 39… ## $ basal_area_m2_error &lt;dbl&gt; -9.228474, -10.801601, -10.15094… ## $ basal_area_m2_per_ha_error &lt;dbl&gt; -5.2925541, -6.1947468, -5.82159… ## $ basal_area_pct_error &lt;dbl&gt; -0.13366058, -0.15644496, -0.147… ## $ basal_area_abs_pct_error &lt;dbl&gt; 0.13366058, 0.15644496, 0.147021… ## $ overstory_commission_n_trees &lt;dbl&gt; 141, 178, 178, 160, 95, 173, 120… ## $ understory_commission_n_trees &lt;dbl&gt; 32, 44, 35, 33, 53, 50, 43, 39, … ## $ overstory_omission_n_trees &lt;dbl&gt; 558, 560, 545, 556, 554, 598, 54… ## $ understory_omission_n_trees &lt;dbl&gt; 214, 180, 196, 211, 227, 228, 22… ## $ overstory_true_positive_n_trees &lt;dbl&gt; 185, 183, 198, 187, 189, 145, 19… ## $ understory_true_positive_n_trees &lt;dbl&gt; 44, 78, 62, 47, 31, 30, 33, 40, … ## $ overstory_f_score &lt;dbl&gt; 0.3461179, 0.3315217, 0.3538874,… ## $ understory_f_score &lt;dbl&gt; 0.2634731, 0.4105263, 0.3492958,… ## $ overstory_tree_height_m_me &lt;dbl&gt; 0.41693172, 0.44114110, 0.442167… ## $ understory_tree_height_m_me &lt;dbl&gt; -0.34602886, -0.08612009, -0.102… ## $ overstory_tree_height_m_mpe &lt;dbl&gt; 0.020790675, 0.024558478, 0.0241… ## $ understory_tree_height_m_mpe &lt;dbl&gt; -0.075146232, -0.013158341, -0.0… ## $ overstory_tree_height_m_mae &lt;dbl&gt; 0.8201433, 0.7820879, 0.7770369,… ## $ understory_tree_height_m_mae &lt;dbl&gt; 0.6495266, 0.4693415, 0.4183269,… ## $ overstory_tree_height_m_mape &lt;dbl&gt; 0.04662933, 0.04863237, 0.048708… ## $ understory_tree_height_m_mape &lt;dbl&gt; 0.14874284, 0.11691842, 0.098369… ## $ overstory_tree_height_m_smape &lt;dbl&gt; 0.04589942, 0.04776615, 0.047912… ## $ understory_tree_height_m_smape &lt;dbl&gt; 0.15969736, 0.11676780, 0.100322… ## $ overstory_tree_height_m_mse &lt;dbl&gt; 1.0623763, 1.0055835, 0.9739823,… ## $ understory_tree_height_m_mse &lt;dbl&gt; 0.6557300, 0.4876080, 0.3533791,… ## $ overstory_tree_height_m_rmse &lt;dbl&gt; 1.0307164, 1.0027878, 0.9869054,… ## $ understory_tree_height_m_rmse &lt;dbl&gt; 0.8097715, 0.6982893, 0.5944570,… ## $ overstory_dbh_cm_me &lt;dbl&gt; 7.12396092, 4.28187214, 5.994003… ## $ understory_dbh_cm_me &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mpe &lt;dbl&gt; 0.35551830, 0.28023813, 0.384916… ## $ understory_dbh_cm_mpe &lt;dbl&gt; 2.99912656, 2.07005068, 2.783578… ## $ overstory_dbh_cm_mae &lt;dbl&gt; 10.103420, 8.380144, 10.259129, … ## $ understory_dbh_cm_mae &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mape &lt;dbl&gt; 0.4068072, 0.3576254, 0.4595653,… ## $ understory_dbh_cm_mape &lt;dbl&gt; 2.9991266, 2.0700507, 2.7835783,… ## $ overstory_dbh_cm_smape &lt;dbl&gt; 0.3087332, 0.2849537, 0.3443392,… ## $ understory_dbh_cm_smape &lt;dbl&gt; 1.0880037, 0.8954218, 1.0365298,… ## $ overstory_dbh_cm_mse &lt;dbl&gt; 132.58061, 97.96175, 132.74645, … ## $ understory_dbh_cm_mse &lt;dbl&gt; 318.713781, 150.562072, 269.6837… ## $ overstory_dbh_cm_rmse &lt;dbl&gt; 11.514365, 9.897563, 11.521564, … ## $ understory_dbh_cm_rmse &lt;dbl&gt; 17.852557, 12.270374, 16.422052,… ## $ overstory_uas_basal_area_m2 &lt;dbl&gt; 55.94051, 54.40543, 54.41901, 46… ## $ understory_uas_basal_area_m2 &lt;dbl&gt; 3.8751084, 3.8370665, 4.4741330,… ## $ overstory_field_basal_area_m2 &lt;dbl&gt; 67.50326, 67.50326, 67.50326, 67… ## $ understory_field_basal_area_m2 &lt;dbl&gt; 1.540832, 1.540832, 1.540832, 1.… ## $ overstory_uas_basal_area_m2_per_ha &lt;dbl&gt; 32.08203, 31.20166, 31.20945, 26… ## $ understory_uas_basal_area_m2_per_ha &lt;dbl&gt; 2.22238497, 2.20056787, 2.565927… ## $ overstory_field_basal_area_m2_per_ha &lt;dbl&gt; 38.7133, 38.7133, 38.7133, 38.71… ## $ understory_field_basal_area_m2_per_ha &lt;dbl&gt; 0.883671, 0.883671, 0.883671, 0.… ## $ overstory_basal_area_m2_per_ha_error &lt;dbl&gt; -6.631268, -7.511644, -7.503852,… ## $ understory_basal_area_m2_per_ha_error &lt;dbl&gt; 1.3387140, 1.3168969, 1.6822562,… ## $ overstory_basal_area_pct_error &lt;dbl&gt; -0.17129173, -0.19403263, -0.193… ## $ understory_basal_area_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ overstory_basal_area_abs_pct_error &lt;dbl&gt; 0.17129173, 0.19403263, 0.193831… ## $ understory_basal_area_abs_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ validation_file_full_path &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ overstory_ht_m &lt;dbl&gt; 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… # summary of validation metrics ptcld_validation_data %&gt;% dplyr::select(f_score, tree_height_m_mape, dbh_cm_mape) %&gt;% summary() ## f_score tree_height_m_mape dbh_cm_mape ## Min. :0.0000 Min. :0.02518 Min. :0.0745 ## 1st Qu.:0.2983 1st Qu.:0.05239 1st Qu.:0.2121 ## Median :0.4425 Median :0.06231 Median :0.3022 ## Mean :0.4611 Mean :0.06575 Mean :0.5870 ## 3rd Qu.:0.6222 3rd Qu.:0.07139 3rd Qu.:0.6293 ## Max. :0.8997 Max. :0.15715 Max. :9.6419 ## NA&#39;s :2 NA&#39;s :2 5.6 Full Validation Summary Data 5.6.1 True Positive, Commission, Ommission Summary of tree true positive (\\(TP\\)), commission (\\(Co\\)), and omission (\\(Om\\)) detection by depth map quality and filtering mode plt_fn_temp = function(site = study_site_list[1]){ ptcld_validation_data %&gt;% dplyr::filter(study_site == site) %&gt;% dplyr::mutate( plot_lab = forcats::fct_cross(depth_maps_generation_quality,depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(plot_lab = forcats::fct_reorder( plot_lab , .x = depth_maps_generation_quality , .fun = max ) %&gt;% forcats::fct_rev() ) %&gt;% dplyr::select( software, plot_lab, tidyselect::ends_with(&quot;_n_trees&quot;) &amp; !tidyselect::starts_with(&quot;overstory_&quot;) &amp; !tidyselect::starts_with(&quot;understory_&quot;) ) %&gt;% tidyr::pivot_longer( cols = -c(software,plot_lab) , values_drop_na = F ) %&gt;% dplyr::group_by(software,plot_lab) %&gt;% dplyr::mutate( field_uas_group = name %&gt;% stringr::str_remove_all(&quot;_n_trees&quot;) %&gt;% stringr::str_replace_all(&quot;_&quot;,&quot; &quot;) %&gt;% factor( ordered = T , levels = c( &quot;true positive&quot; , &quot;commission&quot; , &quot;omission&quot; ) ) %&gt;% forcats::fct_rev() , pct = dplyr::coalesce(value,0)/sum(dplyr::coalesce(value,0)) ) %&gt;% dplyr::ungroup() %&gt;% ggplot( mapping = aes(x = pct, y = plot_lab, fill=field_uas_group, group=field_uas_group) ) + geom_col( width = 0.7, alpha=0.8 ) + geom_text( mapping = aes( label = scales::percent(ifelse(pct&gt;=0.12,pct,NA), accuracy = 1) , fontface = &quot;bold&quot; ) , position = position_stack(vjust = 0.5) , color = &quot;black&quot;, size = 2.3 ) + facet_grid(cols = vars(software)) + scale_fill_viridis_d(option = &quot;cividis&quot;) + scale_x_continuous(labels = scales::percent_format()) + labs( fill = &quot;&quot; , y = &quot;&quot; , x = &quot;Percent of Trees&quot; # , title = &quot;UAS and Stem-Mapped Tree Validation Summary&quot; , subtitle = paste0(&quot;plot: &quot;, site) ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_text(size=7) , axis.title.x = element_text(size=8, face = &quot;bold&quot;) , axis.title.y = element_blank() , axis.text.x = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=8) , axis.ticks.x = element_blank() , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 0.9)) ) } # map over sites plt_list_temp = study_site_list %&gt;% purrr::map(plt_fn_temp) # combine patchwork::wrap_plots(plt_list_temp, ncol = 2, guides = &quot;collect&quot;) &amp; theme(legend.position=&quot;bottom&quot;) 5.6.2 F-score plt_fn_temp = function(site = study_site_list[1]){ ptcld_validation_data %&gt;% dplyr::filter(study_site == site) %&gt;% dplyr::mutate( plot_lab = forcats::fct_cross(depth_maps_generation_quality,depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(plot_lab = forcats::fct_reorder( plot_lab , .x = depth_maps_generation_quality , .fun = max ) %&gt;% forcats::fct_rev() ) %&gt;% dplyr::distinct(software,plot_lab,f_score) %&gt;% ggplot( mapping = aes(x = f_score, y = plot_lab, fill=f_score, label = scales::comma(f_score, accuracy = 0.01)) ) + geom_col( width = 0.7 ) + geom_text( color = &quot;black&quot;, size = 2.3 , hjust = -0.1 ) + facet_grid(cols = vars(software)) + scale_fill_viridis_c(option = &quot;mako&quot;, direction = -1, begin = 0.1, limits = c(0,max(ptcld_validation_data$f_score)*1.14)) + scale_x_continuous(limits = c(0,max(ptcld_validation_data$f_score)*1.14), breaks = NULL) + labs( fill = &quot;&quot; , y = &quot;&quot; , x = &quot;F-Score&quot; # , title = &quot;UAS and Stem-Mapped Tree F-Score Summary&quot; , subtitle = paste0(&quot;plot: &quot;, site) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.title.x = element_text(size=8, face = &quot;bold&quot;) , axis.title.y = element_blank() , axis.text.x = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=8) , axis.ticks.x = element_blank() , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides( fill = guide_legend(reverse = T, override.aes = list(alpha = 0.9)) ) } # plt_fn_temp() # map over sites plt_list_temp = study_site_list %&gt;% purrr::map(plt_fn_temp) # combine patchwork::wrap_plots(plt_list_temp, ncol = 2) 5.7 Example Validation Process Let’s go through one example for KAIBAB_LOW 5.7.1 Data Load Data load using functions defined above for KAIBAB_LOW # validation plot boundary plot_bound_temp = validation_plots %&gt;% dplyr::filter(study_site==study_site_list[2]) # read field data field_data_temp = read_field_data(my_study_site = study_site_list[2]) # read_uas_data uas_data_temp = read_uas_data( my_processing_id = ptcld_processing_data %&gt;% dplyr::filter(study_site==study_site_list[2]) %&gt;% dplyr::pull(processing_id) %&gt;% .[1] , my_crs = sf::st_crs(field_data_temp) ) # true positive true_positive_trees_temp = true_positive_trees_fn(uas_data = uas_data_temp, field_data = field_data_temp) # field_uas_comparison_fn field_uas_comparison_temp = field_uas_comparison_fn( uas_data = uas_data_temp , field_data = field_data_temp , true_positive_trees = true_positive_trees_temp , plot_data = plot_bound_temp ) get the orthomosaic (here using from ODM ultra-lowest) from the directory titled field_validation/orthomosaic with the name of the site as the file name (e.g.; “kaibab_high.tif”) # let&#39;s load the orthomosaic for this site too # put the orthomosaic images (here using from ODM ultra-lowest) in a folder # ...titled &quot;field_validation/orthomosaic&quot; with the name of the site as the file (&quot;kaibab_high.tif&quot;) ortho_list = list.files( &quot;../data/field_validation/orthomosaic/&quot; , pattern = &quot;.*\\\\.(tif|tiff)$&quot; , full.names = T ) # load raster ortho_rast = ortho_list %&gt;% purrr::pluck( ortho_list %&gt;% toupper() %&gt;% stringr::str_which(pattern = study_site_list[2]) %&gt;% .[1] ) %&gt;% terra::rast() # aggregate to lower resolution if needed if(terra::res(ortho_rast)[1]&lt;0.5){ ortho_rast = terra::aggregate( ortho_rast , fact = round(0.5/terra::res(ortho_rast)[1]) , fun = &quot;median&quot; , cores = round(parallel::detectCores()/2) ) } # ortho_rast # terra::res(ortho_rast) # ortho_rast %&gt;% # terra::aggregate(2) %&gt;% # terra::plotRGB(r = 1, g = 2, b = 3, stretch = &quot;lin&quot;, colNA = &quot;transparent&quot;) # convert to stars ortho_st = ortho_rast %&gt;% terra::subset(subset = c(1,2,3)) %&gt;% terra::crop( # stand %&gt;% plot_bound_temp %&gt;% sf::st_buffer(2) %&gt;% sf::st_bbox() %&gt;% sf::st_as_sfc() %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) ) %&gt;% stars::st_as_stars() # convert to rgb ortho_rgb = stars::st_rgb( ortho_st[,,,1:3] , dimension = 3 , use_alpha = FALSE # , stretch = &quot;histogram&quot; , probs = c(0.005, 0.995) , stretch = &quot;percent&quot; ) what is all this data? 5.7.2 Orthomosaic Data ortho_rast ortho_rast ## class : SpatRaster ## dimensions : 573, 556, 4 (nrow, ncol, nlyr) ## resolution : 0.5, 0.4999662 (x, y) ## extent : 380355.9, 380633.9, 4044343, 4044630 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 12N (EPSG:32612) ## source(s) : memory ## names : red, green, blue, kaibab_low_4 ## min values : 0, 0, 0, 0 ## max values : 226, 229, 232, 255 plot it # ggplot rgb plt_rgb = ggplot() + stars::geom_stars(data = ortho_rgb[]) + scale_fill_identity(na.value = &quot;transparent&quot;) + # !!! don&#39;t take this out or RGB plot will kill your computer # add plot boundary geom_sf( data = plot_bound_temp %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , alpha = 0 , lwd = 1.2 , color = &quot;blue&quot; ) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + labs( x = &quot;&quot; , y = &quot;&quot; ) + theme_void() # plot + boundary plt_rgb 5.7.3 Field Data field_data # field_data field_data_temp %&gt;% dplyr::glimpse() ## Rows: 510 ## Columns: 16 ## $ field_tree_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, … ## $ site &lt;chr&gt; &quot;Kaibab - Low&quot;, &quot;Kaibab - Low&quot;, &quot;Kaibab - L… ## $ northing &lt;dbl&gt; 4044408, 4044405, 4044436, 4044436, 4044443… ## $ easting &lt;dbl&gt; 380523.9, 380536.4, 380528.6, 380528.3, 380… ## $ spp &lt;chr&gt; &quot;PIPO&quot;, &quot;PIPO&quot;, &quot;PIPO&quot;, &quot;PIPO&quot;, &quot;PIPO&quot;, &quot;PI… ## $ a.d &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ field_dbh_cm &lt;dbl&gt; 56.642, 60.960, 13.970, 56.896, 34.544, 45.… ## $ cbh_m &lt;dbl&gt; 14.268293, 15.914634, 2.439024, 10.762195, … ## $ field_tree_height_m &lt;dbl&gt; 26.646341, 24.756098, 6.676829, 23.201220, … ## $ notes &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ study_site &lt;chr&gt; &quot;KAIBAB_LOW&quot;, &quot;KAIBAB_LOW&quot;, &quot;KAIBAB_LOW&quot;, &quot;… ## $ intersected_with_plot_geom &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ geometry &lt;POINT [m]&gt; POINT (380523.9 4044408), POINT (3805… ## $ tree_utm_x &lt;dbl&gt; 380523.9, 380536.4, 380528.6, 380528.3, 380… ## $ tree_utm_y &lt;dbl&gt; 4044408, 4044405, 4044436, 4044436, 4044443… ## $ basal_area_m2 &lt;dbl&gt; 0.25198056, 0.29186351, 0.01532790, 0.25424… plot it plt_field_data_temp = plt_rgb + ggnewscale::new_scale_fill() + geom_sf( data = field_data_temp %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , mapping = aes(fill = field_tree_height_m) , shape = 21 , size = 1.1 ) + scale_fill_viridis_c( option=&quot;plasma&quot;, alpha = 0.6, name = &quot;ht. (m)&quot; , limits = c( min(field_data_temp$field_tree_height_m, na.rm = T) , max(field_data_temp$field_tree_height_m, na.rm = T) ) , breaks = scales::breaks_extended(6) ) + labs(subtitle = &quot;field mapped trees&quot;) # plot plt_field_data_temp 5.7.4 UAS Data uas_data # uas_data uas_data_temp %&gt;% dplyr::glimpse() ## Rows: 1,592 ## Columns: 23 ## $ treeid &lt;chr&gt; &quot;1_-157075.4_4068915.6&quot;, &quot;2_-157089.4_406891… ## $ tree_height_m &lt;dbl&gt; 5.357, 21.154, 12.778, 21.002, 20.948, 3.579… ## $ crown_area_m2 &lt;dbl&gt; 1.3125, 16.4375, 10.0000, 16.2500, 14.8125, … ## $ comp_trees_per_ha &lt;dbl&gt; 254.7643, 127.3822, 254.7643, 254.7643, 382.… ## $ comp_relative_tree_height &lt;dbl&gt; 41.92362, 100.00000, 100.00000, 100.00000, 9… ## $ comp_dist_to_nearest_m &lt;dbl&gt; 4.2500000, 8.4001488, 4.2500000, 2.6575365, … ## $ mean_crown_ht_m &lt;dbl&gt; 4.122833, 17.681132, 9.023225, 18.342263, 16… ## $ median_crown_ht_m &lt;dbl&gt; 4.445000, 18.034000, 9.382500, 19.767000, 17… ## $ min_crown_ht_m &lt;dbl&gt; 2.264000, 12.726000, 3.607500, 8.022000, 3.7… ## $ reg_est_dbh_cm &lt;dbl&gt; 8.343743, 44.429833, 22.647150, 43.713975, 4… ## $ reg_est_dbh_cm_lower &lt;dbl&gt; 4.410595, 23.389277, 11.940055, 23.033076, 2… ## $ reg_est_dbh_cm_upper &lt;dbl&gt; 13.253220, 70.603026, 36.013406, 69.666868, … ## $ is_training_data &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FAL… ## $ dbh_cm &lt;dbl&gt; 20.67194, 46.86084, 30.07782, 46.35781, 43.3… ## $ dbh_m &lt;dbl&gt; 0.4186878, 0.4677839, 0.4125874, 0.4526102, … ## $ radius_m &lt;dbl&gt; 0.2093439, 0.2338919, 0.2062937, 0.2263051, … ## $ basal_area_m2 &lt;dbl&gt; 0.03356235, 0.17246862, 0.07105305, 0.168785… ## $ basal_area_ft2 &lt;dbl&gt; 0.3612651, 1.8564523, 0.7648150, 1.8168093, … ## $ processing_id &lt;int&gt; 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, … ## $ rf_dbh_cm &lt;dbl&gt; 41.86878, 46.77839, 41.25874, 45.26102, 43.3… ## $ lin_dbh_cm &lt;dbl&gt; 20.67194, 46.86084, 30.07782, 46.35781, 43.3… ## $ lin_noint_dbh_cm &lt;dbl&gt; 2.696247, 51.119379, 10.754957, 49.478330, 4… ## $ geometry &lt;POINT [m]&gt; POINT (380503.8 4044624), POINT (38049… plot it plt_uas_data_temp = plt_rgb + ggnewscale::new_scale_fill() + geom_sf( data = uas_data_temp %&gt;% sf::st_transform(sf::st_crs(plot_bound_temp)) %&gt;% sf::st_intersection(plot_bound_temp %&gt;% sf::st_buffer(3)) %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , mapping = aes(fill = tree_height_m) , shape = 21 , size = 1.1 ) + scale_fill_viridis_c( option=&quot;plasma&quot;, alpha = 0.6, name = &quot;ht. (m)&quot; , limits = c( min(field_data_temp$field_tree_height_m, na.rm = T) , max(field_data_temp$field_tree_height_m, na.rm = T) ) , breaks = scales::breaks_extended(6) ) + labs(subtitle = &quot;UAS detected trees&quot;) # plot plt_uas_data_temp 5.7.5 True Positives true_positive_trees # true_positive_trees true_positive_trees_temp %&gt;% dplyr::glimpse() ## Rows: 227 ## Columns: 7 ## $ uas_tree_id &lt;chr&gt; &quot;1009_-157051.4_4068750.6&quot;, &quot;1014_-157040.9_40687… ## $ field_tree_id &lt;int&gt; 119, 285, 295, 330, 120, 123, 329, 121, 124, 127,… ## $ uas_tree_height_m &lt;dbl&gt; 14.261, 21.799, 2.967, 3.563, 18.281, 18.785, 3.2… ## $ field_tree_height_m &lt;dbl&gt; 14.054878, 22.896341, 2.591463, 3.628049, 17.0731… ## $ height_diff_pct &lt;dbl&gt; 0.014665487, 0.047926507, 0.144912944, 0.01792942… ## $ field_uas_distance_m &lt;dbl&gt; 1.11155605, 1.11336058, 0.04502782, 0.86474303, 0… ## $ field_uas_group &lt;chr&gt; &quot;true positive&quot;, &quot;true positive&quot;, &quot;true positive&quot;… 5.7.6 Field &amp; UAS Comparison field_uas_comparison # field_uas_comparison field_uas_comparison_temp %&gt;% dplyr::glimpse() ## Rows: 818 ## Columns: 22 ## $ field_uas_group &lt;ord&gt; true positive, true positive, true positive, … ## $ uas_tree_id &lt;chr&gt; &quot;1009_-157051.4_4068750.6&quot;, &quot;1014_-157040.9_4… ## $ field_tree_id &lt;dbl&gt; 119, 285, 295, 330, 120, 123, 329, 121, 124, … ## $ height_diff_pct &lt;dbl&gt; 0.014665487, -0.047926507, 0.144912944, -0.01… ## $ field_uas_distance_m &lt;dbl&gt; 1.11155605, 1.11336058, 0.04502782, 0.8647430… ## $ uas_dbh_cm &lt;dbl&gt; 32.54375, 48.64183, 18.42422, 19.02572, 40.07… ## $ uas_basal_area_m2 &lt;dbl&gt; 0.08318118, 0.18582740, 0.02666048, 0.0284297… ## $ uas_tree_utm_x &lt;dbl&gt; 380537.9, 380548.3, 380487.0, 380545.8, 38053… ## $ uas_tree_utm_y &lt;dbl&gt; 4044462, 4044462, 4044454, 4044458, 4044453, … ## $ field_dbh_cm &lt;dbl&gt; 32.512, 49.276, 4.572, 10.160, 43.434, 30.734… ## $ field_basal_area_m2 &lt;dbl&gt; 0.083018953, 0.190704427, 0.001641732, 0.0081… ## $ field_tree_utm_x &lt;dbl&gt; 380538.9, 380549.1, 380487.0, 380546.7, 38053… ## $ field_tree_utm_y &lt;dbl&gt; 4044462, 4044462, 4044454, 4044458, 4044454, … ## $ uas_tree_height_m &lt;dbl&gt; 14.261, 21.799, 2.967, 3.563, 18.281, 18.785,… ## $ field_tree_height_m &lt;dbl&gt; 14.054878, 22.896341, 2.591463, 3.628049, 17.… ## $ dbh_diff_cm &lt;dbl&gt; 0.03175117, -0.63416715, 13.85221666, 8.86572… ## $ tree_height_diff_m &lt;dbl&gt; 0.20612163, -1.09734168, 0.37553659, -0.06504… ## $ dbh_diff_pct &lt;dbl&gt; 0.0009765984, -0.0128696961, 3.0297936694, 0.… ## $ abs_dbh_diff_pct &lt;dbl&gt; 0.0009765984, 0.0128696961, 3.0297936694, 0.8… ## $ abs_height_diff_pct &lt;dbl&gt; 0.014665487, 0.047926507, 0.144912944, 0.0179… ## $ overstory_understory_grp &lt;fct&gt; overstory, overstory, understory, understory,… ## $ overstory_ht_m &lt;dbl&gt; 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, … no geometry, let’s attach it field_uas_comparison_temp = field_uas_comparison_temp %&gt;% dplyr::mutate( x = ifelse(!is.na(field_tree_utm_x), field_tree_utm_x, uas_tree_utm_x) , y = ifelse(!is.na(field_tree_utm_x), field_tree_utm_y, uas_tree_utm_y) ) %&gt;% sf::st_as_sf( coords = c(&quot;x&quot;, &quot;y&quot;) , crs = sf::st_crs(field_data_temp) , remove=T ) plot it plt_comparison_temp = plt_rgb + ggnewscale::new_scale_fill() + geom_sf( data = field_uas_comparison_temp %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , mapping = aes(fill = field_uas_group) , color = &quot;black&quot; , shape = 21 , size = 1.1 ) + scale_fill_viridis_d(option = &quot;cividis&quot;, name = &quot;trees&quot;, drop = F, alpha = 0.7) + labs(subtitle = &quot;field &amp; UAS comparison trees&quot;) # plot plt_comparison_temp 5.7.7 Combine Plots combine these (plt_field_data_temp + theme(legend.position = &quot;none&quot;) + plt_uas_data_temp) / plt_comparison_temp ggplot2::ggsave(&quot;../data/field_uas_comparison.jpg&quot;, width = 8, height = 9) we can also view these with satellite imagery which is not what the UAS-derived tree detections are from but can be a good viewing tool # load chm chm_temp = ptcld_processing_data %&gt;% dplyr::filter(study_site==study_site_list[2]) %&gt;% dplyr::filter(dplyr::row_number()==1) %&gt;% dplyr::mutate( f = paste0( processed_data_dir , &quot;/&quot; , file_name , &quot;_chm_0.25m.tif&quot; ) ) %&gt;% dplyr::pull(f) %&gt;% terra::rast() %&gt;% terra::aggregate(2) %&gt;% stars::st_as_stars() # map it mapview::mapviewOptions(basemaps = c(&quot;Esri.WorldImagery&quot;, &quot;OpenStreetMap&quot;)) mapview::mapview( plot_bound_temp , color = &quot;blue&quot; , lwd = 2 , alpha.regions = 0 , layer.name = &quot;boundary&quot; , label = FALSE , legend = FALSE , popup = FALSE ) + # aggregate raster and map mapview::mapview( chm_temp , layer.name = &quot;canopy ht. (m)&quot; , col.regions = viridis::plasma(n=50) , alpha.regions = 0.7 , na.color = &quot;transparent&quot; ) + # validation mapview::mapview( field_uas_comparison_temp , zcol = &quot;field_uas_group&quot; , col.regions = viridis::cividis(n=3) , cex = 2 , alpha.regions = 0.8 , layer.name = &quot;validation&quot; , popup = leafpop::popupTable( field_uas_comparison_temp , zcol = c( &quot;field_uas_group&quot; , &quot;uas_tree_height_m&quot; , &quot;field_tree_height_m&quot; , &quot;uas_dbh_cm&quot; , &quot;field_dbh_cm&quot; ) , row.numbers = FALSE , feature.id = FALSE ) ) + # fld mapview::mapview( field_data_temp , zcol = &quot;field_tree_height_m&quot; , cex = 2 , alpha.regions = 0.8 , layer.name = &quot;field&quot; , hide = T )+ # uas mapview::mapview( uas_data_temp , zcol = &quot;tree_height_m&quot; , cex = 2 , alpha.regions = 0.8 , layer.name = &quot;uas&quot; , hide = T ) 5.7.8 Height vs. DBH of \\(Tp\\), \\(Co\\), \\(Om\\) field_uas_comparison_temp %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate( dbh_temp = dplyr::coalesce(field_dbh_cm, uas_dbh_cm) , ht_temp = dplyr::coalesce(field_tree_height_m, uas_tree_height_m) ) %&gt;% ggplot( mapping = aes(x = ht_temp, y = dbh_temp, color = field_uas_group) ) + geom_point( mapping = aes(shape = field_uas_group) , alpha=0.8 , size=2 ) + scale_color_viridis_d(option = &quot;cividis&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + scale_y_continuous(breaks = scales::extended_breaks(n=8)) + labs( color = &quot;detection&quot; , shape = &quot;detection&quot; , y = &quot;DBH (cm)&quot; , x = &quot;Tree Ht. (m)&quot; , title = &quot;UAS and Stem-Mapped Tree Validation Summary&quot; , subtitle = &quot;height and DBH relationship&quot; ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_blank() ) + guides( color = guide_legend(reverse = T, override.aes = list(alpha = 0.9, size = 5)) , shape = guide_legend(reverse = T) ) 5.7.9 Height and DBH Distribution \\(Tp\\), \\(Co\\), \\(Om\\) field_uas_comparison_temp %&gt;% sf::st_drop_geometry() %&gt;% dplyr::mutate( dbh = dplyr::coalesce(field_dbh_cm, uas_dbh_cm) , height = dplyr::coalesce(field_tree_height_m, uas_tree_height_m) ) %&gt;% dplyr::select(dbh, height, field_uas_group) %&gt;% tidyr::pivot_longer(cols = -c(field_uas_group), names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% dplyr::group_by(field_uas_group,metric) %&gt;% dplyr::mutate( metric = dplyr::case_when( metric == &quot;dbh&quot; ~ &quot;DBH (cm)&quot; , metric == &quot;height&quot; ~ &quot;Height (m)&quot; ) , n_rows = dplyr::n() , plot_lab = paste0( field_uas_group ,&quot; (n=&quot;, scales::comma(n_rows,accuracy=1),&quot;)&quot; ) ) %&gt;% ggplot(mapping = aes(x = value, y = plot_lab, fill = field_uas_group)) + geom_violin() + geom_boxplot(width = 0.1, outlier.shape = NA, color = &quot;gray66&quot;) + facet_grid(cols = vars(metric), scales = &quot;free_x&quot;) + scale_fill_viridis_d(option = &quot;cividis&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( fill = &quot;&quot; , y = &quot;&quot; , x = &quot;&quot; , title = &quot;UAS and Stem-Mapped Tree Validation Summary&quot; , subtitle = &quot;height and DBH distribution comparison&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;, hjust = 0) , strip.text = element_text(color = &quot;black&quot;, size = 12) , strip.background = element_rect(fill = &quot;gray88&quot;) ) 5.7.10 Detected Overstory (\\(TP\\)) Height Difference Detected overstory tree (\\(TP\\)) height reliability. field_uas_comparison_temp %&gt;% sf::st_drop_geometry() %&gt;% dplyr::filter(field_uas_group == &quot;true positive&quot;) %&gt;% dplyr::group_by(field_uas_group) %&gt;% dplyr::mutate( plot_lab = paste0( field_uas_group ,&quot; (n=&quot;, scales::comma(dplyr::n(),accuracy=1),&quot;)&quot; ) , med = median(height_diff_pct, na.rm=T) , color_box = med&lt;0 ) %&gt;% ggplot(mapping = aes(x = height_diff_pct)) + # height_diff_pct # ggplot(mapping = aes(x = height_diff_pct, y = plot_lab )) + # height_diff_pct geom_vline(xintercept = 0, color = &quot;gray22&quot;, lwd = 1) + # geom_boxplot(mapping = aes(fill = color_box), alpha = 0.8, width = 0.7, outlier.shape = NA) + geom_density(mapping = aes(fill = color_box), alpha = 0.8) + geom_vline(aes(xintercept = med), color = &quot;gray66&quot;, linetype = &quot;dashed&quot;) + # ymin = -Inf, ymax = Inf geom_text( aes(x = med, y = 0, label = paste0(&quot;median: &quot;,scales::percent(med, accuracy = 0.1))) , hjust = -0.1, vjust = 1 ) + scale_fill_manual(values = c(&quot;steelblue&quot;, &quot;coral&quot;)) + scale_x_continuous( labels = scales::percent_format() , breaks = scales::extended_breaks(n=8) , limits = c( -max(field_uas_comparison_temp$abs_height_diff_pct, na.rm = T) , max(field_uas_comparison_temp$abs_height_diff_pct, na.rm = T) ) ) + scale_y_continuous(NULL, breaks = NULL) + labs( fill = &quot;&quot; , y = &quot;&quot; , x = &quot;Percent Difference in Height&quot; , title = &quot;Detected Overstory Height Difference&quot; , caption = &quot;-values = UAS&lt;field | +values = UAS&gt;field&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;, hjust = 0) ) 5.7.11 Detected Overstory (\\(TP\\)) DBH Difference Detected overstory tree (\\(TP\\)) DBH reliability. field_uas_comparison_temp %&gt;% sf::st_drop_geometry() %&gt;% dplyr::filter(field_uas_group == &quot;true positive&quot;) %&gt;% dplyr::group_by(field_uas_group) %&gt;% dplyr::mutate( plot_lab = paste0( field_uas_group ,&quot; (n=&quot;, scales::comma(dplyr::n(),accuracy=1),&quot;)&quot; ) , med = median(dbh_diff_pct, na.rm=T) , color_box = med&lt;0 ) %&gt;% ggplot(mapping = aes(x = dbh_diff_pct)) + # height_diff_pct geom_vline(xintercept = 0, color = &quot;gray22&quot;, lwd = 1) + geom_density(mapping = aes(fill = color_box), alpha = 0.8) + geom_vline(aes(xintercept = med), color = &quot;gray66&quot;, linetype = &quot;dashed&quot;) + # ymin = -Inf, ymax = Inf geom_text( aes(x = med, y = 0, label = paste0(&quot;median: &quot;,scales::percent(med, accuracy = 0.1))) , hjust = -0.1, vjust = 1 ) + scale_fill_manual(values = c(&quot;steelblue&quot;, &quot;coral&quot;)) + scale_x_continuous( labels = scales::percent_format() , breaks = scales::extended_breaks(n=8) , limits = c(-2,2) ) + scale_y_continuous(NULL, breaks = NULL) + labs( fill = &quot;&quot; , y = &quot;&quot; , x = &quot;Percent Difference in DBH&quot; , title = &quot;Detected Overstory DBH Difference&quot; , caption = &quot;-values = UAS&lt;field | +values = UAS&gt;field&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.title.x = element_text(size=10, face = &quot;bold&quot;) , axis.title.y = element_blank() , axis.text.y = element_text(color = &quot;black&quot;,size=10, face = &quot;bold&quot;, hjust = 0) ) 5.7.11.1 Detected Overstory (\\(TP\\)) Reliability dbh_f_temp = field_uas_comparison_temp %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% dplyr::pull(field_dbh_cm) dbh_u_temp = field_uas_comparison_temp %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% dplyr::pull(uas_dbh_cm) ht_f_temp = field_uas_comparison_temp %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% dplyr::pull(field_tree_height_m) ht_u_temp = field_uas_comparison_temp %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% dplyr::pull(uas_tree_height_m) data.frame( mae_dbh = Metrics::mae( dbh_f_temp , dbh_u_temp ) , mape_dbh = Metrics::mape( dbh_f_temp , dbh_u_temp ) , rmse_dbh = Metrics::rmse( dbh_f_temp , dbh_u_temp ) ## height , mae_height = Metrics::mae( ht_f_temp , ht_u_temp ) , mape_height = Metrics::mape( ht_f_temp , ht_u_temp ) , rmse_height = Metrics::rmse( ht_f_temp , ht_u_temp ) ) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% tidyr::separate_wider_delim(cols = name, delim = &quot;_&quot;, names = c(&quot;error&quot;, &quot;metric&quot;)) %&gt;% tidyr::pivot_wider(names_from = error, values_from = value) %&gt;% dplyr::mutate( metric = dplyr::case_when( metric == &quot;dbh&quot; ~ &quot;DBH (cm)&quot; , metric == &quot;height&quot; ~ &quot;Height (m)&quot; ) , n = field_uas_comparison_temp %&gt;% dplyr::filter(field_uas_group==&quot;true positive&quot;) %&gt;% nrow() ) %&gt;% kableExtra::kbl( caption = &quot;Detected overstory tree height and DBH prediction performance&quot; , col.names = c( &quot; &quot; , &quot;Mean Abs. Error&quot; , &quot;Mean Abs. Percent Error&quot; , &quot;Root Mean Squared Error&quot; , &quot;N&quot; ) , digits = 2 ) %&gt;% kableExtra::kable_styling() Table 5.1: Detected overstory tree height and DBH prediction performance Mean Abs. Error Mean Abs. Percent Error Root Mean Squared Error N DBH (cm) 7.46 0.67 8.95 227 Height (m) 0.56 0.07 0.73 227 5.8 Mapped validation for all sites Above, we reviewed the process for matching field mapped trees to UAS detected trees to determine true positive (TP) detections, commission (Co), and omission (Om) trees. Here, we visualize the location of the classified trees for each study site. We’re only going to use point clouds generated via Metashape with the “high” point cloud generation quality setting and the “mild” filtering setting. 5.8.1 Plotting Function Let’s define a plotting function to map sites over plt_validation_fn = function(my_site = study_site_list[1]){ ############################################ # validation plot boundary ############################################ plot_bound_temp = validation_plots %&gt;% dplyr::filter(study_site==my_site) ############################################ # field data ############################################ field_data_temp = read_field_data(my_study_site = my_site) ############################################ # orthomosaic ############################################ ortho_list = list.files( &quot;../data/field_validation/orthomosaic/&quot; , pattern = &quot;.*\\\\.(tif|tiff)$&quot; , full.names = T ) # load raster ortho_rast = ortho_list %&gt;% purrr::pluck( ortho_list %&gt;% toupper() %&gt;% stringr::str_which(pattern = my_site) %&gt;% .[1] ) %&gt;% terra::rast() # aggregate to lower resolution if needed if(terra::res(ortho_rast)[1]&lt;0.5){ ortho_rast = terra::aggregate( ortho_rast , fact = round(0.5/terra::res(ortho_rast)[1]) , fun = &quot;median&quot; , cores = round(parallel::detectCores()/2) ) } # convert to stars ortho_st = ortho_rast %&gt;% terra::subset(subset = c(1,2,3)) %&gt;% terra::crop( # stand %&gt;% plot_bound_temp %&gt;% sf::st_buffer(2) %&gt;% sf::st_bbox() %&gt;% sf::st_as_sfc() %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) ) %&gt;% stars::st_as_stars() # convert to rgb ortho_rgb = stars::st_rgb( ortho_st[,,,1:3] , dimension = 3 , use_alpha = FALSE # , stretch = &quot;histogram&quot; , probs = c(0.005, 0.995) , stretch = &quot;percent&quot; ) ############################################ # load validation data ftw ############################################ field_uas_comparison_temp = ptcld_validation_data %&gt;% dplyr::filter( study_site == my_site &amp; tolower(software) == &quot;metashape&quot; &amp; tolower(depth_maps_generation_quality) == &quot;high&quot; &amp; tolower(depth_maps_generation_filtering_mode) == &quot;mild&quot; ) %&gt;% dplyr::pull(validation_file_full_path) %&gt;% readr::read_csv() %&gt;% dplyr::mutate( field_uas_group = factor( field_uas_group , ordered = T , levels = c( &quot;true positive&quot; , &quot;commission&quot; , &quot;omission&quot; ) ) %&gt;% forcats::fct_rev() , overstory_understory_grp = overstory_understory_grp %&gt;% factor() , x = ifelse(!is.na(field_tree_utm_x), field_tree_utm_x, uas_tree_utm_x) , y = ifelse(!is.na(field_tree_utm_x), field_tree_utm_y, uas_tree_utm_y) ) %&gt;% sf::st_as_sf( coords = c(&quot;x&quot;, &quot;y&quot;) , crs = sf::st_crs(field_data_temp) , remove=T ) ############################################ # plot it all ############################################ # make a label hey_lab = ptcld_validation_data %&gt;% dplyr::filter( study_site == my_site &amp; tolower(software) == &quot;metashape&quot; &amp; tolower(depth_maps_generation_quality) == &quot;high&quot; &amp; tolower(depth_maps_generation_filtering_mode) == &quot;mild&quot; ) %&gt;% dplyr::mutate( hey_lab = paste0( &quot;true positive: &quot;, scales::comma(true_positive_n_trees, accuracy = 1) , &quot;\\ncommission: &quot;, scales::comma(commission_n_trees, accuracy = 1) , &quot;\\nomission: &quot;, scales::comma(omission_n_trees, accuracy = 1) , &quot;\\n(F-score: &quot;, scales::comma(f_score, accuracy = 0.01), &quot;)&quot; ) ) %&gt;% dplyr::pull(hey_lab) # ggplot rgb plt_rgb = ggplot() + stars::geom_stars(data = ortho_rgb[]) + scale_fill_identity(na.value = &quot;transparent&quot;) + # !!! don&#39;t take this out or RGB plot will kill your computer # add plot boundary geom_sf( data = plot_bound_temp %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , alpha = 0 , lwd = 1.2 , color = &quot;blue&quot; ) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + labs( x = &quot;&quot; , y = &quot;&quot; ) + theme_void() # combine plt_comparison_temp = plt_rgb + ggnewscale::new_scale_fill() + geom_sf( data = field_uas_comparison_temp %&gt;% terra::vect() %&gt;% terra::project(terra::crs(ortho_rast)) %&gt;% sf::st_as_sf() , mapping = aes(fill = field_uas_group) , color = &quot;black&quot; , shape = 21 , size = 1.4 ) + scale_fill_viridis_d(option = &quot;cividis&quot;, name = &quot;trees&quot;, drop = F, alpha = 0.8) + labs( title = paste0(&quot;plot: &quot;, my_site) , subtitle = hey_lab ) + theme(legend.position = &quot;bottom&quot;, legend.direction = &quot;horizontal&quot;) # return return(plt_comparison_temp) } # plt_validation_fn(study_site_list[5]) apply the function hey_list_temp = study_site_list %&gt;% purrr::map(plt_validation_fn) 5.8.2 Validation Maps hey_list_temp ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] 5.8.3 Validation Maps Combined # combine patchwork::wrap_plots(hey_list_temp, ncol = 2, guides = &quot;collect&quot;) &amp; theme(legend.position=&quot;bottom&quot;, legend.direction = &quot;horizontal&quot;, plot.title = element_text(size = 8), plot.subtitle = element_text(size = 7)) 5.9 Field Data Descriptive Statistics Load and combine all field data sets field_data = study_site_list %&gt;% purrr::map(function(x){ read_field_data(x) %&gt;% sf::st_drop_geometry() }) %&gt;% dplyr::bind_rows() %&gt;% dplyr::left_join( validation_plots %&gt;% dplyr::mutate(ha = sf::st_area(.) %&gt;% as.numeric() %&gt;% `/`(10000)) %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(study_site, ha) , by = dplyr::join_by(&quot;study_site&quot;) ) 5.9.1 Table of Height Summary Statistics field_data %&gt;% dplyr::group_by(study_site,ha) %&gt;% dplyr::summarise( n_trees = dplyr::n() , min_tree_height_m = min(field_tree_height_m, na.rm = T) , max_tree_height_m = max(field_tree_height_m, na.rm = T) , median_tree_height_m = median(field_tree_height_m, na.rm = T) , tree_height_m_25 = quantile(field_tree_height_m, probs = 0.25) , tree_height_m_75 = quantile(field_tree_height_m, probs = 0.75) ) %&gt;% dplyr::mutate( tph = (n_trees/ha) %&gt;% scales::comma(accuracy = 1) , n_trees = n_trees %&gt;% scales::comma(accuracy = 1) ) %&gt;% dplyr::relocate(tph, .after = n_trees) %&gt;% dplyr::select(-c(ha)) %&gt;% kableExtra::kbl( caption = &quot;Field Data: Table of Height Summary Statistics&quot; , col.names = c( &quot;Site&quot; , &quot;# trees&quot; , &quot;TPH&quot; , &quot;Minimum&quot; , &quot;Maximum&quot; , &quot;Median&quot; , &quot;25th percentile&quot; , &quot;75th percentile&quot; ) , digits = 1 ) %&gt;% kableExtra::add_header_above( c( &quot; &quot; = 3 , &quot;Tree Height (meters)&quot;=5 ) ) %&gt;% kableExtra::kable_styling() Table 5.2: Field Data: Table of Height Summary Statistics Tree Height (meters) Site # trees TPH Minimum Maximum Median 25th percentile 75th percentile KAIBAB_HIGH 1,001 574 2.1 32.3 11.8 6.8 17.9 KAIBAB_LOW 510 247 2.1 34.7 9.3 4.9 19.9 N1 1,012 639 2.0 26.6 4.9 2.9 14.1 SQ09_02 309 308 2.1 20.7 12.6 7.1 14.7 WA85_02 172 172 2.2 22.9 18.4 10.2 19.9 5.9.2 Table of DBH Summary Statistics field_data %&gt;% dplyr::group_by(study_site,ha) %&gt;% dplyr::summarise( n_trees = dplyr::n() , min_dbh_cm = min(field_dbh_cm, na.rm = T) , max_dbh_cm = max(field_dbh_cm, na.rm = T) , median_dbh_cm = median(field_dbh_cm, na.rm = T) , dbh_cm_25 = quantile(field_dbh_cm, probs = 0.25) , dbh_cm_75 = quantile(field_dbh_cm, probs = 0.75) ) %&gt;% dplyr::mutate( tph = (n_trees/ha) %&gt;% scales::comma(accuracy = 1) , n_trees = n_trees %&gt;% scales::comma(accuracy = 1) ) %&gt;% dplyr::relocate(tph, .after = n_trees) %&gt;% dplyr::select(-c(ha)) %&gt;% kableExtra::kbl( caption = &quot;Field Data: Table of DBH Summary Statistics&quot; , col.names = c( &quot;Site&quot; , &quot;# trees&quot; , &quot;TPH&quot; , &quot;Minimum&quot; , &quot;Maximum&quot; , &quot;Median&quot; , &quot;25th percentile&quot; , &quot;75th percentile&quot; ) , digits = 1 ) %&gt;% kableExtra::add_header_above( c( &quot; &quot; = 3 , &quot;Tree DBH (cm)&quot;=5 ) ) %&gt;% kableExtra::kable_styling() Table 5.3: Field Data: Table of DBH Summary Statistics Tree DBH (cm) Site # trees TPH Minimum Maximum Median 25th percentile 75th percentile KAIBAB_HIGH 1,001 574 1.8 106.7 18.8 11.2 32.5 KAIBAB_LOW 510 247 1.5 86.4 20.3 10.0 41.7 N1 1,012 639 1.0 63.2 7.1 3.3 25.7 SQ09_02 309 308 1.0 41.4 21.6 15.0 25.4 WA85_02 172 172 2.3 53.1 36.1 24.8 39.6 5.9.3 Height and DBH Distribution field_data %&gt;% dplyr::select(study_site, field_dbh_cm, field_tree_height_m) %&gt;% # tidyr::pivot_longer( cols = -c(study_site) ) %&gt;% dplyr::mutate( name = dplyr::case_when( name == &quot;field_dbh_cm&quot; ~ &quot;DBH (cm)&quot; , name == &quot;field_tree_height_m&quot; ~ &quot;Height (m)&quot; , T ~ &quot;error&quot; ) ) %&gt;% # plot ggplot(mapping = aes(x = value, y = study_site)) + geom_violin(mapping = aes(fill = name), color = NA) + geom_boxplot(width = 0.1, outlier.shape = NA, fill = NA, color = &quot;black&quot;) + facet_grid(cols = vars(name), scales = &quot;free_x&quot;) + scale_fill_manual(values = c(&quot;skyblue4&quot;, &quot;skyblue2&quot;)) + scale_x_continuous(breaks = scales::breaks_extended(8)) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_light() + theme(legend.position = &quot;none&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) 5.10 Summary of Dependent Variables descriptive statistics of potential dependent variables ptcld_validation_data %&gt;% dplyr::select( f_score, basal_area_pct_error, basal_area_abs_pct_error , tree_height_m_me, tree_height_m_rmse, dbh_cm_me, dbh_cm_rmse ) %&gt;% dplyr::ungroup() %&gt;% dplyr::summarise( dplyr::across( .cols = tidyselect::everything() , .fns = list( mean = ~ mean(.x, na.rm=T) , median = ~ median(.x, na.rm=T) , sd = ~ sd(.x, na.rm=T) , min = ~ min(.x, na.rm=T) , max = ~ max(.x, na.rm=T) ) , .names = &quot;{.fn}_xxx_{.col}&quot; ) , n = dplyr::n() ) %&gt;% tidyr::pivot_longer(cols = -n) %&gt;% tidyr::separate(col = name, sep = &quot;_xxx_&quot;, into = c(&quot;stat&quot;, &quot;metric&quot;)) %&gt;% # format dplyr::mutate( value = dplyr::case_when( stringr::str_detect(metric, &quot;_pct_&quot;) ~ scales::percent(value, accuracy = 0.1) , metric == &quot;f_score&quot; ~ scales::number(value, accuracy = 0.01) , T ~ scales::number(value, accuracy = 0.1) ) ) %&gt;% tidyr::pivot_wider(names_from = stat, values_from = value) %&gt;% dplyr::relocate(c(metric, n)) %&gt;% # dplyr::mutate( # range = paste0( # min, &quot; to &quot;, max # ) # ) %&gt;% # select(-c(min, max)) kableExtra::kbl( digits = 2 , caption = &quot;SfM data set summary statistics of potential dependent variable metrics&quot; ) %&gt;% kableExtra::kable_styling() Table 5.4: SfM data set summary statistics of potential dependent variable metrics metric n mean median sd min max f_score 260 0.46 0.44 0.23 0.00 0.90 basal_area_pct_error 260 -6.6% -12.2% 57.7% -100.0% 555.3% basal_area_abs_pct_error 260 33.9% 22.7% 47.0% 0.3% 555.3% tree_height_m_me 260 0.1 0.2 0.4 -1.9 0.8 tree_height_m_rmse 260 0.8 0.8 0.2 0.4 1.9 dbh_cm_me 260 3.4 1.8 7.1 -9.7 51.3 dbh_cm_rmse 260 8.6 6.9 6.4 3.2 65.8 "],["stats_validation.html", "Section 6 Statistical Analysis: Validation 6.1 Setup 6.2 Summary Statistics 6.3 One Nominal Predictor 6.4 Two Nominal Predictors 6.5 Three Nominal Predictors 6.6 Three Nominal Predictors + site effects 6.7 The beta: Three Nominal Predictors + site effects 6.8 Heterogeneous variances and robustness against outliers 6.9 Overstory and Understory Validation", " Section 6 Statistical Analysis: Validation In this section, we’ll evaluate the influence of the processing parameters on UAS-derived tree detection and monitoring. The UAS and Field validation data was built and described in this section. The objective of this study is to determine the influence of different structure from motion (SfM) software (e.g. Agisoft Metashap, OpenDroneMap, Pix4D) and processing parameters on F-score which is a measure of overall tree detection performance. All of the predictor variables of interest in this study are categorical (a.k.a. factor or nominal) while the predicted variables are metric and include F-score (ranges from 0-1) and error (e.g. MAPE, RMSE). This type of statistical analysis is described in the second edition of Kruschke’s Doing Bayesian data analysis (2015) and here we will build a Bayesian approach based on Kruschke (2015). This analysis was greatly enhanced by A. Solomon Kurz’s ebook supplement to Kruschke (2015). For a more in-depth review of the traditional treatment of this sort of data structure called multifactor analysis of variance (ANOVA) compared to the Bayesian hierarchical generalization of the traditional ANOVA model used here see this previous section. 6.1 Setup first we’re going to define a function to ingest a formula as text and separate it into multiple rows based on the number of characters for plotting # function to pull the formula for labeling below get_frmla_text = function(frmla_chr, split_chrs = 100){ cumsum_group = function(x, threshold) { cumsum = 0 group = 1 result = numeric() for (i in 1:length(x)) { cumsum = cumsum + x[i] if (cumsum &gt; threshold) { group = group + 1 cumsum = x[i] } result = c(result, group) } return (result) } r = stringr::str_sub( frmla_chr , # get the two column matrix of start end frmla_chr %&gt;% stringr::str_locate_all(&quot;\\\\+&quot;) %&gt;% .[[1]] %&gt;% dplyr::as_tibble() %&gt;% dplyr::select(start) %&gt;% dplyr::mutate( len = dplyr::coalesce(start-dplyr::lag(start),0) , ld = dplyr::coalesce(dplyr::lead(start)-1, stringr::str_length(frmla_chr)) , cum = cumsum_group(len, split_chrs) , start = ifelse(dplyr::row_number()==1,1,start) ) %&gt;% dplyr::group_by(cum) %&gt;% dplyr::summarise(start = min(start), end = max(ld)) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(-cum) %&gt;% as.matrix() ) %&gt;% stringr::str_squish() %&gt;% paste0(collapse = &quot;\\n&quot;) return(r) } 6.2 Summary Statistics What is this data? # load data if needed if(ls()[ls() %in% &quot;ptcld_validation_data&quot;] %&gt;% length()==0){ ptcld_validation_data = readr::read_csv(&quot;../data/ptcld_full_analysis_data.csv&quot;) %&gt;% dplyr::mutate( depth_maps_generation_quality = factor( depth_maps_generation_quality %&gt;% tolower() %&gt;% stringr::str_replace_all(&quot;ultrahigh&quot;, &quot;ultra high&quot;) , ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = factor( depth_maps_generation_filtering_mode %&gt;% tolower() , ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) } # replace 0 F-score with very small positive to run models ptcld_validation_data = ptcld_validation_data %&gt;% dplyr::mutate(dplyr::across( .cols = tidyselect::ends_with(&quot;f_score&quot;) , .fns = ~ ifelse(.x==0,1e-4,.x) )) # what is this data? ptcld_validation_data %&gt;% dplyr::glimpse() ## Rows: 260 ## Columns: 114 ## $ tracking_file_full_path &lt;chr&gt; &quot;D:\\\\SfM_Software_Comparison\\\\Me… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METAS… ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;K… ## $ processing_attribute1 &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, … ## $ processing_attribute2 &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;, &quot;MILD&quot;… ## $ processing_attribute3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH_DISABLE… ## $ number_of_points &lt;int&gt; 52974294, 72549206, 69858217, 69… ## $ las_area_m2 &lt;dbl&gt; 86661.27, 87175.42, 86404.78, 86… ## $ timer_tile_time_mins &lt;dbl&gt; 0.63600698, 2.49318542, 0.841338… ## $ timer_class_dtm_norm_chm_time_mins &lt;dbl&gt; 3.6559556, 5.3289152, 5.1638296,… ## $ timer_treels_time_mins &lt;dbl&gt; 8.9065272, 19.2119663, 12.339179… ## $ timer_itd_time_mins &lt;dbl&gt; 0.02202115, 0.02449968, 0.037984… ## $ timer_competition_time_mins &lt;dbl&gt; 0.10590740, 0.17865245, 0.121248… ## $ timer_estdbh_time_mins &lt;dbl&gt; 0.02290262, 0.02382533, 0.021991… ## $ timer_silv_time_mins &lt;dbl&gt; 0.012565533, 0.015940932, 0.0150… ## $ timer_total_time_mins &lt;dbl&gt; 13.361886, 27.276985, 18.540606,… ## $ sttng_input_las_dir &lt;chr&gt; &quot;D:/Metashape_Testing_2024&quot;, &quot;D:… ## $ sttng_use_parallel_processing &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALS… ## $ sttng_desired_chm_res &lt;dbl&gt; 0.25, 0.25, 0.25, 0.25, 0.25, 0.… ## $ sttng_max_height_threshold_m &lt;int&gt; 60, 60, 60, 60, 60, 60, 60, 60, … ## $ sttng_minimum_tree_height_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_dbh_max_size_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_local_dbh_model &lt;chr&gt; &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;r… ## $ sttng_user_supplied_epsg &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ sttng_accuracy_level &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_pts_m2_for_triangulation &lt;int&gt; 20, 20, 20, 20, 20, 20, 20, 20, … ## $ sttng_normalization_with &lt;chr&gt; &quot;triangulation&quot;, &quot;triangulation&quot;… ## $ sttng_competition_buffer_m &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, low, low… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, disabled, mild, mode… ## $ total_sfm_time_min &lt;dbl&gt; 54.800000, 60.316667, 55.933333,… ## $ number_of_points_sfm &lt;dbl&gt; 52974294, 72549206, 69858217, 69… ## $ total_sfm_time_norm &lt;dbl&gt; 0.1117823680, 0.1237564664, 0.11… ## $ processed_data_dir &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ processing_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1… ## $ true_positive_n_trees &lt;dbl&gt; 229, 261, 260, 234, 220, 175, 23… ## $ commission_n_trees &lt;dbl&gt; 173, 222, 213, 193, 148, 223, 16… ## $ omission_n_trees &lt;dbl&gt; 772, 740, 741, 767, 781, 826, 77… ## $ f_score &lt;dbl&gt; 0.3264433, 0.3517520, 0.3527815,… ## $ tree_height_m_me &lt;dbl&gt; 0.270336679, 0.283568790, 0.3122… ## $ tree_height_m_mpe &lt;dbl&gt; 0.002357383, 0.013286785, 0.0142… ## $ tree_height_m_mae &lt;dbl&gt; 0.7873610, 0.6886235, 0.6914983,… ## $ tree_height_m_mape &lt;dbl&gt; 0.06624939, 0.06903969, 0.060550… ## $ tree_height_m_smape &lt;dbl&gt; 0.06776453, 0.06838733, 0.060410… ## $ tree_height_m_mse &lt;dbl&gt; 0.9842433, 0.8507862, 0.8259923,… ## $ tree_height_m_rmse &lt;dbl&gt; 0.9920904, 0.9223807, 0.9088412,… ## $ dbh_cm_me &lt;dbl&gt; 9.1432719, 6.5708955, 8.4202884,… ## $ dbh_cm_mpe &lt;dbl&gt; 0.863460500, 0.815124639, 0.9569… ## $ dbh_cm_mae &lt;dbl&gt; 11.550258, 9.444397, 11.668345, … ## $ dbh_cm_mape &lt;dbl&gt; 0.9048948, 0.8693847, 1.0137530,… ## $ dbh_cm_smape &lt;dbl&gt; 0.4584621, 0.4673925, 0.5094000,… ## $ dbh_cm_mse &lt;dbl&gt; 168.34419, 113.68139, 165.40074,… ## $ dbh_cm_rmse &lt;dbl&gt; 12.974752, 10.662147, 12.860822,… ## $ uas_basal_area_m2 &lt;dbl&gt; 59.81562, 58.24249, 58.89314, 49… ## $ field_basal_area_m2 &lt;dbl&gt; 69.04409, 69.04409, 69.04409, 69… ## $ uas_basal_area_m2_per_ha &lt;dbl&gt; 34.30442, 33.40222, 33.77538, 28… ## $ field_basal_area_m2_per_ha &lt;dbl&gt; 39.59697, 39.59697, 39.59697, 39… ## $ basal_area_m2_error &lt;dbl&gt; -9.228474, -10.801601, -10.15094… ## $ basal_area_m2_per_ha_error &lt;dbl&gt; -5.2925541, -6.1947468, -5.82159… ## $ basal_area_pct_error &lt;dbl&gt; -0.13366058, -0.15644496, -0.147… ## $ basal_area_abs_pct_error &lt;dbl&gt; 0.13366058, 0.15644496, 0.147021… ## $ overstory_commission_n_trees &lt;dbl&gt; 141, 178, 178, 160, 95, 173, 120… ## $ understory_commission_n_trees &lt;dbl&gt; 32, 44, 35, 33, 53, 50, 43, 39, … ## $ overstory_omission_n_trees &lt;dbl&gt; 558, 560, 545, 556, 554, 598, 54… ## $ understory_omission_n_trees &lt;dbl&gt; 214, 180, 196, 211, 227, 228, 22… ## $ overstory_true_positive_n_trees &lt;dbl&gt; 185, 183, 198, 187, 189, 145, 19… ## $ understory_true_positive_n_trees &lt;dbl&gt; 44, 78, 62, 47, 31, 30, 33, 40, … ## $ overstory_f_score &lt;dbl&gt; 0.3461179, 0.3315217, 0.3538874,… ## $ understory_f_score &lt;dbl&gt; 0.2634731, 0.4105263, 0.3492958,… ## $ overstory_tree_height_m_me &lt;dbl&gt; 0.41693172, 0.44114110, 0.442167… ## $ understory_tree_height_m_me &lt;dbl&gt; -0.34602886, -0.08612009, -0.102… ## $ overstory_tree_height_m_mpe &lt;dbl&gt; 0.020790675, 0.024558478, 0.0241… ## $ understory_tree_height_m_mpe &lt;dbl&gt; -0.075146232, -0.013158341, -0.0… ## $ overstory_tree_height_m_mae &lt;dbl&gt; 0.8201433, 0.7820879, 0.7770369,… ## $ understory_tree_height_m_mae &lt;dbl&gt; 0.6495266, 0.4693415, 0.4183269,… ## $ overstory_tree_height_m_mape &lt;dbl&gt; 0.04662933, 0.04863237, 0.048708… ## $ understory_tree_height_m_mape &lt;dbl&gt; 0.14874284, 0.11691842, 0.098369… ## $ overstory_tree_height_m_smape &lt;dbl&gt; 0.04589942, 0.04776615, 0.047912… ## $ understory_tree_height_m_smape &lt;dbl&gt; 0.15969736, 0.11676780, 0.100322… ## $ overstory_tree_height_m_mse &lt;dbl&gt; 1.0623763, 1.0055835, 0.9739823,… ## $ understory_tree_height_m_mse &lt;dbl&gt; 0.6557300, 0.4876080, 0.3533791,… ## $ overstory_tree_height_m_rmse &lt;dbl&gt; 1.0307164, 1.0027878, 0.9869054,… ## $ understory_tree_height_m_rmse &lt;dbl&gt; 0.8097715, 0.6982893, 0.5944570,… ## $ overstory_dbh_cm_me &lt;dbl&gt; 7.12396092, 4.28187214, 5.994003… ## $ understory_dbh_cm_me &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mpe &lt;dbl&gt; 0.35551830, 0.28023813, 0.384916… ## $ understory_dbh_cm_mpe &lt;dbl&gt; 2.99912656, 2.07005068, 2.783578… ## $ overstory_dbh_cm_mae &lt;dbl&gt; 10.103420, 8.380144, 10.259129, … ## $ understory_dbh_cm_mae &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mape &lt;dbl&gt; 0.4068072, 0.3576254, 0.4595653,… ## $ understory_dbh_cm_mape &lt;dbl&gt; 2.9991266, 2.0700507, 2.7835783,… ## $ overstory_dbh_cm_smape &lt;dbl&gt; 0.3087332, 0.2849537, 0.3443392,… ## $ understory_dbh_cm_smape &lt;dbl&gt; 1.0880037, 0.8954218, 1.0365298,… ## $ overstory_dbh_cm_mse &lt;dbl&gt; 132.58061, 97.96175, 132.74645, … ## $ understory_dbh_cm_mse &lt;dbl&gt; 318.713781, 150.562072, 269.6837… ## $ overstory_dbh_cm_rmse &lt;dbl&gt; 11.514365, 9.897563, 11.521564, … ## $ understory_dbh_cm_rmse &lt;dbl&gt; 17.852557, 12.270374, 16.422052,… ## $ overstory_uas_basal_area_m2 &lt;dbl&gt; 55.94051, 54.40543, 54.41901, 46… ## $ understory_uas_basal_area_m2 &lt;dbl&gt; 3.8751084, 3.8370665, 4.4741330,… ## $ overstory_field_basal_area_m2 &lt;dbl&gt; 67.50326, 67.50326, 67.50326, 67… ## $ understory_field_basal_area_m2 &lt;dbl&gt; 1.540832, 1.540832, 1.540832, 1.… ## $ overstory_uas_basal_area_m2_per_ha &lt;dbl&gt; 32.08203, 31.20166, 31.20945, 26… ## $ understory_uas_basal_area_m2_per_ha &lt;dbl&gt; 2.22238497, 2.20056787, 2.565927… ## $ overstory_field_basal_area_m2_per_ha &lt;dbl&gt; 38.7133, 38.7133, 38.7133, 38.71… ## $ understory_field_basal_area_m2_per_ha &lt;dbl&gt; 0.883671, 0.883671, 0.883671, 0.… ## $ overstory_basal_area_m2_per_ha_error &lt;dbl&gt; -6.631268, -7.511644, -7.503852,… ## $ understory_basal_area_m2_per_ha_error &lt;dbl&gt; 1.3387140, 1.3168969, 1.6822562,… ## $ overstory_basal_area_pct_error &lt;dbl&gt; -0.17129173, -0.19403263, -0.193… ## $ understory_basal_area_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ overstory_basal_area_abs_pct_error &lt;dbl&gt; 0.17129173, 0.19403263, 0.193831… ## $ understory_basal_area_abs_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ validation_file_full_path &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ overstory_ht_m &lt;dbl&gt; 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… # a row is unique by... identical( nrow(ptcld_validation_data) , ptcld_validation_data %&gt;% dplyr::distinct( study_site, software , depth_maps_generation_quality , depth_maps_generation_filtering_mode , processing_attribute3 # need to align all by software so this will go away or be filled ) %&gt;% nrow() ) ## [1] TRUE Summary by metrics of interest sum_stats_dta = function(my_var){ sum_fns = list( n = ~sum(ifelse(is.na(.x), 0, 1)) , min = ~min(.x, na.rm = TRUE) , max = ~max(.x, na.rm = TRUE) , mean = ~mean(.x, na.rm = TRUE) , median = ~median(.x, na.rm = TRUE) , sd = ~sd(.x, na.rm = TRUE) ) # plot ( ggplot( data = ptcld_validation_data %&gt;% dplyr::group_by(.data[[my_var]]) %&gt;% dplyr::mutate(m = median(f_score)) , mapping = aes( y = .data[[my_var]] , x = f_score, fill = m) ) + geom_violin(color = NA) + geom_boxplot(width = 0.1, outlier.shape = NA, fill = NA, color = &quot;black&quot;) + geom_rug() + scale_fill_viridis_c(option = &quot;mako&quot;, begin = 0.3, end = 0.9, direction = -1) + labs( x = &quot;F-score&quot; , y = stringr::str_replace_all(my_var, pattern = &quot;_&quot;, replacement = &quot; &quot;) , subtitle = stringr::str_replace_all(my_var, pattern = &quot;_&quot;, replacement = &quot; &quot;) %&gt;% stringr::str_to_title() ) + theme_light() + theme(legend.position = &quot;none&quot;) ) # # summarize data # ( # ptcld_validation_data %&gt;% # dplyr::group_by(dplyr::across(dplyr::all_of(my_var))) %&gt;% # dplyr::summarise( # dplyr::across(f_score, sum_fns) # , .groups = &#39;drop_last&#39; # ) %&gt;% # kableExtra::kbl() %&gt;% # kableExtra::kable_styling() # ) } # sum_stats_dta(&quot;software&quot;) summarize for all variables of interest c(&quot;software&quot;, &quot;study_site&quot; , &quot;depth_maps_generation_quality&quot; , &quot;depth_maps_generation_filtering_mode&quot; ) %&gt;% purrr::map(sum_stats_dta) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] 6.3 One Nominal Predictor We’ll start by exploring the influence of the depth map generation quality parameter on the SfM-derived tree detection performance based on the F-score. 6.3.1 Summary Statistics Summary statistics by group: ptcld_validation_data %&gt;% dplyr::group_by(depth_maps_generation_quality) %&gt;% dplyr::summarise( mean_f_score = mean(f_score, na.rm = T) # , med_f_score = median(f_score, na.rm = T) , sd_f_score = sd(f_score, na.rm = T) , n = dplyr::n() ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;summary statistics: F-score by dense cloud quality&quot;) %&gt;% kableExtra::kable_styling() Table 6.1: summary statistics: F-score by dense cloud quality depth_maps_generation_quality mean_f_score sd_f_score n ultra high 0.58 0.21 55 high 0.54 0.21 55 medium 0.47 0.22 55 low 0.40 0.20 55 lowest 0.27 0.19 40 6.3.2 Bayesian Kruschke (2015) notes: The terminology, “analysis of variance,” comes from a decomposition of overall data variance into within-group variance and between-group variance (Fisher, 1925). Algebraically, the sum of squared deviations of the scores from their overall mean equals the sum of squared deviations of the scores from their respective group means plus the sum of squared deviations of the group means from the overall mean. In other words, the total variance can be partitioned into within-group variance plus between-group variance. Because one definition of the word “analysis” is separation into constituent parts, the term ANOVA accurately describes the underlying algebra in the traditional methods. That algebraic relation is not used in the hierarchical Bayesian approach presented here. The Bayesian method can estimate component variances, however. Therefore, the Bayesian approach is not ANOVA, but is analogous to ANOVA. (p. 556) and see section 19 from Kurz’s ebook supplement The metric predicted variable with one nominal predictor variable model has the form: \\[\\begin{align*} y_{i} &amp;\\sim \\operatorname{Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} &amp;= \\beta_0 + \\sum_{j=1}^{J} \\beta_{1[j]} x_{1[j]} \\bigl(i\\bigr) \\\\ \\beta_{0} &amp;\\sim \\operatorname{Normal}(0,10) \\\\ \\beta_{1[j]} &amp;\\sim \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\sigma_{\\beta_{1}} &amp;\\sim {\\sf uniform} (0,100) \\\\ \\sigma_{y} &amp;\\sim {\\sf uniform} (0,100) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\) to start, we’ll use the default brms::brm prior settings which may not match those described in the model specification above brms_f_mod1 = brms::brm( formula = f_score ~ 1 + (1 | depth_maps_generation_quality) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 4000, warmup = 2000, chains = 4 , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms_f_mod1&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod1) check the prior distributions # check priors brms::prior_summary(brms_f_mod1) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source student_t(3, 0.4, 2.5) Intercept default student_t(3, 0, 2.5) sd 0 default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default student_t(3, 0, 2.5) sigma 0 default The brms::brm model summary brms_f_mod1 %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_remove_all(&quot;b_depth_maps_generation_quality&quot;) %&gt;% stringr::str_remove_all(&quot;r_depth_maps_generation_quality&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian one nominal predictor: F-score by dense cloud quality&quot;) %&gt;% kableExtra::kable_styling() Table 6.2: Bayesian one nominal predictor: F-score by dense cloud quality parameter estimate est.error q2.5 q97.5 b_Intercept 0.46 0.08 0.29 0.65 sigma 0.21 0.01 0.19 0.23 [ultra.high,Intercept] 0.11 0.09 -0.08 0.29 [high,Intercept] 0.08 0.09 -0.12 0.25 [medium,Intercept] 0.01 0.09 -0.19 0.18 [low,Intercept] -0.05 0.09 -0.25 0.12 [lowest,Intercept] -0.17 0.09 -0.37 0.00 With the stats::coef function, we can get the group-level summaries in a “non-deflection” metric. In the model, the group means represented by \\(\\beta_{1[j]}\\) are deflections from overall baseline, such that the deflections sum to zero (see Kruschke (2015, p.554)). Summaries of the group-specific deflections are available via the brms::ranef function. stats::coef(brms_f_mod1) %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;group&quot;) %&gt;% dplyr::rename_with( .cols = -c(&quot;group&quot;) , .fn = ~ stringr::str_remove_all(.x, &quot;depth_maps_generation_quality.&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model: F-score by dense cloud quality&quot;) %&gt;% kableExtra::kable_styling() Table 6.3: brms::brm model: F-score by dense cloud quality group Estimate.Intercept Est.Error.Intercept Q2.5.Intercept Q97.5.Intercept ultra high 0.57 0.03 0.51 0.62 high 0.53 0.03 0.48 0.59 medium 0.47 0.03 0.41 0.52 low 0.40 0.03 0.35 0.46 lowest 0.28 0.03 0.22 0.35 We can look at the model noise standard deviation \\(\\sigma_y\\) # get formula form_temp = brms_f_mod1$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text() %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod1) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\sigma_y$&quot;) , caption = form_temp ) + theme_light() plot the posterior predictive distributions of the conditional means with the median F-score and the 95% highest posterior density interval (HDI) ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms_f_mod1) %&gt;% dplyr::mutate(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) we can also make pairwise comparisons # first we need to define the contrasts to make contrast_list = tidyr::crossing( x1 = unique(ptcld_validation_data$depth_maps_generation_quality) , x2 = unique(ptcld_validation_data$depth_maps_generation_quality) ) %&gt;% dplyr::mutate( dplyr::across( dplyr::everything() , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) ) %&gt;% dplyr::filter(x1&lt;x2) %&gt;% dplyr::arrange(x1,x2) %&gt;% dplyr::mutate(dplyr::across(dplyr::everything(), as.character)) %&gt;% purrr::transpose() # contrast_list # obtain posterior draws and calculate contrasts using tidybayes::compare_levels brms_contrast_temp = brms_f_mod1 %&gt;% tidybayes::spread_draws(r_depth_maps_generation_quality[depth_maps_generation_quality]) %&gt;% dplyr::mutate( depth_maps_generation_quality = depth_maps_generation_quality %&gt;% stringr::str_replace_all(&quot;\\\\.&quot;, &quot; &quot;) %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_quality) , ordered = T ) ) %&gt;% dplyr::rename(value = r_depth_maps_generation_quality) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) # generate the contrast column for creating an ordered factor brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = depth_maps_generation_quality , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$depth_maps_generation_quality, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = depth_maps_generation_quality %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) # median_hdi summary for coloring brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% dplyr::mutate( # get median_hdi median_hdi_est = tidybayes::median_hdi(value)$y , median_hdi_lower = tidybayes::median_hdi(value)$ymin , median_hdi_upper = tidybayes::median_hdi(value)$ymax # check probability that this direction is true , is_gt_zero = dplyr::case_when( median_hdi_est &gt; 0 ~ value &gt; 0 , median_hdi_est &lt; 0 ~ value &lt; 0 ) , pct_gt_zero = mean(is_gt_zero) # make a label , pct_gt_zero_lab = dplyr::case_when( median_hdi_est &gt; 0 ~ paste0( &quot;Pr(&quot; , stringr::word(contrast, 1, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;&gt;&quot; , stringr::word(contrast, 2, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) , median_hdi_est &lt; 0 ~ paste0( &quot;Pr(&quot; , stringr::word(contrast, 2, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;&gt;&quot; , stringr::word(contrast, 1, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) ) # make a SMALLER label , pct_gt_zero_lab_sm = dplyr::case_when( median_hdi_est &gt;= 0 ~ paste0( &quot;Pr(&gt;0)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) , median_hdi_est &lt; 0 ~ paste0( &quot;Pr(&lt;0)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) ) , pct_gt_zero_lab_pos = dplyr::case_when( median_hdi_est &gt; 0 ~ median_hdi_upper , median_hdi_est &lt; 0 ~ median_hdi_lower ) * 1.09 , sig_level = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) # what? brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% dplyr::count(contrast, median_hdi_est, pct_gt_zero_lab,pct_gt_zero_lab_sm) ## # A tibble: 10 × 5 ## contrast median_hdi_est pct_gt_zero_lab pct_gt_zero_lab_sm n ## &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 ultra high - high 0.0370 Pr(ultra high&gt;hi… Pr(&gt;0)=83% 8000 ## 2 ultra high - medium 0.105 Pr(ultra high&gt;me… Pr(&gt;0)=100% 8000 ## 3 ultra high - low 0.165 Pr(ultra high&gt;lo… Pr(&gt;0)=100% 8000 ## 4 ultra high - lowest 0.287 Pr(ultra high&gt;lo… Pr(&gt;0)=100% 8000 ## 5 high - medium 0.0670 Pr(high&gt;medium)=… Pr(&gt;0)=95% 8000 ## 6 high - low 0.128 Pr(high&gt;low)=100% Pr(&gt;0)=100% 8000 ## 7 high - lowest 0.250 Pr(high&gt;lowest)=… Pr(&gt;0)=100% 8000 ## 8 medium - low 0.0607 Pr(medium&gt;low)=9… Pr(&gt;0)=95% 8000 ## 9 medium - lowest 0.183 Pr(medium&gt;lowest… Pr(&gt;0)=100% 8000 ## 10 low - lowest 0.121 Pr(low&gt;lowest)=1… Pr(&gt;0)=100% 8000 plot it # plot, finally brms_contrast_temp %&gt;% ggplot(aes(x = value, y = contrast, fill = pct_gt_zero)) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;) + geom_text( data = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% dplyr::count(contrast, pct_gt_zero_lab, pct_gt_zero_lab_pos, pct_gt_zero) , mapping = aes(x = pct_gt_zero_lab_pos, label = pct_gt_zero_lab) , vjust = -1, hjust = 0, size = 2.5 ) + scale_fill_fermenter( n.breaks = 10, palette = &quot;PuOr&quot; , direction = 1 , limits = c(0,1) , labels = scales::percent ) + scale_x_continuous(breaks = scales::extended_breaks(n=8), expand = expansion(mult = c(0.1,0.2))) + labs( y = &quot;quality&quot; , x = &quot;constrast (F-score)&quot; , fill = &quot;Pr(contrast)&quot; , subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI&quot; , caption = form_temp ) + theme_light() + theme( legend.text = element_text(size = 7) , legend.title = element_text(size = 8) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(12, &quot;lines&quot;) ))) and summarize these contrasts # # can also use the following as substitute for the &quot;tidybayes::spread_draws&quot; used above to get same result brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% select(-c(.point,.interval, .width)) %&gt;% dplyr::arrange(desc(contrast)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts in F-score&quot; , col.names = c( &quot;quality contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.4: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts in F-score quality contrast difference (F-score) HDI low HDI high low - lowest 0.12 0.04 0.21 medium - lowest 0.18 0.10 0.27 medium - low 0.06 -0.02 0.13 high - lowest 0.25 0.16 0.33 high - low 0.13 0.05 0.20 high - medium 0.07 -0.01 0.15 ultra high - lowest 0.29 0.20 0.37 ultra high - low 0.16 0.09 0.24 ultra high - medium 0.10 0.03 0.18 ultra high - high 0.04 -0.04 0.11 Before we move on to the next section, look above at how many arguments we fiddled with to configure our tidybayes::stat_halfeye() plot. Given how many more contrast plots we have looming in our not-too-distant future, we might go ahead and save these settings as a new function. We’ll call it plt_contrast(). plt_contrast &lt;- function( my_data , x = &quot;value&quot; , y = &quot;contrast&quot; , fill = &quot;pct_gt_zero&quot; , label = &quot;pct_gt_zero_lab&quot; , label_pos = &quot;pct_gt_zero_lab_pos&quot; , label_size = 3 , x_expand = c(0.1, 0.1) , facet = NA , y_axis_title = &quot;&quot; , caption_text = &quot;&quot; # form_temp , annotate_size = 2.2 ) { # df for annotation get_annotation_df &lt;- function( my_text_list = c( &quot;Bottom Left (h0,v0)&quot;,&quot;Top Left (h0,v1)&quot; ,&quot;Bottom Right h1,v0&quot;,&quot;Top Right h1,v1&quot; ) , hjust = c(0,0,1,1) # higher values = right, lower values = left , vjust = c(0,1.3,0,1.3) # higher values = down, lower values = up ){ df = data.frame( xpos = c(-Inf,-Inf,Inf,Inf) , ypos = c(-Inf, Inf,-Inf,Inf) , annotate_text = my_text_list , hjustvar = hjust , vjustvar = vjust ) return(df) } # plot plt = my_data %&gt;% ggplot(aes(x = .data[[x]], y = .data[[y]])) + geom_vline(xintercept = 0, linetype = &quot;solid&quot;, color = &quot;gray33&quot;, lwd = 1.1) + tidybayes::stat_halfeye( mapping = aes(fill = .data[[fill]]) , point_interval = median_hdi, .width = c(0.5,0.95) # , slab_fill = &quot;gray22&quot;, slab_alpha = 1 , interval_color = &quot;black&quot;, point_color = &quot;black&quot;, point_fill = &quot;black&quot; , point_size = 0.9 , justification = -0.01 ) + geom_text( data = get_annotation_df( my_text_list = c( &quot;&quot;,&quot;L.H.S. &lt; R.H.S.&quot; ,&quot;&quot;,&quot;L.H.S. &gt; R.H.S.&quot; ) ) , mapping = aes( x = xpos, y = ypos , hjust = hjustvar, vjust = vjustvar , label = annotate_text , fontface = &quot;bold&quot; ) , size = annotate_size , color = &quot;gray30&quot; # &quot;#2d2a4d&quot; #&quot;#204445&quot; ) + # scale_fill_fermenter( # n.breaks = 5 # 10 use 10 if can go full range 0-1 # , palette = &quot;PuOr&quot; # &quot;RdYlBu&quot; # , direction = 1 # , limits = c(0.5,1) # use c(0,1) if can go full range 0-1 # , labels = scales::percent # ) + scale_fill_stepsn( n.breaks = 5 # 10 use 10 if can go full range 0-1 , colors = RColorBrewer::brewer.pal(11,&quot;PuOr&quot;)[c(3,4,8,10,11)] , limits = c(0.5,1) # use c(0,1) if can go full range 0-1 , labels = scales::percent ) + scale_x_continuous(expand = expansion(mult = x_expand)) + labs( y = y_axis_title , x = &quot;constrast (F-score)&quot; , fill = &quot;Pr(contrast)&quot; , subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI&quot; , caption = caption_text ) + theme_light() + theme( legend.text = element_text(size = 7) , legend.title = element_text(size = 8) , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1.05) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(12, &quot;lines&quot;) ))) # return facet or not if(max(is.na(facet))==0){ return( plt + geom_text( data = my_data %&gt;% dplyr::filter(pct_gt_zero_lab_pos&gt;=0) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(tidyselect::all_of(c( y , fill , label , label_pos , facet ))) %&gt;% dplyr::distinct() , mapping = aes(x = .data[[label_pos]], label = .data[[label]]) , vjust = -1, hjust = 0, size = label_size ) + geom_text( data = my_data %&gt;% dplyr::filter(pct_gt_zero_lab_pos&lt;0) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(tidyselect::all_of(c( y , fill , label , label_pos , facet ))) %&gt;% dplyr::distinct() , mapping = aes(x = .data[[label_pos]], label = .data[[label]]) , vjust = -1, hjust = +1, size = label_size ) + facet_grid(cols = vars(.data[[facet]])) ) } else{ return( plt + geom_text( data = my_data %&gt;% dplyr::filter(pct_gt_zero_lab_pos&gt;=0) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(tidyselect::all_of(c( y , fill , label , label_pos ))) %&gt;% dplyr::distinct() , mapping = aes(x = .data[[label_pos]], label = .data[[label]]) , vjust = -1, hjust = 0, size = label_size )+ geom_text( data = my_data %&gt;% dplyr::filter(pct_gt_zero_lab_pos&lt;0) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(tidyselect::all_of(c( y , fill , label , label_pos ))) %&gt;% dplyr::distinct() , mapping = aes(x = .data[[label_pos]], label = .data[[label]]) , vjust = -1, hjust = +1, size = label_size ) ) } } # plt_contrast(brms_contrast_temp, label = &quot;pct_gt_zero_lab_sm&quot;) We’ll also create a function to create all of the probability labeling columns in the contrast data called make_contrast_vars() Note, here we use tidybayes::median_hdci() to avoid potential for returning multiple rows by group if our data is grouped. See the documentation for the ggdist package which notes that “If the distribution is multimodal, hdi may return multiple intervals for each probability level (these will be spread over rows).” make_contrast_vars = function(my_data){ my_data %&gt;% dplyr::mutate( # get median_hdi median_hdi_est = tidybayes::median_hdci(value)$y , median_hdi_lower = tidybayes::median_hdci(value)$ymin , median_hdi_upper = tidybayes::median_hdci(value)$ymax # check probability that this direction is true , is_gt_zero = dplyr::case_when( median_hdi_est &gt; 0 ~ value &gt; 0 , median_hdi_est &lt; 0 ~ value &lt; 0 ) , pct_gt_zero = mean(is_gt_zero) # make a label , pct_gt_zero_lab = dplyr::case_when( median_hdi_est &gt; 0 ~ paste0( &quot;Pr(&quot; , stringr::word(contrast, 1, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;&gt;&quot; , stringr::word(contrast, 2, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) , median_hdi_est &lt; 0 ~ paste0( &quot;Pr(&quot; , stringr::word(contrast, 2, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;&gt;&quot; , stringr::word(contrast, 1, sep = fixed(&quot;-&quot;)) %&gt;% stringr::str_squish() , &quot;)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) ) %&gt;% stringr::str_replace_all(&quot;OPENDRONEMAP&quot;, &quot;ODM&quot;) %&gt;% stringr::str_replace_all(&quot;METASHAPE&quot;, &quot;MtaShp&quot;) %&gt;% stringr::str_replace_all(&quot;PIX4D&quot;, &quot;Pix4D&quot;) # make a SMALLER label , pct_gt_zero_lab_sm = dplyr::case_when( median_hdi_est &gt;= 0 ~ paste0( &quot;Pr(&gt;0)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) , median_hdi_est &lt; 0 ~ paste0( &quot;Pr(&lt;0)=&quot; , pct_gt_zero %&gt;% scales::percent(accuracy = 1) ) ) , pct_gt_zero_lab_pos = dplyr::case_when( median_hdi_est &gt; 0 ~ median_hdi_upper , median_hdi_est &lt; 0 ~ median_hdi_lower ) * 1.075 , sig_level = dplyr::case_when( pct_gt_zero &gt; 0.99 ~ 0 , pct_gt_zero &gt; 0.95 ~ 1 , pct_gt_zero &gt; 0.9 ~ 2 , pct_gt_zero &gt; 0.8 ~ 3 , T ~ 4 ) %&gt;% factor(levels = c(0:4), labels = c(&quot;&gt;99%&quot;,&quot;95%&quot;,&quot;90%&quot;,&quot;80%&quot;,&quot;&lt;80%&quot;), ordered = T) ) } # brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% make_contrast_vars() %&gt;% dplyr::glimpse() 6.4 Two Nominal Predictors Now, we’ll determine the combined influence of the depth map generation quality and the depth map filtering parameters on the SfM-derived tree detection performance based on the F-score. 6.4.1 Summary Statistics Summary statistics by group: ptcld_validation_data %&gt;% dplyr::group_by(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::summarise( mean_f_score = mean(f_score, na.rm = T) # , med_f_score = median(f_score, na.rm = T) , sd_f_score = sd(f_score, na.rm = T) , n = dplyr::n() ) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;summary statistics: F-score by dense cloud quality and filtering mode&quot; , col.names = c( &quot;quality&quot; , &quot;filtering mode&quot; , &quot;mean F-score&quot; , &quot;sd&quot; , &quot;n&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.5: summary statistics: F-score by dense cloud quality and filtering mode quality filtering mode mean F-score sd n ultra high aggressive 0.58 0.20 10 ultra high moderate 0.58 0.21 15 ultra high mild 0.58 0.21 15 ultra high disabled 0.56 0.23 15 high aggressive 0.52 0.17 10 high moderate 0.54 0.22 15 high mild 0.54 0.22 15 high disabled 0.54 0.23 15 medium aggressive 0.39 0.16 10 medium moderate 0.47 0.22 15 medium mild 0.50 0.25 15 medium disabled 0.48 0.25 15 low aggressive 0.30 0.13 10 low moderate 0.37 0.18 15 low mild 0.46 0.22 15 low disabled 0.45 0.23 15 lowest aggressive 0.24 0.18 10 lowest moderate 0.25 0.20 10 lowest mild 0.30 0.18 10 lowest disabled 0.30 0.21 10 6.4.2 Bayesian Kruschke (2015) describes the Hierarchical Bayesian approach to describe groups of metric data with multiple nominal predictors: This chapter considers data structures that consist of a metric predicted variable and two (or more) nominal predictors….The traditional treatment of this sort of data structure is called multifactor analysis of variance (ANOVA). Our Bayesian approach will be a hierarchical generalization of the traditional ANOVA model. The chapter also considers generalizations of the traditional models, because it is straight forward in Bayesian software to implement heavy-tailed distributions to accommodate outliers, along with hierarchical structure to accommodate heterogeneous variances in the different groups. (pp. 583–584) and see section 20 from Kurz’s ebook supplement The metric predicted variable with two nominal predictor variables model has the form: \\[\\begin{align*} y_{i} &amp;\\sim \\operatorname{Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} &amp;= \\beta_0 + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} \\\\ \\beta_{0} &amp;\\sim \\operatorname{Normal}(0,100) \\\\ \\beta_{1[j]} &amp;\\sim \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} &amp;\\sim \\operatorname{Normal}(0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{1\\times2[j,k]} &amp;\\sim \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\sigma_{\\beta_{1}} &amp;\\sim \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2}} &amp;\\sim \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} &amp;\\sim \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{y} &amp;\\sim {\\sf Cauchy} (0,109) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\) and \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\) for this model, we’ll define the priors following Kurz who notes that: The noise standard deviation \\(\\sigma_y\\) is depicted in the prior statement including the argument class = sigma…in order to be weakly informative, we will use the half-Cauchy. Recall that since the brms default is to set the lower bound for any variance parameter to 0, there’s no need to worry about doing so ourselves. So even though the syntax only indicates cauchy, it’s understood to mean Cauchy with a lower bound at zero; since the mean is usually 0, that makes this a half-Cauchy…The tails of the half-Cauchy are sufficiently fat that, in practice, I’ve found it doesn’t matter much what you set the \\(SD\\) of its prior to. # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$f_score) sd_y_temp = sd(ptcld_validation_data$f_score) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) Now fit the model. brms_f_mod2 = brms::brm( formula = f_score ~ 1 + (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 6000, warmup = 3000, chains = 4 , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_f_mod2&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod2) check the prior distributions # check priors brms::prior_summary(brms_f_mod2) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(mean_y, sd_y * 5) Intercept user gamma(alpha, beta) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default cauchy(0, sd_y) sigma 0 user The brms::brm model summary brms_f_mod2 %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian two nominal predictors: F-score by dense cloud quality and filtering mode&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.6: Bayesian two nominal predictors: F-score by dense cloud quality and filtering mode parameter estimate est.error q2.5 q97.5 b_Intercept 0.45 0.09 0.27 0.63 sd_filtering__Intercept 0.05 0.05 0.00 0.19 sd_quality__Intercept 0.16 0.08 0.07 0.39 sd_quality:filtering__Intercept 0.02 0.01 0.00 0.05 sigma 0.21 0.01 0.19 0.23 r_filtering[aggressive,Intercept] -0.02 0.04 -0.12 0.05 r_filtering[moderate,Intercept] 0.00 0.04 -0.08 0.08 r_filtering[mild,Intercept] 0.02 0.04 -0.05 0.11 r_filtering[disabled,Intercept] 0.01 0.04 -0.06 0.10 r_quality[ultra.high,Intercept] 0.12 0.08 -0.05 0.29 r_quality[high,Intercept] 0.08 0.08 -0.09 0.25 r_quality[medium,Intercept] 0.01 0.08 -0.15 0.18 r_quality[low,Intercept] -0.05 0.08 -0.22 0.12 r_quality[lowest,Intercept] -0.17 0.08 -0.34 0.00 r_quality:filtering[high_aggressive,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[high_disabled,Intercept] 0.00 0.02 -0.05 0.05 r_quality:filtering[high_mild,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[high_moderate,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[low_aggressive,Intercept] -0.01 0.02 -0.07 0.03 r_quality:filtering[low_disabled,Intercept] 0.00 0.02 -0.04 0.06 r_quality:filtering[low_mild,Intercept] 0.01 0.02 -0.04 0.06 r_quality:filtering[low_moderate,Intercept] 0.00 0.02 -0.05 0.04 r_quality:filtering[lowest_aggressive,Intercept] 0.00 0.02 -0.05 0.04 r_quality:filtering[lowest_disabled,Intercept] 0.00 0.02 -0.05 0.05 r_quality:filtering[lowest_mild,Intercept] 0.00 0.02 -0.05 0.05 r_quality:filtering[lowest_moderate,Intercept] 0.00 0.02 -0.06 0.04 r_quality:filtering[medium_aggressive,Intercept] -0.01 0.02 -0.06 0.04 r_quality:filtering[medium_disabled,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[medium_mild,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[medium_moderate,Intercept] 0.00 0.02 -0.04 0.05 r_quality:filtering[ultra.high_aggressive,Intercept] 0.00 0.02 -0.04 0.06 r_quality:filtering[ultra.high_disabled,Intercept] 0.00 0.02 -0.05 0.04 r_quality:filtering[ultra.high_mild,Intercept] 0.00 0.02 -0.05 0.05 r_quality:filtering[ultra.high_moderate,Intercept] 0.00 0.02 -0.04 0.05 We can look at the model noise standard deviation \\(\\sigma_y\\) # get formula form_temp = brms_f_mod2$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text() %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod2) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\sigma_y$&quot;) , caption = form_temp ) + theme_light() how is it compared to the first model? # how is it compared to the first model dplyr::bind_rows( brms::as_draws_df(brms_f_mod1) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;one nominal predictor&quot;) , brms::as_draws_df(brms_f_mod2) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model noise standard deviation comparison&quot;) %&gt;% kableExtra::kable_styling() Table 6.7: brms::brm model noise standard deviation comparison model sigma .lower .upper .width .point .interval one nominal predictor 0.21 0.19 0.23 0.95 median hdi two nominal predictor 0.21 0.19 0.23 0.95 median hdi plot the posterior predictive distributions of the conditional means with the median F-score and the 95% highest posterior density interval (HDI) ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws(brms_f_mod2, allow_new_levels = T) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , fill = &quot;Filtering Mode&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws(brms_f_mod2, allow_new_levels = T) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 480,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 0.078887252, 0.064029088, 0.02146… ## $ median_hdi_est &lt;dbl&gt; 0.03770622, 0.03770622, 0.0377062… ## $ median_hdi_lower &lt;dbl&gt; -0.05514285, -0.05514285, -0.0551… ## $ median_hdi_upper &lt;dbl&gt; 0.135536, 0.135536, 0.135536, 0.1… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, FAL… ## $ pct_gt_zero &lt;dbl&gt; 0.7908333, 0.7908333, 0.7908333, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=79%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=79%&quot;, &quot;Pr(&gt;0)=79%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1457012, 0.1457012, 0.1457012, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 2.1 , x_expand = c(0,0.65) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.8: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast filtering mode difference (F-score) HDI low HDI high ultra high - high aggressive 0.04 -0.06 0.14 ultra high - high moderate 0.04 -0.05 0.13 ultra high - high mild 0.04 -0.06 0.13 ultra high - high disabled 0.03 -0.06 0.12 ultra high - medium aggressive 0.11 0.01 0.21 ultra high - medium moderate 0.10 0.01 0.19 ultra high - medium mild 0.10 0.01 0.19 ultra high - medium disabled 0.10 0.01 0.19 ultra high - low aggressive 0.17 0.07 0.27 ultra high - low moderate 0.17 0.07 0.26 ultra high - low mild 0.16 0.07 0.25 ultra high - low disabled 0.16 0.06 0.25 ultra high - lowest aggressive 0.29 0.18 0.39 ultra high - lowest moderate 0.29 0.19 0.39 ultra high - lowest mild 0.28 0.18 0.38 ultra high - lowest disabled 0.28 0.18 0.38 high - medium aggressive 0.07 -0.02 0.17 high - medium moderate 0.07 -0.03 0.15 high - medium mild 0.06 -0.03 0.15 high - medium disabled 0.07 -0.02 0.16 high - low aggressive 0.13 0.04 0.23 high - low moderate 0.13 0.04 0.22 high - low mild 0.12 0.03 0.21 high - low disabled 0.12 0.03 0.22 high - lowest aggressive 0.25 0.15 0.36 high - lowest moderate 0.25 0.15 0.35 high - lowest mild 0.25 0.14 0.35 high - lowest disabled 0.25 0.15 0.35 medium - low aggressive 0.06 -0.03 0.16 medium - low moderate 0.07 -0.03 0.15 medium - low mild 0.06 -0.03 0.15 medium - low disabled 0.06 -0.03 0.15 medium - lowest aggressive 0.18 0.08 0.28 medium - lowest moderate 0.18 0.09 0.28 medium - lowest mild 0.18 0.08 0.28 medium - lowest disabled 0.18 0.09 0.28 low - lowest aggressive 0.12 0.01 0.22 low - lowest moderate 0.12 0.02 0.21 low - lowest mild 0.12 0.02 0.22 low - lowest disabled 0.12 0.02 0.22 Kruschke (2015) notes that for the multiple nominal predictors model: In applications with multiple levels of the factors, it is virtually always the case that we are interested in comparing particular levels with each other…These sorts of comparisons, which involve levels of a single factor and collapse across the other factor(s), are called main effect comparisons or contrasts.(p. 595) First, let’s collapse across the filtering mode to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above # let&#39;s compare these results to the results from our [one nominal predictor model above](#one_pred_mod) ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms_f_mod1) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod1&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[1:2]) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) these results are as expected, with Kruschke (2015) noting: It is important to realize that the estimates of interaction contrasts are typically much more uncertain than the estimates of simple effects or main effects…This large uncertainty of an interaction contrast is caused by the fact that it involves at least four sources of uncertainty (i.e., at least four groups of data), unlike its component simple effects which each involve only half of those sources of uncertainty. In general, interaction contrasts require a lot of data to estimate accurately. (p. 598) For completeness, let’s also collapse across the dense cloud quality to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) …it looks like the variation in F-score is driven by the dense cloud quality setting. We can quantify the variation in F-score by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms_f_mod2) %&gt;% dplyr::select(c(sigma,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;, caption = form_temp) + theme_light() Finally we can perform model selection via information criteria, from section 10 in Kurz’s ebook supplement: expected log predictive density (elpd_loo), the estimated effective number of parameters (p_loo), and the Pareto smoothed importance-sampling leave-one-out cross-validation (PSIS-LOO; looic). Each estimate comes with a standard error (i.e., SE). Like other information criteria, the LOO values aren’t of interest in and of themselves. However, the estimate of one model’s LOO relative to that of another can be of great interest. We generally prefer models with lower information criteria. With the brms::loo_compare() function, we can compute a formal difference score between two models…The brms::loo_compare() output rank orders the models such that the best fitting model appears on top. brms_f_mod1 = brms::add_criterion(brms_f_mod1, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms_f_mod2 = brms::add_criterion(brms_f_mod2, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms_f_mod1, brms_f_mod2, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms_f_mod1 0.0 0.0 ## brms_f_mod2 -1.7 1.2 # brms::model_weights(brms_f_mod1, brms_f_mod2) %&gt;% round() These models are not significantly different suggesting that the filtering mode is not contributing much to the variation in SfM-derived tree detection reliability after accounting for the quality setting 6.5 Three Nominal Predictors Now, we’ll add the SfM processing software to our model which includes the depth map generation quality and the depth map filtering parameters to quantify the SfM-derived tree detection performance based on the F-score. 6.5.1 Summary Statistics Summary statistics by group: ptcld_validation_data %&gt;% dplyr::group_by(depth_maps_generation_quality, depth_maps_generation_filtering_mode, software) %&gt;% dplyr::summarise( mean_f_score = mean(f_score, na.rm = T) # , med_f_score = median(f_score, na.rm = T) , sd_f_score = sd(f_score, na.rm = T) , n = dplyr::n() ) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;summary statistics: F-score by dense cloud quality, filtering mode, and software&quot; , col.names = c( &quot;quality&quot; , &quot;filtering mode&quot; , &quot;software&quot; , &quot;mean F-score&quot; , &quot;sd&quot; , &quot;n&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.9: summary statistics: F-score by dense cloud quality, filtering mode, and software quality filtering mode software mean F-score sd n ultra high aggressive METASHAPE 0.56 0.21 5 ultra high aggressive OPENDRONEMAP 0.60 0.21 5 ultra high moderate METASHAPE 0.61 0.23 5 ultra high moderate OPENDRONEMAP 0.58 0.20 5 ultra high moderate PIX4D 0.55 0.24 5 ultra high mild METASHAPE 0.62 0.23 5 ultra high mild OPENDRONEMAP 0.58 0.19 5 ultra high mild PIX4D 0.54 0.24 5 ultra high disabled METASHAPE 0.61 0.24 5 ultra high disabled OPENDRONEMAP 0.54 0.23 5 ultra high disabled PIX4D 0.54 0.25 5 high aggressive METASHAPE 0.51 0.19 5 high aggressive OPENDRONEMAP 0.53 0.17 5 high moderate METASHAPE 0.60 0.24 5 high moderate OPENDRONEMAP 0.47 0.21 5 high moderate PIX4D 0.54 0.24 5 high mild METASHAPE 0.61 0.24 5 high mild OPENDRONEMAP 0.48 0.21 5 high mild PIX4D 0.53 0.24 5 high disabled METASHAPE 0.61 0.24 5 high disabled OPENDRONEMAP 0.47 0.22 5 high disabled PIX4D 0.55 0.25 5 medium aggressive METASHAPE 0.41 0.18 5 medium aggressive OPENDRONEMAP 0.36 0.15 5 medium moderate METASHAPE 0.54 0.20 5 medium moderate OPENDRONEMAP 0.34 0.20 5 medium moderate PIX4D 0.54 0.23 5 medium mild METASHAPE 0.60 0.25 5 medium mild OPENDRONEMAP 0.33 0.19 5 medium mild PIX4D 0.56 0.25 5 medium disabled METASHAPE 0.57 0.25 5 medium disabled OPENDRONEMAP 0.33 0.22 5 medium disabled PIX4D 0.55 0.24 5 low aggressive METASHAPE 0.25 0.12 5 low aggressive OPENDRONEMAP 0.34 0.13 5 low moderate METASHAPE 0.39 0.20 5 low moderate OPENDRONEMAP 0.34 0.20 5 low moderate PIX4D 0.38 0.17 5 low mild METASHAPE 0.49 0.21 5 low mild OPENDRONEMAP 0.34 0.21 5 low mild PIX4D 0.54 0.24 5 low disabled METASHAPE 0.48 0.24 5 low disabled OPENDRONEMAP 0.33 0.22 5 low disabled PIX4D 0.54 0.24 5 lowest aggressive METASHAPE 0.11 0.10 5 lowest aggressive OPENDRONEMAP 0.36 0.16 5 lowest moderate METASHAPE 0.15 0.10 5 lowest moderate OPENDRONEMAP 0.36 0.22 5 lowest mild METASHAPE 0.27 0.19 5 lowest mild OPENDRONEMAP 0.32 0.19 5 lowest disabled METASHAPE 0.27 0.22 5 lowest disabled OPENDRONEMAP 0.33 0.22 5 we can view this data by using ggplot2::geom_tile ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( mean_f_score = mean(f_score, na.rm = T) # , med_f_score = median(f_score, na.rm = T) , sd_f_score = sd(f_score, na.rm = T) , n = dplyr::n() ) %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = mean_f_score , label = paste0(scales::comma(mean_f_score,accuracy = 0.01), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_viridis_c(option = &quot;cividis&quot;, begin = 0.3, end = 0.9) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;F-score&quot; , subtitle = &quot;mean F-score and # of study sites&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) ggplot2::ggsave(&quot;../data/fscore_comp_quick.png&quot;, height = 9, width = 8) 6.5.2 Bayesian Kruschke (2015) describes the Hierarchical Bayesian approach to extend our two nominal predictor model to include another nominal predictor (referred to as “subject” here but the methodology applies for other nominal variables): When every subject contributes many measurements to every cell, then the model of the situation is a straight-forward extension of the models we have already considered. We merely add “subject” as another nominal predictor in the model, with each individual subject being a level of the predictor. If there is one predictor other than subject, the model becomes \\[ y = \\beta_0 + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_S \\overrightarrow x_S + \\overrightarrow \\beta_{1 \\times S} \\overrightarrow x_{1 \\times S} \\] This is exactly the two-predictor model we have already considered, with the second predictor being subject. When there are two predictors other than subject, the model becomes \\[\\begin{align*} y = &amp; \\; \\beta_0 &amp; \\text{baseline} \\\\ &amp; + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_2 \\overrightarrow x_2 + \\overrightarrow \\beta_S \\overrightarrow x_S &amp; \\text{main effects} \\\\ &amp; + \\overrightarrow \\beta_{1 \\times 2} \\overrightarrow x_{1 \\times 2} + \\overrightarrow \\beta_{1 \\times S} \\overrightarrow x_{1 \\times S} + \\overrightarrow \\beta_{2 \\times S} \\overrightarrow x_{2 \\times S} &amp; \\text{two-way interactions} \\\\ &amp; + \\overrightarrow \\beta_{1 \\times 2 \\times S} \\overrightarrow x_{1 \\times 2 \\times S} &amp; \\text{three-way interactions} \\end{align*}\\] This model includes all the two-way interactions of the factors, plus the three-way interaction. (p. 607) The metric predicted variable with three nominal predictor variables model has the form: \\[\\begin{align*} y_{i} \\sim &amp; \\operatorname{Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} = &amp; \\beta_0 \\\\ &amp; + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{f} \\beta_{3[f]} x_{3[f]} \\\\ &amp; + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{j,f} \\beta_{1\\times3[j,f]} x_{1\\times3[j,f]} + \\sum_{k,f} \\beta_{2\\times3[k,f]} x_{2\\times3[k,f]} \\\\ &amp; + \\sum_{j,k,f} \\beta_{1\\times2\\times3[j,k,f]} x_{1\\times2\\times3[j,k,f]} \\\\ \\beta_{0} \\sim &amp; \\operatorname{Normal}(0,100) \\\\ \\beta_{1[j]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{3[f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{3}}) \\\\ \\beta_{1\\times2[j,k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{1\\times3[j,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times3}}) \\\\ \\beta_{2\\times3[k,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2\\times3}}) \\\\ \\sigma_{\\beta_{1}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{y} \\sim &amp; {\\sf Cauchy} (0,109) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\), \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\), and \\(f\\) is the processing software corresponding to observation \\(i\\) for this model, we’ll define the priors following Kurz who notes that: The noise standard deviation \\(\\sigma_y\\) is depicted in the prior statement including the argument class = sigma…in order to be weakly informative, we will use the half-Cauchy. Recall that since the brms default is to set the lower bound for any variance parameter to 0, there’s no need to worry about doing so ourselves. So even though the syntax only indicates cauchy, it’s understood to mean Cauchy with a lower bound at zero; since the mean is usually 0, that makes this a half-Cauchy…The tails of the half-Cauchy are sufficiently fat that, in practice, I’ve found it doesn’t matter much what you set the \\(SD\\) of its prior to. # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$f_score) sd_y_temp = sd(ptcld_validation_data$f_score) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) Now fit the model. brms_f_mod3 = brms::brm( formula = f_score ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_f_mod3&quot;) ) # https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup # https://mc-stan.org/misc/warnings.html#bulk-ess # https://mc-stan.org/misc/warnings.html#tail-ess check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod3) check the prior distributions # check priors brms::prior_summary(brms_f_mod3) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(mean_y, sd_y * 5) Intercept user gamma(alpha, beta) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality:software default sd Intercept depth_maps_generation_quality:software default sd software default sd Intercept software default cauchy(0, sd_y) sigma 0 user The brms::brm model summary We won’t clutter the output here but this can be run if you are following along on your own brms_f_mod3 %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian 3 nominal predictors for F-score&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) We can look at the model noise standard deviation \\(\\sigma_y\\) # get formula form_temp = brms_f_mod3$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text() %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod3) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\sigma_y$&quot;) , caption = form_temp ) + theme_light() how is it compared to our other models? # how is it compared to our other models? dplyr::bind_rows( brms::as_draws_df(brms_f_mod1) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;one nominal predictor&quot;) , brms::as_draws_df(brms_f_mod2) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor&quot;) , brms::as_draws_df(brms_f_mod3) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;three nominal predictor&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model noise standard deviation comparison&quot;) %&gt;% kableExtra::kable_styling() Table 6.10: brms::brm model noise standard deviation comparison model sigma .lower .upper .width .point .interval one nominal predictor 0.21 0.19 0.23 0.95 median hdi two nominal predictor 0.21 0.19 0.23 0.95 median hdi three nominal predictor 0.20 0.18 0.22 0.95 median hdi plot the posterior predictive distributions of the conditional means with the median F-score and the 95% highest posterior density interval (HDI) Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of software. For this model we have to collapse across the software effects to compare the dense cloud quality and filtering mode setting effects. ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , fill = &quot;Filtering Mode&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; -0.087610941, 0.085047329, -0.131… ## $ median_hdi_est &lt;dbl&gt; 0.03005148, 0.03005148, 0.0300514… ## $ median_hdi_lower &lt;dbl&gt; -0.1129854, -0.1129854, -0.112985… ## $ median_hdi_upper &lt;dbl&gt; 0.1723716, 0.1723716, 0.1723716, … ## $ is_gt_zero &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE, F… ## $ pct_gt_zero &lt;dbl&gt; 0.674575, 0.674575, 0.674575, 0.6… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=67%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=67%&quot;, &quot;Pr(&gt;0)=67%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1852995, 0.1852995, 0.1852995, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 2.1 , x_expand = c(0,0.6) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.11: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast filtering mode difference (F-score) HDI low HDI high ultra high - high aggressive 0.03 -0.11 0.17 ultra high - high moderate 0.03 -0.11 0.17 ultra high - high mild 0.03 -0.11 0.17 ultra high - high disabled 0.03 -0.11 0.17 ultra high - medium aggressive 0.09 -0.06 0.23 ultra high - medium moderate 0.08 -0.06 0.23 ultra high - medium mild 0.08 -0.07 0.22 ultra high - medium disabled 0.08 -0.07 0.22 ultra high - low aggressive 0.14 -0.02 0.29 ultra high - low moderate 0.14 -0.02 0.28 ultra high - low mild 0.13 -0.03 0.27 ultra high - low disabled 0.13 -0.04 0.27 ultra high - lowest aggressive 0.23 0.00 0.40 ultra high - lowest moderate 0.23 0.00 0.40 ultra high - lowest mild 0.23 0.00 0.40 ultra high - lowest disabled 0.22 -0.01 0.39 high - medium aggressive 0.05 -0.09 0.20 high - medium moderate 0.05 -0.09 0.20 high - medium mild 0.05 -0.10 0.19 high - medium disabled 0.05 -0.09 0.19 high - low aggressive 0.11 -0.04 0.26 high - low moderate 0.11 -0.04 0.25 high - low mild 0.10 -0.05 0.24 high - low disabled 0.10 -0.05 0.24 high - lowest aggressive 0.20 -0.01 0.36 high - lowest moderate 0.20 -0.01 0.36 high - lowest mild 0.19 -0.01 0.36 high - lowest disabled 0.19 -0.02 0.36 medium - low aggressive 0.05 -0.09 0.20 medium - low moderate 0.05 -0.08 0.20 medium - low mild 0.05 -0.09 0.19 medium - low disabled 0.05 -0.09 0.19 medium - lowest aggressive 0.14 -0.05 0.30 medium - lowest moderate 0.14 -0.04 0.31 medium - lowest mild 0.14 -0.04 0.31 medium - lowest disabled 0.14 -0.03 0.31 low - lowest aggressive 0.08 -0.08 0.25 low - lowest moderate 0.09 -0.08 0.25 low - lowest mild 0.09 -0.07 0.25 low - lowest disabled 0.09 -0.07 0.25 It might be more important to understand the difference in F-score by dense cloud quality and software rather than filtering mode since filtering mode had such a small effect on the SfM predictive ability Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of depth_maps_generation_filtering_mode. For this model we have to collapse across the filtering mode effects to compare the dense cloud quality and software setting effects. qlty_sftwr_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod3, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) # plot it qlty_sftwr_draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = software ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list[!stringr::str_detect(contrast_list, &quot;lowest&quot;)] # contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 720,000 ## Columns: 17 ## Groups: contrast, software [18] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; 0.003195116, -0.019219782, 0.166484207, 0.10992287… ## $ median_hdi_est &lt;dbl&gt; 0.02226909, 0.02226909, 0.02226909, 0.02226909, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.09312331, -0.09312331, -0.09312331, -0.09312331… ## $ median_hdi_upper &lt;dbl&gt; 0.138316, 0.138316, 0.138316, 0.138316, 0.138316, … ## $ is_gt_zero &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ pct_gt_zero &lt;dbl&gt; 0.646325, 0.646325, 0.646325, 0.646325, 0.646325, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=65%&quot;, &quot;Pr(ultra high&gt;high)=65… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=65%&quot;, &quot;Pr(&gt;0)=65%&quot;, &quot;Pr(&gt;0)=65%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1486897, 0.1486897, 0.1486897, 0.1486897, 0.1486… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 2.2 , x_expand = c(0,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;software&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.12: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast software difference (F-score) HDI low HDI high ultra high - high METASHAPE 0.02 -0.09 0.14 ultra high - high OPENDRONEMAP 0.07 -0.05 0.19 ultra high - high PIX4D 0.01 -0.12 0.14 ultra high - medium METASHAPE 0.08 -0.04 0.19 ultra high - medium OPENDRONEMAP 0.18 0.06 0.31 ultra high - medium PIX4D 0.03 -0.11 0.17 ultra high - low METASHAPE 0.18 0.06 0.29 ultra high - low OPENDRONEMAP 0.20 0.08 0.32 ultra high - low PIX4D 0.09 -0.05 0.22 high - medium METASHAPE 0.05 -0.07 0.17 high - medium OPENDRONEMAP 0.11 0.00 0.23 high - medium PIX4D 0.02 -0.11 0.15 high - low METASHAPE 0.15 0.03 0.27 high - low OPENDRONEMAP 0.13 0.02 0.25 high - low PIX4D 0.08 -0.06 0.21 medium - low METASHAPE 0.10 -0.02 0.22 medium - low OPENDRONEMAP 0.02 -0.10 0.13 medium - low PIX4D 0.06 -0.07 0.19 let’s collapse across the filtering mode and software to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above and two nominal predictor model ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms_f_mod1) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod1&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[1:3]) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) let’s also collapse across the dense cloud quality and software to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our two nominal predictor model above ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_filtering_mode), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[2:3]) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) to address one of our main questions, let’s also collapse across the dense cloud quality and filtering mode setting to compare the software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = software , fill = software ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;software&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) Finally, we can quantify the variation in F-score by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms_f_mod3) %&gt;% dplyr::select(c(sigma,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;, caption = form_temp) + theme_light() and perform model selection via information criteria with the brms::loo_compare() function brms_f_mod3 = brms::add_criterion(brms_f_mod3, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms_f_mod1, brms_f_mod2, brms_f_mod3, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms_f_mod3 0.0 0.0 ## brms_f_mod1 -0.3 3.8 ## brms_f_mod2 -2.0 3.6 6.6 Three Nominal Predictors + site effects Now, we’ll add the average deflection from the baseline (i.e. the “grand mean”) due to study site (i.e. the “subjects” in our data). The main effect for the study site will be added to our model with the combined influence of the depth map generation quality, the depth map filtering, and the software on the F-score. In the model we use below, the study site is modeled as a “random effect.” Hobbs et al. (2024) describe a similar model: It is important to understand that fitting treatment intercepts and slopes as random rather than fixed means that our inference applied to all possible sites suitable for [inclusion in the study]. In contrast, assuming fixed effects of treatment would dramatically reduce the uncertainty about those effects, but would constrain inference to the four sites that we studied. (p. 13) 6.6.1 Summary Statistics Each study site contributes one observation per dense cloud quality, filtering mode, and software. That is, a row in the underlying data is unique by study site, software, dense cloud quality, and filtering mode. identical( # base data nrow(ptcld_validation_data) # distinct group , ptcld_validation_data %&gt;% dplyr::distinct( study_site , software , depth_maps_generation_quality , depth_maps_generation_filtering_mode ) %&gt;% nrow() ) ## [1] TRUE 6.6.2 Bayesian Kruschke (2015) describes the Hierarchical Bayesian approach to describe groups of metric data with multiple nominal predictors when every subject (“study site” in our research) only contributes one observation per cell/condition: \\[\\begin{align*} y = &amp; \\; \\beta_0 \\\\ &amp; + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_2 \\overrightarrow x_2 + \\overrightarrow \\beta_{1 \\times 2} \\overrightarrow x_{1 \\times 2} \\\\ &amp; + \\overrightarrow \\beta_S \\overrightarrow x_S \\end{align*}\\] In other words, we assume a main effect of subject, but no interaction of subject with other predictors. In this model, the subject effect (deflection) is constant across treatments, and the treatment effects (deflections) are constant across subjects. Notice that the model makes no requirement that every subject contributes a datum to every condition. Indeed, the model allows zero or multiple data per subject per condition. Bayesian estimation makes no assumptions or requirements that the design is balanced (i.e., has equal numbers of measurement in each cell). (p. 608) and see section 20 from Kurz’s ebook supplement The metric predicted variable with three nominal predictor variables and subject-level effects model has the form: \\[\\begin{align*} y_{i} \\sim &amp; \\operatorname{Normal} \\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} = &amp; \\beta_0 \\\\ &amp; + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{f} \\beta_{3[f]} x_{3[f]} + \\sum_{s} \\beta_{4[s]} x_{4[s]} \\\\ &amp; + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{j,f} \\beta_{1\\times3[j,f]} x_{1\\times3[j,f]} + \\sum_{k,f} \\beta_{2\\times3[k,f]} x_{2\\times3[k,f]} \\\\ &amp; + \\sum_{j,k,f} \\beta_{1\\times2\\times3[j,k,f]} x_{1\\times2\\times3[j,k,f]} \\\\ \\beta_{0} \\sim &amp; \\operatorname{Normal}(0,100) \\\\ \\beta_{1[j]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{3[f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{3}}) \\\\ \\beta_{4[s]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{4}}) \\\\ \\beta_{1\\times2[j,k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{1\\times3[j,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times3}}) \\\\ \\beta_{2\\times3[k,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2\\times3}}) \\\\ \\sigma_{\\beta_{1}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{4}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{y} \\sim &amp; {\\sf Cauchy} (0,109) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\), \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\), \\(f\\) is the processing software corresponding to observation \\(i\\), and \\(s\\) is the study site corresponding to observation \\(i\\) for this model, we’ll define the priors following Kurz: # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$f_score) sd_y_temp = sd(ptcld_validation_data$f_score) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) Now fit the model. brms_f_mod4 = brms::brm( formula = f_score ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_f_mod4&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod4) check the prior distributions # check priors brms::prior_summary(brms_f_mod4) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(mean_y, sd_y * 5) Intercept user gamma(alpha, beta) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality:software default sd Intercept depth_maps_generation_quality:software default sd software default sd Intercept software default sd study_site default sd Intercept study_site default cauchy(0, sd_y) sigma 0 user The brms::brm model summary We won’t clutter the output here but this can be run if you are following along on your own brms_f_mod4 %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian 3 nominal predictors + study site effects for F-score&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) We can look at the model noise standard deviation \\(\\sigma_y\\) # get formula form_temp = brms_f_mod4$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text() %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod4) %&gt;% # plot ggplot(aes(x = sigma, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\sigma_y$&quot;) , caption = form_temp ) + theme_light() how is it compared to our other models? # how is it compared to our other models? dplyr::bind_rows( brms::as_draws_df(brms_f_mod1) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;one nominal predictor&quot;) , brms::as_draws_df(brms_f_mod2) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;two nominal predictor&quot;) , brms::as_draws_df(brms_f_mod3) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;three nominal predictor&quot;) , brms::as_draws_df(brms_f_mod4) %&gt;% tidybayes::median_hdi(sigma) %&gt;% dplyr::mutate(model = &quot;three+site nominal predictor&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;brms::brm model noise standard deviation comparison&quot;) %&gt;% kableExtra::kable_styling() Table 6.13: brms::brm model noise standard deviation comparison model sigma .lower .upper .width .point .interval one nominal predictor 0.21 0.19 0.23 0.95 median hdi two nominal predictor 0.21 0.19 0.23 0.95 median hdi three nominal predictor 0.20 0.18 0.22 0.95 median hdi three+site nominal predictor 0.14 0.13 0.15 0.95 median hdi plot the posterior predictive distributions of the conditional means with the median F-score and the 95% highest posterior density interval (HDI) Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of study_site (i.e., we left (1 | study_site) out of the formula) and software (i.e., we left (1 | software) and its interactions out of the formula). qlty_filter_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod4, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) # hey plot qlty_filter_draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , fill = &quot;Filtering Mode&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = qlty_filter_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 0.117091583, 0.258056922, -0.0900… ## $ median_hdi_est &lt;dbl&gt; 0.02936285, 0.02936285, 0.0293628… ## $ median_hdi_lower &lt;dbl&gt; -0.1084457, -0.1084457, -0.108445… ## $ median_hdi_upper &lt;dbl&gt; 0.174886, 0.174886, 0.174886, 0.1… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, FALSE, TRUE, TRUE, FA… ## $ pct_gt_zero &lt;dbl&gt; 0.6761, 0.6761, 0.6761, 0.6761, 0… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=68%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=68%&quot;, &quot;Pr(&gt;0)=68%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1880025, 0.1880025, 0.1880025, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 2.2 , x_expand = c(-0.1,0.43) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.14: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast filtering mode difference (F-score) HDI low HDI high ultra high - high aggressive 0.03 -0.11 0.17 ultra high - high moderate 0.03 -0.11 0.17 ultra high - high mild 0.03 -0.11 0.17 ultra high - high disabled 0.03 -0.11 0.17 ultra high - medium aggressive 0.08 -0.06 0.23 ultra high - medium moderate 0.08 -0.06 0.22 ultra high - medium mild 0.08 -0.07 0.22 ultra high - medium disabled 0.08 -0.07 0.22 ultra high - low aggressive 0.14 -0.02 0.29 ultra high - low moderate 0.14 -0.02 0.28 ultra high - low mild 0.13 -0.04 0.27 ultra high - low disabled 0.12 -0.04 0.27 ultra high - lowest aggressive 0.23 0.00 0.40 ultra high - lowest moderate 0.23 0.00 0.39 ultra high - lowest mild 0.22 -0.01 0.39 ultra high - lowest disabled 0.22 -0.01 0.39 high - medium aggressive 0.05 -0.08 0.20 high - medium moderate 0.05 -0.09 0.19 high - medium mild 0.05 -0.09 0.18 high - medium disabled 0.05 -0.09 0.19 high - low aggressive 0.11 -0.04 0.25 high - low moderate 0.11 -0.04 0.25 high - low mild 0.09 -0.05 0.24 high - low disabled 0.09 -0.05 0.24 high - lowest aggressive 0.20 -0.01 0.36 high - lowest moderate 0.20 -0.01 0.36 high - lowest mild 0.19 -0.02 0.35 high - lowest disabled 0.19 -0.02 0.35 medium - low aggressive 0.05 -0.09 0.19 medium - low moderate 0.06 -0.08 0.20 medium - low mild 0.05 -0.09 0.18 medium - low disabled 0.05 -0.09 0.18 medium - lowest aggressive 0.14 -0.04 0.30 medium - lowest moderate 0.14 -0.03 0.30 medium - lowest mild 0.14 -0.04 0.30 medium - lowest disabled 0.14 -0.04 0.29 low - lowest aggressive 0.08 -0.08 0.24 low - lowest moderate 0.08 -0.07 0.24 low - lowest mild 0.09 -0.06 0.25 low - lowest disabled 0.09 -0.07 0.25 It might be more important to understand the difference in F-score by dense cloud quality and software rather than filtering mode since filtering mode had such a small effect on the SfM predictive ability Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the random effects of depth_maps_generation_filtering_mode. For this model we have to collapse across the filtering mode effects to compare the dense cloud quality and software setting effects. ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod4, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = software ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # get draws qlty_sftwr_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod4, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list[!stringr::str_detect(contrast_list, &quot;lowest&quot;)] # contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 720,000 ## Columns: 17 ## Groups: contrast, software [18] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; 0.011002873, 0.016403992, 0.036585434, -0.00796592… ## $ median_hdi_est &lt;dbl&gt; 0.01895816, 0.01895816, 0.01895816, 0.01895816, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.07011604, -0.07011604, -0.07011604, -0.07011604… ## $ median_hdi_upper &lt;dbl&gt; 0.1084027, 0.1084027, 0.1084027, 0.1084027, 0.1084… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE,… ## $ pct_gt_zero &lt;dbl&gt; 0.662975, 0.662975, 0.662975, 0.662975, 0.662975, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=66%&quot;, &quot;Pr(ultra high&gt;high)=66… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=66%&quot;, &quot;Pr(&gt;0)=66%&quot;, &quot;Pr(&gt;0)=66%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1165329, 0.1165329, 0.1165329, 0.1165329, 0.1165… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 2.1 , x_expand = c(0,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_mod4.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;software&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.15: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast software difference (F-score) HDI low HDI high ultra high - high METASHAPE 0.02 -0.07 0.11 ultra high - high OPENDRONEMAP 0.08 -0.01 0.17 ultra high - high PIX4D 0.01 -0.09 0.11 ultra high - medium METASHAPE 0.07 -0.02 0.16 ultra high - medium OPENDRONEMAP 0.21 0.12 0.30 ultra high - medium PIX4D 0.01 -0.09 0.11 ultra high - low METASHAPE 0.19 0.10 0.27 ultra high - low OPENDRONEMAP 0.22 0.13 0.31 ultra high - low PIX4D 0.08 -0.03 0.18 high - medium METASHAPE 0.05 -0.03 0.14 high - medium OPENDRONEMAP 0.13 0.04 0.22 high - medium PIX4D 0.00 -0.10 0.10 high - low METASHAPE 0.17 0.08 0.26 high - low OPENDRONEMAP 0.14 0.05 0.23 high - low PIX4D 0.07 -0.04 0.17 medium - low METASHAPE 0.11 0.03 0.20 medium - low OPENDRONEMAP 0.01 -0.08 0.10 medium - low PIX4D 0.06 -0.04 0.16 The contrasts above address the question “are there differences in F-score based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in F-score based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 520,000 ## Columns: 15 ## Groups: contrast, depth_maps_generation_quality [13] ## $ depth_maps_generation_quality &lt;ord&gt; ultra high, ultra high, ultra high, ultr… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMA… ## $ value &lt;dbl&gt; -0.041567216, -0.044398847, 0.038336862,… ## $ median_hdi_est &lt;dbl&gt; -0.02216649, -0.02216649, -0.02216649, -… ## $ median_hdi_lower &lt;dbl&gt; -0.1270756, -0.1270756, -0.1270756, -0.1… ## $ median_hdi_upper &lt;dbl&gt; 0.0801044, 0.0801044, 0.0801044, 0.08010… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 0.6705, 0.6705, 0.6705, 0.6705, 0.6705, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=67%&quot;, &quot;Pr(MtaShp&gt;ODM)=67… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=67%&quot;, &quot;Pr(&lt;0)=67%&quot;, &quot;Pr(&lt;0)=67%&quot;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.1366063, -0.1366063, -0.1366063, -0.1… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 2.0 , x_expand = c(0.3,0.3) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;software contrast&quot; , &quot;quality&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.16: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts software contrast quality difference (F-score) HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -0.02 -0.13 0.08 OPENDRONEMAP - METASHAPE high -0.08 -0.19 0.02 OPENDRONEMAP - METASHAPE medium -0.16 -0.27 -0.05 OPENDRONEMAP - METASHAPE low -0.05 -0.16 0.05 OPENDRONEMAP - METASHAPE lowest 0.12 0.01 0.23 PIX4D - METASHAPE ultra high -0.05 -0.16 0.06 PIX4D - METASHAPE high -0.04 -0.15 0.07 PIX4D - METASHAPE medium 0.01 -0.10 0.12 PIX4D - METASHAPE low 0.06 -0.05 0.17 PIX4D - OPENDRONEMAP ultra high -0.03 -0.14 0.08 PIX4D - OPENDRONEMAP high 0.04 -0.07 0.15 PIX4D - OPENDRONEMAP medium 0.17 0.06 0.29 PIX4D - OPENDRONEMAP low 0.11 0.00 0.23 let’s collapse across the filtering mode, software, and study site to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above, two nominal predictor model above, and three nominal predictor model above ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms_f_mod1) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod1&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[1:4]) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) let’s also collapse across the dense cloud quality, software, and study site to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from two nominal predictor model above and three nominal predictor model above ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_filtering_mode), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[2:4]) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) to address one of our main questions, let’s also collapse across the study site, dense cloud quality, and filtering mode setting to compare the software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = software , fill = software ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;software&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our three nominal predictor model above ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(software), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[3:4]) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) Finally, we can quantify the variation in F-score by comparing the \\(\\sigma\\) posteriors. # extract the posterior draws brms::as_draws_df(brms_f_mod4) %&gt;% dplyr::select(c(sigma,tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;, caption = form_temp) + theme_light() and perform model selection via information criteria with the brms::loo_compare() function brms_f_mod4 = brms::add_criterion(brms_f_mod4, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms_f_mod1, brms_f_mod2, brms_f_mod3, brms_f_mod4, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms_f_mod4 0.0 0.0 ## brms_f_mod3 -91.0 11.6 ## brms_f_mod1 -91.3 11.0 ## brms_f_mod2 -93.0 11.0 6.7 The beta: Three Nominal Predictors + site effects To this point, we have been modelling F-score presuming a Gaussian likelihood. However, the beta likelihood more accurately represents the F-score data which is continuous and restricted within the range of \\((0,1)\\). We borrow here from the excellent series on causal inference by A. Solomon Kurz. We also utilize the guide to Bayesian beta models by Andrew Heiss while Nicole Knight posted about the Beta for ecological data. 6.7.1 Summary Statistics let’s check our underlying data for F-score (our dependent or \\(y\\) variable) # distribution ptcld_validation_data %&gt;% ggplot(mapping = aes(x = f_score)) + geom_hline(yintercept = 0) + geom_vline(xintercept = c(0,1)) + geom_density(fill = &quot;lightblue&quot;, alpha = 0.7, color = NA) + labs(y=&quot;&quot;,x=&quot;F-score&quot;) + scale_y_continuous(breaks = c(0)) + scale_x_continuous(limits = c(0,1), breaks = scales::extended_breaks(10)) + theme_light() + theme(panel.grid = element_blank()) and the summary statistics ptcld_validation_data$f_score %&gt;% summary() ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0001 0.2983 0.4425 0.4611 0.6222 0.8997 6.7.2 Bayesian With the beta likelihood our model with three nominal predictor variables and subject-level effects the model becomes: \\[\\begin{align*} y_{i} \\sim &amp; \\operatorname{Beta} \\bigl(\\mu_{i}, \\phi \\bigr) \\\\ \\operatorname{logit}(\\mu_{i}) = &amp; \\beta_0 \\\\ &amp; + \\sum_{j=1}^{J=5} \\beta_{1[j]} x_{1[j]} + \\sum_{k=1}^{K=4} \\beta_{2[k]} x_{2[k]} + \\sum_{f=1}^{F=3} \\beta_{3[f]} x_{3[f]} + \\sum_{s=1}^{S=5} \\beta_{4[s]} x_{4[s]} \\\\ &amp; + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{j,f} \\beta_{1\\times3[j,f]} x_{1\\times3[j,f]} + \\sum_{k,f} \\beta_{2\\times3[k,f]} x_{2\\times3[k,f]} \\\\ &amp; + \\sum_{j,k,f} \\beta_{1\\times2\\times3[j,k,f]} x_{1\\times2\\times3[j,k,f]} \\\\ \\beta_{0} \\sim &amp; \\operatorname{Normal}(0,1) \\\\ \\beta_{1[j]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{3[f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{3}}) \\\\ \\beta_{4[s]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{4}}) \\\\ \\beta_{1\\times2[j,k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{1\\times3[j,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times3}}) \\\\ \\beta_{2\\times3[k,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2\\times3}}) \\\\ \\sigma_{\\beta_{1}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{2}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{3}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{4}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{1\\times2}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{1\\times3}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\sigma_{\\beta_{2\\times3}} \\sim &amp; \\operatorname{Student T}(3,0,2.5) \\\\ \\phi \\sim &amp; \\operatorname{Gamma}(0.1,0.1) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\), \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\), \\(f\\) is the processing software corresponding to observation \\(i\\), and \\(s\\) is the study site corresponding to observation \\(i\\) Per brms, our \\(y\\) is \\(\\operatorname{Beta}\\) distributed with the mean as \\(\\mu\\) and the concentration as \\(\\phi\\) which is sometimes called the concentration, sample size or precision. We can think of mean (\\(\\mu\\)) and precision (\\(\\phi\\)) just like with a normal distribution and its mean and standard deviation. brms allows us to model the precision (\\(\\phi\\)) but it is not required. If \\(\\phi\\) is not modeled, you still get a precision component, but it is universal across all the different coefficients (it doesn’t vary across any variables in the model). Heiss explains that: for whatever mathy reasons, when you don’t explicitly model the precision, the resulting coefficient in the table isn’t on the log scale—it’s a regular non-logged number, so there’s no need to exponentiate. in thie brms community post it is similarly noted that: If you don’t predict the parameters, you give priors for them on non-transformed scale. When you predict them, the predictors become linear coefficients as any other and work on the transformed scale - the transformations are specified by the link_XX parameters of the families (and you can change them if you need). 6.7.2.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp brms_f_mod5_priors_temp &lt;- c( brms::prior(normal(0, 1), class = &quot;Intercept&quot;) , brms::prior(student_t(3, 0, 2.5), class = &quot;sd&quot;) , brms::prior(gamma(0.1, 0.1), class = phi) ) # plot brms_f_mod5_priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% mutate( distrib = case_when( prior == &quot;student_t(3, 0, 2.5)&quot; ~ latex2exp::TeX(r&#39;($\\sigma \\sim Student\\,T(3, 0, 2.5)$)&#39;, output = &quot;character&quot;), prior == &quot;normal(0, 1)&quot; ~ latex2exp::TeX(r&#39;($\\beta \\sim Normal(0, 1)$)&#39;, output = &quot;character&quot;), prior == &quot;gamma(0.1, 0.1)&quot; ~ latex2exp::TeX(r&#39;($\\phi \\sim$ Gamma(0.1, 0.1))&#39;, output = &quot;character&quot;) )) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_wrap(vars(distrib), scales = &quot;free&quot;, labeller = label_parsed) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() )+ labs( x = &quot;&quot;, title = &quot;&quot;, y = &quot;Log Odds&quot; ) 6.7.2.2 Fit the model Now fit the model. brms_f_mod5 = brms::brm( formula = f_score ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = Beta(link = &quot;logit&quot;) # priors , prior = brms_f_mod5_priors_temp # mcmc , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms_f_mod5&quot;) ) # brms::make_stancode(brms_f_mod5) # brms::prior_summary(brms_f_mod5) # print(brms_f_mod5) # brms::neff_ratio(brms_f_mod5) # brms::rhat(brms_f_mod5) # brms::nuts_params(brms_f_mod5) check the prior distributions # check priors brms::prior_summary(brms_f_mod5) %&gt;% kableExtra::kbl() %&gt;% kableExtra::kable_styling() prior class coef group resp dpar nlpar lb ub source normal(0, 1) Intercept user gamma(0.1, 0.1) phi 0 user student_t(3, 0, 2.5) sd 0 user sd depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_filtering_mode default sd depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality default sd Intercept depth_maps_generation_quality default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode default sd depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd Intercept depth_maps_generation_quality:depth_maps_generation_filtering_mode:software default sd depth_maps_generation_quality:software default sd Intercept depth_maps_generation_quality:software default sd software default sd Intercept software default sd study_site default sd Intercept study_site default The brms::brm model summary We won’t clutter the output here but this can be run if you are following along on your own brms_f_mod5 %&gt;% brms::posterior_summary() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;phi&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) ) %&gt;% kableExtra::kbl(digits = 2, caption = &quot;Bayesian final model for F-score&quot;) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) 6.7.2.3 Posterior Predictive Checks Markov chain Monte Carlo (MCMC) simulations were conducted using the brms package (Bürkner 2017) to estimate posterior predictive distributions of the parameters of interest. We ran three chains of 100,000 iterations with the first 50,000 discarded as burn-in. Trace-plots were utilized to visually assess model convergence. check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod5) Sufficient convergence was checked with \\(\\hat{R}\\) values near 1 (Brooks &amp; Gelman, 1998). check our \\(\\hat{R}\\) values brms::mcmc_plot(brms_f_mod5, type = &quot;rhat_hist&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; ) and another check of our \\(\\hat{R}\\) values brms_f_mod5 %&gt;% brms::rhat() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::rename(rhat = 2) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;phi&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) , chk = (rhat &lt;= 1*0.998 | rhat &gt;= 1*1.002) ) %&gt;% ggplot(aes(x = rhat, y = parameter, color = chk, fill = chk)) + geom_vline(xintercept = 1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1.2) + geom_vline(xintercept = 1*0.998, lwd = 1.5) + geom_vline(xintercept = 1*1.002, lwd = 1.5) + geom_vline(xintercept = 1*0.999, lwd = 1.2, color = &quot;gray33&quot;) + geom_vline(xintercept = 1*1.001, lwd = 1.2, color = &quot;gray33&quot;) + geom_point() + scale_fill_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_color_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_y_discrete(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\hat{R}$&quot;) , subtitle = latex2exp::TeX(&quot;MCMC chain convergence check for $\\\\hat{R}$ values&quot;) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 4) , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() ) The effective length of an MCMC chain is indicated by the effective sample size (ESS), which refers to the sample size of the MCMC chain not to the sample size of the data Kruschke (2015) notes: One simple guideline is this: For reasonably accurate and stable estimates of the limits of the 95% HDI, an ESS of 10,000 is recommended. This is merely a heuristic based on experience with practical applications, it is not a requirement. If accuracy of the HDI limits is not crucial for your application, then a smaller ESS may be sufficient. (p.184) # get ess values from model summary dplyr::bind_rows( summary(brms_f_mod5) %&gt;% purrr::pluck(&quot;random&quot;) %&gt;% purrr::flatten() %&gt;% purrr::keep_at(~ .x == &quot;Bulk_ESS&quot;) %&gt;% unlist() %&gt;% dplyr::as_tibble() , summary(brms_f_mod5) %&gt;% purrr::pluck(&quot;fixed&quot;) %&gt;% purrr::flatten() %&gt;% purrr::keep_at(~ .x == &quot;Bulk_ESS&quot;) %&gt;% unlist() %&gt;% dplyr::as_tibble() ) %&gt;% dplyr::rename(ess = 1) %&gt;% dplyr::mutate(parameter = dplyr::row_number(), chk = ess&lt;10000) %&gt;% ggplot(aes(x = ess, y = parameter, color = chk, fill = chk)) + geom_vline(xintercept = 10000, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1.2) + geom_segment( aes(x = 0, xend=ess, yend=parameter), color=&quot;black&quot;) + geom_point() + scale_fill_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_color_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_y_continuous(NULL, breaks = NULL) + scale_x_continuous(labels = scales::comma) + labs( x = &quot;ESS&quot; , subtitle = &quot;MCMC chain resolution check for effective sample size (ESS) values&quot; , y = &quot;&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 4) , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() ) and another effective sample size check brms::mcmc_plot(brms_f_mod5, type = &quot;neff_hist&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; ) Posterior predictive checks were used to evaluate model goodness-of-fit by comparing data simulated from the model with the observed data used to estimate the model parameters (Hobbs &amp; Hooten, 2015). Calculating the proportion of MCMC iterations in which the test statistic (i.e., mean and sum of squares) from the simulated data and observed data are more extreme than one another provides the Bayesian P-value. Lack of fit is indicated by a value close to 0 or 1 while a value of 0.5 indicates perfect fit (Hobbs &amp; Hooten, 2015). To learn more about this approach to posterior predictive checks, check out Gabry’s (2022) vignette, Graphical posterior predictive checks using the bayesplot package. posterior-predictive check to make sure the model does an okay job simulating data that resemble the sample data # posterior predictive check brms::pp_check( brms_f_mod5 , type = &quot;dens_overlay&quot; , ndraws = 100 ) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) ggplot2::ggsave(&quot;../data/ppchk_ovrll_mod5.png&quot;, height = 7, width = 10.5) another way brms::pp_check(brms_f_mod5, type = &quot;ecdf_overlay&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (ECDF: empirical cumulative distribution function)&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) and another posterior predictive check for the overall model # means p1_temp = brms::pp_check( brms_f_mod5 , type = &quot;stat&quot; , stat = &quot;mean&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms_f_mod5 , type = &quot;stat&quot; , stat = &quot;sd&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + theme_light() # combine (p1_temp + p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\noverall model&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) and another posterior predictive check for the overall model combining mean and sd brms::pp_check(brms_f_mod5, type = &quot;stat_2d&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) How’d we do capturing the conditional means and standard deviations by depth map generation quality? # means p1_temp = brms::pp_check( brms_f_mod5 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;mean&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms_f_mod5 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;sd&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # combine (p1_temp / p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\nby dense cloud quality&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) ggplot2::ggsave(&quot;../data/ppchk_qlty_mod5.png&quot;, height = 7, width = 10.5) Both the means and sd’s of the F-score are well represented across the different levels of dense cloud quality What about for the software? pp_check(brms_f_mod5, &quot;dens_overlay_grouped&quot;, group = &quot;software&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby software&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) ggplot2::ggsave(&quot;../data/ppchk_sftwr_mod5.png&quot;, height = 7, width = 10.5) and what about for the filtering mode? pp_check(brms_f_mod5, &quot;dens_overlay_grouped&quot;, group = &quot;depth_maps_generation_filtering_mode&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby filtering mode&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) It looks like our model is making predictions that are consistent with our original data, which is what we want. We can look at the model noise standard deviation (concentration) \\(\\phi\\) and the intercept We can think of mean (\\(\\mu\\)) and precision (\\(\\phi\\)) just like with a normal distribution and its mean and standard deviation. # get formula form_temp = brms_f_mod5$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text() %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod5) %&gt;% # plot ggplot(aes(x = phi, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\phi$&quot;) # , caption = form_temp ) + theme_light() ggplot2::ggsave(&quot;../data/phi_posterior_mod5.png&quot;, height = 7, width = 10.5) 6.7.2.4 Quality:Filtering - interaction Are there differences in F-score based on dense point cloud generation quality within each level of filtering mode? Here, we collapse across the study site and software to compare the combined dense cloud quality and filtering mode effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws qlty_filter_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_filter_draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode # , fill = depth_maps_generation_filtering_mode , fill = med ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.95 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + # scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_y_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , fill = &quot;Filtering Mode&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) ggplot2::ggsave( &quot;../data/qlty_fltr_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and a table of these 95% HDI values table_temp = qlty_filter_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;F-score&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;F-score&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.17: F-score95% HDI of the posterior predictive distribution filtering mode F-scoremedian HDI low HDI high ultra high aggressive 0.54 0.28 0.80 moderate 0.55 0.28 0.80 mild 0.57 0.31 0.82 disabled 0.56 0.30 0.81 high aggressive 0.51 0.25 0.77 moderate 0.52 0.27 0.78 mild 0.54 0.28 0.79 disabled 0.54 0.27 0.79 medium aggressive 0.45 0.20 0.72 moderate 0.46 0.21 0.72 mild 0.48 0.23 0.75 disabled 0.48 0.23 0.74 low aggressive 0.39 0.16 0.66 moderate 0.41 0.17 0.67 mild 0.44 0.19 0.70 disabled 0.43 0.19 0.70 lowest aggressive 0.26 0.07 0.54 moderate 0.28 0.08 0.56 mild 0.30 0.08 0.59 disabled 0.30 0.08 0.59 we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = qlty_filter_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; -3.406868e-02, 7.723559e-02, 3.50… ## $ median_hdi_est &lt;dbl&gt; 0.02432316, 0.02432316, 0.0243231… ## $ median_hdi_lower &lt;dbl&gt; -0.1479552, -0.1479552, -0.147955… ## $ median_hdi_upper &lt;dbl&gt; 0.2016618, 0.2016618, 0.2016618, … ## $ is_gt_zero &lt;lgl&gt; FALSE, TRUE, TRUE, TRUE, TRUE, TR… ## $ pct_gt_zero &lt;dbl&gt; 0.62375, 0.62375, 0.62375, 0.6237… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=62%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.2167864, 0.2167864, 0.2167864, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 2.0 , x_expand = c(0,0.6) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; ) + theme( axis.text.x = element_text(size = 7) ) ggplot2::ggsave( &quot;../data/qlty_fltr_comp_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(contrast)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;filtering mode&quot; , &quot;median difference&lt;br&gt;F-score&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$contrast))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.18: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts filtering mode median differenceF-score HDI low HDI high ultra high - high aggressive 0.02 -0.15 0.20 moderate 0.02 -0.15 0.20 mild 0.02 -0.15 0.20 disabled 0.02 -0.15 0.20 ultra high - medium aggressive 0.08 -0.10 0.27 moderate 0.08 -0.09 0.27 mild 0.08 -0.10 0.26 disabled 0.08 -0.10 0.26 ultra high - low aggressive 0.14 -0.05 0.33 moderate 0.14 -0.06 0.32 mild 0.12 -0.07 0.31 disabled 0.12 -0.07 0.31 ultra high - lowest aggressive 0.26 -0.01 0.47 moderate 0.27 -0.01 0.47 mild 0.26 -0.02 0.46 disabled 0.25 -0.03 0.46 high - medium aggressive 0.06 -0.12 0.24 moderate 0.05 -0.12 0.23 mild 0.05 -0.12 0.24 disabled 0.05 -0.12 0.23 high - low aggressive 0.11 -0.07 0.30 moderate 0.11 -0.07 0.30 mild 0.10 -0.08 0.28 disabled 0.10 -0.08 0.29 high - lowest aggressive 0.23 -0.02 0.44 moderate 0.24 -0.02 0.44 mild 0.23 -0.02 0.44 disabled 0.23 -0.03 0.43 medium - low aggressive 0.05 -0.13 0.22 moderate 0.05 -0.12 0.23 mild 0.04 -0.12 0.23 disabled 0.04 -0.14 0.21 medium - lowest aggressive 0.17 -0.04 0.37 moderate 0.17 -0.04 0.37 mild 0.17 -0.05 0.37 disabled 0.16 -0.05 0.37 low - lowest aggressive 0.11 -0.07 0.31 moderate 0.12 -0.07 0.31 mild 0.12 -0.07 0.32 disabled 0.12 -0.07 0.32 6.7.2.5 Software:Quality - interaction It might be more important to understand the difference in F-score by dense cloud quality and software rather than filtering mode since filtering mode had such a small effect on the SfM predictive ability Are there differences in F-score based on dense point cloud generation quality within each different processing software? We will also address the similar but slightly different question of “are there differences in F-score based on the processing software used at a given dense point cloud generation quality?” Here, we collapse across the study site and filtering mode to compare the combined dense cloud quality and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws # get draws qlty_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate( med = tidybayes::median_hdci(value)$y ) # plot qlty_sftwr_draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::mutate( depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev() ) %&gt;% # plot ggplot( mapping = aes( y = value, x = software # , fill = software , fill = med ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.95 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + # scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_y_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;F-score&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;F-score&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.19: F-score95% HDI of the posterior predictive distribution quality F-scoremedian HDI low HDI high METASHAPE ultra high 0.61 0.40 0.82 high 0.59 0.38 0.80 medium 0.54 0.32 0.76 low 0.40 0.20 0.63 lowest 0.15 0.05 0.28 OPENDRONEMAP ultra high 0.59 0.37 0.80 high 0.50 0.28 0.72 medium 0.33 0.15 0.55 low 0.33 0.15 0.55 lowest 0.32 0.14 0.53 PIX4D ultra high 0.55 0.32 0.77 high 0.54 0.31 0.76 medium 0.54 0.32 0.77 low 0.47 0.25 0.70 we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_quality) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,040,000 ## Columns: 17 ## Groups: contrast, software [26] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; -0.0502782314, -0.0614947682, 0.0277093118, -0.073… ## $ median_hdi_est &lt;dbl&gt; 0.01640508, 0.01640508, 0.01640508, 0.01640508, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.08128401, -0.08128401, -0.08128401, -0.08128401… ## $ median_hdi_upper &lt;dbl&gt; 0.11623, 0.11623, 0.11623, 0.11623, 0.11623, 0.116… ## $ is_gt_zero &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALS… ## $ pct_gt_zero &lt;dbl&gt; 0.630175, 0.630175, 0.630175, 0.630175, 0.630175, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=63%&quot;, &quot;Pr(ultra high&gt;high)=63… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=63%&quot;, &quot;Pr(&gt;0)=63%&quot;, &quot;Pr(&gt;0)=63%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1249473, 0.1249473, 0.1249473, 0.1249473, 0.1249… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 2.0 , x_expand = c(0.56,0.9) # c(0,0.7) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other contrasts for publication ptchwrk_qlty_sftwr_comp = plt_contrast( brms_contrast_temp , y_axis_title = &quot;quality contrast&quot; , facet = &quot;software&quot; , label_size = 1.35 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.75 ) + labs( subtitle = &quot;&quot; , x = &quot;F-score contrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_qlty_sftwr_comp and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;median difference&lt;br&gt;F-score&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.20: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast median differenceF-score HDI low HDI high METASHAPE ultra high - high 0.02 -0.08 0.12 ultra high - medium 0.07 -0.03 0.17 ultra high - low 0.20 0.09 0.30 ultra high - lowest 0.46 0.32 0.57 high - medium 0.05 -0.04 0.15 high - low 0.18 0.08 0.28 high - lowest 0.44 0.30 0.56 medium - low 0.13 0.03 0.23 medium - lowest 0.38 0.25 0.51 low - lowest 0.25 0.13 0.37 OPENDRONEMAP ultra high - high 0.08 -0.02 0.18 ultra high - medium 0.24 0.13 0.34 ultra high - low 0.24 0.14 0.35 ultra high - lowest 0.26 0.15 0.36 high - medium 0.16 0.06 0.27 high - low 0.16 0.06 0.27 high - lowest 0.18 0.07 0.28 medium - low 0.00 -0.09 0.10 medium - lowest 0.01 -0.09 0.12 low - lowest 0.01 -0.08 0.12 PIX4D ultra high - high 0.01 -0.11 0.12 ultra high - medium 0.01 -0.11 0.12 ultra high - low 0.07 -0.04 0.19 high - medium 0.00 -0.11 0.12 high - low 0.06 -0.05 0.18 medium - low 0.06 -0.05 0.18 The contrasts above address the question “are there differences in F-score based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in F-score based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter1 == software, depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter2 == software, depth_maps_generation_quality) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 520,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_quality [13] ## $ depth_maps_generation_quality &lt;ord&gt; ultra high, ultra high, ultra high, ultr… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ sorter1 &lt;chr&gt; &quot;OPENDRONEMAP&quot;, &quot;OPENDRONEMAP&quot;, &quot;OPENDRO… ## $ sorter2 &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMA… ## $ value &lt;dbl&gt; 0.042159383, 0.026812062, -0.048880389, … ## $ median_hdi_est &lt;dbl&gt; -0.02460791, -0.02460791, -0.02460791, -… ## $ median_hdi_lower &lt;dbl&gt; -0.14867, -0.14867, -0.14867, -0.14867, … ## $ median_hdi_upper &lt;dbl&gt; 0.09981064, 0.09981064, 0.09981064, 0.09… ## $ is_gt_zero &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,… ## $ pct_gt_zero &lt;dbl&gt; 0.65855, 0.65855, 0.65855, 0.65855, 0.65… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=66%&quot;, &quot;Pr(MtaShp&gt;ODM)=66… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=66%&quot;, &quot;Pr(&lt;0)=66%&quot;, &quot;Pr(&lt;0)=66%&quot;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.1598202, -0.1598202, -0.1598202, -0.1… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 2.0 , x_expand = c(0.17,0.14) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) ggplot2::ggsave( &quot;../data/sftwr_qlty_comp_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other contrasts for publication ptchwrk_sftwr_qlty_comp = plt_contrast( brms_contrast_temp , y_axis_title = &quot;software contrast&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 3) + labs( subtitle = &quot;&quot; , x = &quot;F-score constrast&quot; ) + theme( legend.position = &quot;inside&quot; , legend.position.inside = c(.8, .11) , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) # ptchwrk_sftwr_qlty_comp and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) table_temp %&gt;% dplyr::select(-c(contrast)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality&quot; , &quot;median difference&lt;br&gt;F-score&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$contrast))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.21: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality median differenceF-score HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -0.02 -0.15 0.10 high -0.09 -0.21 0.04 medium -0.20 -0.32 -0.07 low -0.07 -0.19 0.06 lowest 0.17 0.05 0.29 PIX4D - METASHAPE ultra high -0.06 -0.20 0.07 high -0.05 -0.19 0.08 medium 0.00 -0.13 0.14 low 0.06 -0.07 0.20 PIX4D - OPENDRONEMAP ultra high -0.04 -0.18 0.10 high 0.03 -0.10 0.17 medium 0.20 0.06 0.33 low 0.13 0.00 0.27 6.7.2.6 Software:Filtering - interaction Are there differences in F-score based on dense point cloud filtering mode within each processing software? Here, we collapse across the study site and depth map generation quality to compare the combined filtering mode and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws Even though filtering mode had a small effect on the SfM predictive ability when averaging across all softwares, there might still be differences in filtering mode within software when we average across all depth map generation quality settings. Let’s check the difference in F-score by depth map filtering mode and software. # get draws fltr_sftwr_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot fltr_sftwr_draws_temp %&gt;% ggplot( mapping = aes( y = value, x = software # , fill = software , fill = med ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.95 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + # scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_y_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby filtering mode&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;F-score&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;F-score&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.22: F-score95% HDI of the posterior predictive distribution filtering mode F-scoremedian HDI low HDI high METASHAPE aggressive 0.35 0.14 0.60 moderate 0.43 0.20 0.69 mild 0.51 0.26 0.76 disabled 0.50 0.26 0.75 OPENDRONEMAP aggressive 0.44 0.21 0.70 moderate 0.42 0.19 0.68 mild 0.42 0.19 0.67 disabled 0.41 0.18 0.67 PIX4D moderate 0.46 0.21 0.71 mild 0.50 0.25 0.75 disabled 0.49 0.25 0.75 we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 600,000 ## Columns: 17 ## Groups: contrast, software [15] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggressive, ag… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggressive, mode… ## $ value &lt;dbl&gt; 0.12630997, 0.07866606, 0.08168168, 0.08657663, 0.… ## $ median_hdi_est &lt;dbl&gt; 0.07955207, 0.07955207, 0.07955207, 0.07955207, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.002614075, -0.002614075, -0.002614075, -0.00261… ## $ median_hdi_upper &lt;dbl&gt; 0.1696683, 0.1696683, 0.1696683, 0.1696683, 0.1696… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… ## $ pct_gt_zero &lt;dbl&gt; 0.973175, 0.973175, 0.973175, 0.973175, 0.973175, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=97%&quot;, &quot;Pr(moderate&gt;aggres… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=97%&quot;, &quot;Pr(&gt;0)=97%&quot;, &quot;Pr(&gt;0)=97%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1823934, 0.1823934, 0.1823934, 0.1823934, 0.1823… ## $ sig_level &lt;ord&gt; 95%, 95%, 95%, 95%, 95%, 95%, 95%, 95%, 95%, 95%, … plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; , facet = &quot;software&quot; , label_size = 2.0 , x_expand = c(1.8,1.8) # c(1,1.4) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) ggplot2::ggsave( &quot;../data/fltr_sftwr_comp_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_fltr_sftwr_comp = plt_contrast( brms_contrast_temp , y_axis_title = &quot;filtering mode contrast&quot; , facet = &quot;software&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + labs( subtitle = &quot;&quot; # &quot;constrast Height RMSE (m)&quot; , x = &quot;F-score constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_fltr_sftwr_comp and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;filtering contrast&quot; , &quot;median difference&lt;br&gt;F-score&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.23: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts filtering contrast median differenceF-score HDI low HDI high METASHAPE disabled - mild -0.01 -0.09 0.08 disabled - moderate 0.06 -0.02 0.15 disabled - aggressive 0.15 0.05 0.25 mild - moderate 0.07 -0.01 0.16 mild - aggressive 0.15 0.05 0.25 moderate - aggressive 0.08 0.00 0.17 OPENDRONEMAP disabled - mild -0.01 -0.09 0.08 disabled - moderate -0.01 -0.09 0.08 disabled - aggressive -0.03 -0.12 0.06 mild - moderate 0.00 -0.08 0.08 mild - aggressive -0.02 -0.11 0.07 moderate - aggressive -0.02 -0.11 0.06 PIX4D disabled - mild 0.00 -0.09 0.09 disabled - moderate 0.03 -0.05 0.12 mild - moderate 0.03 -0.05 0.13 6.7.2.7 Software:Quality:Filtering - interaction The contrasts immediately above address the question “are there differences in F-score based on dense point cloud filtering mode within each software?”. Although the impact of filtering mode is small, it is highly probable when averaging across all quality settings. What if we don’t average out the impact of quality and instead get the full, three-way interaction between software, quality, and filtering mode? Let’s get the model’s answer to the question “For each software, are there differences in F-score based on dense point cloud filtering mode within each point cloud generation quality?”. Here, we collapse across the study site to compare the dense cloud quality, filtering mode, and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # let&#39;s add the grand mean to the plot for reference grand_mean_temp = brms::posterior_summary(brms_f_mod5) %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::filter( parameter == &quot;Intercept&quot; ) %&gt;% dplyr::mutate(dplyr::across(-c(parameter), ~plogis(.))) %&gt;% dplyr::pull(estimate) # plot fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode # , fill = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = grand_mean_temp, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.95 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + # scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_y_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + labs( fill = &quot;&quot; , x = &quot;filtering mode&quot;, y = &quot;F-score&quot; # , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality and software&quot; , subtitle = &quot;quality&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , plot.subtitle = element_text(hjust = 0.5) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) let’s add a table of the results table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;F-score&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.24: brms::brm model: 95% HDI of the posterior predictive distribution software quality filtering mode F-scoremedian HDI low HDI high METASHAPE lowest aggressive 0.09 0.03 0.19 moderate 0.13 0.05 0.26 mild 0.18 0.06 0.34 disabled 0.18 0.07 0.34 low aggressive 0.30 0.13 0.49 moderate 0.38 0.20 0.60 mild 0.47 0.26 0.68 disabled 0.46 0.26 0.68 medium aggressive 0.43 0.23 0.65 moderate 0.53 0.31 0.74 mild 0.60 0.39 0.80 disabled 0.59 0.39 0.80 high aggressive 0.49 0.29 0.71 moderate 0.58 0.37 0.78 mild 0.65 0.44 0.83 disabled 0.64 0.43 0.82 ultra high aggressive 0.51 0.31 0.73 moderate 0.60 0.40 0.80 mild 0.66 0.46 0.84 disabled 0.66 0.46 0.84 OPENDRONEMAP lowest aggressive 0.32 0.15 0.53 moderate 0.30 0.14 0.50 mild 0.31 0.14 0.52 disabled 0.31 0.14 0.51 low aggressive 0.34 0.16 0.55 moderate 0.32 0.15 0.52 mild 0.33 0.16 0.54 disabled 0.32 0.14 0.52 medium aggressive 0.35 0.17 0.56 moderate 0.32 0.15 0.53 mild 0.32 0.15 0.53 disabled 0.32 0.15 0.52 high aggressive 0.52 0.31 0.74 moderate 0.49 0.28 0.70 mild 0.49 0.28 0.70 disabled 0.48 0.28 0.70 ultra high aggressive 0.60 0.40 0.80 moderate 0.58 0.37 0.78 mild 0.58 0.37 0.78 disabled 0.56 0.35 0.77 PIX4D low moderate 0.45 0.25 0.67 mild 0.50 0.29 0.72 disabled 0.50 0.29 0.72 medium moderate 0.53 0.32 0.74 mild 0.56 0.35 0.77 disabled 0.56 0.35 0.77 high moderate 0.53 0.32 0.74 mild 0.56 0.35 0.77 disabled 0.56 0.34 0.76 ultra high moderate 0.54 0.33 0.76 mild 0.57 0.36 0.78 disabled 0.56 0.35 0.77 we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter1==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter2==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 2,880,000 ## Columns: 18 ## Groups: contrast, software, depth_maps_generation_quality [72] ## $ depth_maps_generation_quality &lt;ord&gt; ultra high, ultra high, ultra high, ultr… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggr… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggres… ## $ value &lt;dbl&gt; 0.12558985, 0.09105310, 0.08415801, 0.08… ## $ median_hdi_est &lt;dbl&gt; 0.08333826, 0.08333826, 0.08333826, 0.08… ## $ median_hdi_lower &lt;dbl&gt; -0.02002375, -0.02002375, -0.02002375, -… ## $ median_hdi_upper &lt;dbl&gt; 0.1847667, 0.1847667, 0.1847667, 0.18476… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE… ## $ pct_gt_zero &lt;dbl&gt; 0.9482, 0.9482, 0.9482, 0.9482, 0.9482, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=95%&quot;, &quot;Pr(moder… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=95%&quot;, &quot;Pr(&gt;0)=95%&quot;, &quot;Pr(&gt;0)=95%&quot;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1986242, 0.1986242, 0.1986242, 0.19862… ## $ sig_level &lt;ord&gt; 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, … plot it brms_contrast_temp %&gt;% plt_contrast( facet = c(&quot;depth_maps_generation_quality&quot;, &quot;software&quot;) , y_axis_title = &quot;filtering mode&quot; , label_size = 0 , x_expand = c(-0.1,-0.1) ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality and software&quot; ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_comp_mod5.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) 6.7.2.8 Quality - main effect let’s collapse across the filtering mode, software, and study site to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality # , fill = depth_maps_generation_quality , fill = med ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + # scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_x_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + # scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; # , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our one nominal predictor model above, two nominal predictor model above, three nominal predictor model above, and three nominal predictor + site effects model above ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod5&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws(brms_f_mod1) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod1&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_quality), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + # scale_color_viridis_d(option = &quot;turbo&quot;, begin = 0.2, end = 0.8) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) we can also perform pairwise comparisons after collapsing across the filtering mode, software, and study site to compare the dense cloud quality setting effect brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 400,000 ## Columns: 16 ## Groups: contrast [10] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; -0.037051693, 0.077710938, 0.032518207, 0.02137125… ## $ median_hdi_est &lt;dbl&gt; 0.02227479, 0.02227479, 0.02227479, 0.02227479, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.1425197, -0.1425197, -0.1425197, -0.1425197, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.1992295, 0.1992295, 0.1992295, 0.1992295, 0.1992… ## $ is_gt_zero &lt;lgl&gt; FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, F… ## $ pct_gt_zero &lt;dbl&gt; 0.621175, 0.621175, 0.621175, 0.621175, 0.621175, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=62%&quot;, &quot;Pr(ultra high&gt;high)=62… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.2141717, 0.2141717, 0.2141717, 0.2141717, 0.2141… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.25: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast difference (F-score) HDI low HDI high ultra high - high 0.02 -0.14 0.20 ultra high - medium 0.08 -0.09 0.26 ultra high - low 0.13 -0.05 0.32 ultra high - lowest 0.26 -0.01 0.46 high - medium 0.05 -0.12 0.23 high - low 0.10 -0.07 0.29 high - lowest 0.23 -0.02 0.43 medium - low 0.04 -0.13 0.22 medium - lowest 0.17 -0.04 0.37 low - lowest 0.12 -0.06 0.31 6.7.2.9 Filtering - main effect let’s collapse across the dense cloud quality, software, and study site to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode # , fill = depth_maps_generation_filtering_mode , fill = med ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + # scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_x_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; # , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our two nominal predictor model above, three nominal predictor model above, and three nominal predictor + site model above ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod5&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod2 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod2&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(depth_maps_generation_filtering_mode), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[2:5]) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) we can also perform pairwise comparisons after collapsing across the dense cloud quality, software, and study site to compare the filtering mode setting effect. brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 240,000 ## Columns: 16 ## Groups: contrast [6] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggressive, ag… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggressive, mode… ## $ value &lt;dbl&gt; -0.021519265, -0.038456122, 0.005716817, 0.0431443… ## $ median_hdi_est &lt;dbl&gt; 0.006865148, 0.006865148, 0.006865148, 0.006865148… ## $ median_hdi_lower &lt;dbl&gt; -0.07420937, -0.07420937, -0.07420937, -0.07420937… ## $ median_hdi_upper &lt;dbl&gt; 0.1128279, 0.1128279, 0.1128279, 0.1128279, 0.1128… ## $ is_gt_zero &lt;lgl&gt; FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE… ## $ pct_gt_zero &lt;dbl&gt; 0.618725, 0.618725, 0.618725, 0.618725, 0.618725, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=62%&quot;, &quot;Pr(moderate&gt;aggres… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1212899, 0.1212899, 0.1212899, 0.1212899, 0.1212… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;filtering mode contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.26: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts filtering mode contrast difference (F-score) HDI low HDI high disabled - mild 0.00 -0.09 0.08 disabled - mild 0.00 0.08 0.08 disabled - moderate 0.01 -0.06 0.11 disabled - aggressive 0.02 -0.05 0.14 disabled - aggressive 0.02 0.15 0.15 mild - moderate 0.01 -0.06 0.11 mild - aggressive 0.02 -0.05 0.15 mild - aggressive 0.02 0.15 0.15 moderate - aggressive 0.01 -0.07 0.11 moderate - aggressive 0.01 0.12 0.12 6.7.2.10 Software - main effect to address one of our main questions, let’s also collapse across the study site, dense cloud quality, and filtering mode setting to compare the software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) %&gt;% # plot ggplot( mapping = aes( x = value, y = software # , fill = software , fill = med ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + # scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_fill_viridis_c(option = &quot;mako&quot;, direction=-1, begin = 0.2, end = 0.8, limits = c(0,1)) + scale_x_continuous(limits = c(0,1), breaks = scales::extended_breaks(n=8)) + labs( y = &quot;software&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; # , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) let’s compare these results to the results from our three nominal predictor model above and three nominal predictor + site effects model above ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod5 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod5&quot;) %&gt;% dplyr::bind_rows( ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod4 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod4&quot;) , ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod3 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::mutate(value = .epred, src = &quot;brms_f_mod3&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = value, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + facet_grid(rows = vars(software), switch = &quot;y&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[3:5]) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) we can also perform pairwise comparisons after collapsing across the filtering mode, dense cloud quality setting, and study site to compare the software main effect brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod5, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 120,000 ## Columns: 14 ## Groups: contrast [3] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMAP - METASH… ## $ value &lt;dbl&gt; 0.014937640, 0.010701705, 0.032983125, 0.034905587… ## $ median_hdi_est &lt;dbl&gt; -0.008949634, -0.008949634, -0.008949634, -0.00894… ## $ median_hdi_lower &lt;dbl&gt; -0.1611271, -0.1611271, -0.1611271, -0.1611271, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.1125752, 0.1125752, 0.1125752, 0.1125752, 0.1125… ## $ is_gt_zero &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 0.602925, 0.602925, 0.602925, 0.602925, 0.602925, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=60%&quot;, &quot;Pr(MtaShp&gt;ODM)=60%&quot;, &quot;Pr(Mt… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=60%&quot;, &quot;Pr(&lt;0)=60%&quot;, &quot;Pr(&lt;0)=60%&quot;, &quot;Pr(&lt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.1732117, -0.1732117, -0.1732117, -0.1732117, -0… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;software&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;software contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.27: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts software contrast difference (F-score) HDI low HDI high OPENDRONEMAP - METASHAPE -0.01 -0.16 0.11 PIX4D - METASHAPE 0.01 -0.12 0.17 PIX4D - METASHAPE 0.01 0.18 0.18 PIX4D - OPENDRONEMAP 0.02 -0.10 0.20 6.7.2.11 \\(\\sigma\\) posteriors Finally, we can quantify the variation in F-score by comparing the \\(\\sigma\\) (sd) posteriors unsure about the scale of the \\(\\sigma\\) parameters are on in the beta model. Here, we invert the logit sd values from the model using plogis() which converts the parameter values to a probability/proportion (e.g.; 0-1) because they are parameters of the intercept and interaction effects so must be on the transformed (link = \"logit\") scale…double check For a phenomenally excellent overview of binary logistic regression and how to interpret coefficients, see Steven Miller’s most excellent lab script here # tidybayes::get_variables(brms_f_mod5) # extract the posterior draws brms::as_draws_df(brms_f_mod5) %&gt;% dplyr::select(c(tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) , value = plogis(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot; # , caption = form_temp ) + theme_light() Variance of study site is stronger than variance of depth map generation quality, but the posterior predictive distributions overlap a good deal. The study site (the “subjects” in our study) seems to have the overall strongest effect, but this comes with high uncertainty. Taken alone, the influence of quality, filtering, and software comes with huge uncertainty. This makes sense as the influence of software largely depends on the depth map generation quality, of which we are fairly certain. Filtering mode has the overall weakest effect on tree detection and this comes with relatively high certainty, especially conditional on the depth map generation quality. and perform model selection via information criteria with the brms::loo_compare() function brms_f_mod5 = brms::add_criterion(brms_f_mod5, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms_f_mod1, brms_f_mod2, brms_f_mod3, brms_f_mod4, brms_f_mod5, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms_f_mod5 0.0 0.0 ## brms_f_mod4 -1.1 6.3 ## brms_f_mod3 -92.0 11.5 ## brms_f_mod1 -92.4 11.2 ## brms_f_mod2 -94.1 11.2 # brms::model_weights(brms_f_mod1, brms_f_mod2, brms_f_mod3, brms_f_mod4) %&gt;% round(3) 6.7.2.12 Additional Plots for Export patchwork of F-score contrasts layout_temp = c( # area(t, l, b, r) patchwork::area(2, 1, 2, 1) , patchwork::area(2, 3, 2, 3) , patchwork::area(4, 1, 4, 3) ) # check the layout # plot(layout_temp) ############################ # patchwork for height ############################ ptchwrk_qlty_sftwr_comp + labs(subtitle = &quot;A: Quality Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + ptchwrk_fltr_sftwr_comp + labs(subtitle = &quot;B: Filtering Mode Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + patchwork::free( ptchwrk_sftwr_qlty_comp + labs(subtitle = &quot;C: Software Contrast by Quality&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) ) + # plot_annotation(tag_levels = list(c(&#39;#&#39;, &#39;&amp;&#39;), &#39;1&#39;)) + patchwork::plot_layout( design = layout_temp , widths = c(1,0.01,1) , heights = c(0.01,1,0.01,1,0.01) ) &amp; scale_x_continuous( limits = c(-0.58,0.96) , breaks = seq(-0.8,0.8,0.4) , labels = seq(-0.8,0.8,0.4) %&gt;% scales::number(accuracy = 0.1) ) &amp; theme( axis.title.y = element_blank() , plot.subtitle = element_text(face = &quot;bold&quot;, hjust = 0.0) # , plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3) ) ggplot2::ggsave( filename = paste0(&quot;../data/all_fscore_contrasts.jpeg&quot;) , plot = ggplot2::last_plot() , width = 11 , height = 8.5 , units = &quot;in&quot; , dpi = &quot;print&quot; ) 6.8 Heterogeneous variances and robustness against outliers In our previous model of the data \\(y_i\\) described by a beta distribution with three nominal predictors and site effects our posterior predictive checks indicated potential improvements for our model fit. Kruschke (2015) notes: As was mentioned earlier in the chapter, we have assumed normally distributed data within groups, and equal variances across the groups, merely for simplicity and for consistency with traditional ANOVA. We can relax those assumptions in Bayesian software. In this section, we use t distributed noise instead of normal distributions, and we provide every group with its own standard-deviation parameter. Moreover, we put a hierarchical prior on the standard-deviation parameters, so that each group mutually informs the standard deviations of the other groups via the higher-level distribution…Instead of there being a single \\(\\sigma_y\\) parameter that applies to all groups, each group has its own scale parameter, \\(\\sigma_j\\). (p. 573-574) and see section 20 from Kurz’s ebook supplement 6.8.1 Bayesian With the beta likelihood our model with three nominal predictor variables, subject-level effects, and heterogeneous variances and robustness against outliers the model becomes: \\[\\begin{align*} y_{i} \\sim &amp; \\operatorname{Beta} \\bigl(\\mu_{i}, , \\phi_{[jkf](i)} \\bigr) \\\\ \\operatorname{logit}(\\mu_{i}) = &amp; \\beta_0 \\\\ &amp; + \\sum_{j} \\beta_{1[j]} x_{1[j]} + \\sum_{k} \\beta_{2[k]} x_{2[k]} + \\sum_{f} \\beta_{3[f]} x_{3[f]} + \\sum_{s} \\beta_{4[s]} x_{4[s]} \\\\ &amp; + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{j,f} \\beta_{1\\times3[j,f]} x_{1\\times3[j,f]} + \\sum_{k,f} \\beta_{2\\times3[k,f]} x_{2\\times3[k,f]} \\\\ &amp; + \\sum_{j,k,f} \\beta_{1\\times2\\times3[j,k,f]} x_{1\\times2\\times3[j,k,f]} \\\\ \\beta_{0} \\sim &amp; \\operatorname{Normal}(0,1) \\\\ \\beta_{1[j]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2}}) \\\\ \\beta_{3[f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{3}}) \\\\ \\beta_{4[s]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{4}}) \\\\ \\beta_{1\\times2[j,k]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{1\\times3[j,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{1\\times3}}) \\\\ \\beta_{2\\times3[k,f]} \\sim &amp; \\operatorname{Normal}(0,\\sigma_{\\beta_{2\\times3}}) \\\\ \\sigma_{\\beta_{1}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{4}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times2}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{1\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\sigma_{\\beta_{2\\times3}} \\sim &amp; \\operatorname{Gamma}(1.28,0.005) \\\\ \\phi_{[jkf](i)} \\sim &amp; \\operatorname{Gamma}(\\alpha,\\theta) \\\\ \\alpha \\sim &amp; {\\sf XXX} (xxx,xxx) \\\\ \\theta \\sim &amp; {\\sf XXX} (xxx,xxx) \\end{align*}\\] !!!! Need to check how our \\(\\phi_{[jkf](i)}\\) is distributed , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\), \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\), \\(f\\) is the processing software corresponding to observation \\(i\\), and \\(s\\) is the study site corresponding to observation \\(i\\) brms allows us to model the precision (\\(\\phi\\)) but it is not required. If \\(\\phi\\) is not modeled, you still get a precision component, but it is universal across all the different coefficients (it doesn’t vary across any variables in the model). Heiss explains that: for whatever mathy reasons, when you don’t explicitly model the precision, the resulting coefficient in the table isn’t on the log scale—it’s a regular non-logged number, so there’s no need to exponentiate. in thie brms community post it is similarly noted that: If you don’t predict the parameters, you give priors for them on non-transformed scale. When you predict them, the predictors become linear coefficients as any other and work on the transformed scale - the transformations are specified by the link_XX parameters of the families (and you can change them if you need). Need to check our prior selection…just go with brms defaults for now Now fit the model. brms_f_mod5_5 = brms::brm( formula = brms::bf( ### model for y f_score ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ### model for phi , phi ~ 1 + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) , data = ptcld_validation_data , family = Beta(link = &quot;logit&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms_f_mod5_5&quot;) ) # brms::make_stancode(brms_f_mod5_5) # print(brms_f_mod5_5) # brms::prior_summary(brms_f_mod5_5) 6.8.1.1 Posterior Predictive Checks Markov chain Monte Carlo (MCMC) simulations were conducted using the brms package (Bürkner 2017) to estimate posterior predictive distributions of the parameters of interest. We ran three chains of 100,000 iterations with the first 50,000 discarded as burn-in. Trace-plots were utilized to visually assess model convergence and sufficient convergence was checked with \\(\\hat{R}\\) values near 1 (Brooks &amp; Gelman, 1998). Posterior predictive checks were used to evaluate model goodness-of-fit by comparing data simulated from the model with the observed data used to estimate the model parameters (Hobbs &amp; Hooten, 2015). Calculating the proportion of MCMC iterations in which the test statistic (i.e., mean and sum of squares) from the simulated data and observed data are more extreme than one another provides the Bayesian P-value. Lack of fit is indicated by a value close to 0 or 1 while a value of 0.5 indicates perfect fit (Hobbs &amp; Hooten, 2015). To learn more about this approach to posterior predictive checks, check out Gabry’s (2022) vignette, Graphical posterior predictive checks using the bayesplot package. check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod5_5) and check our \\(\\hat{R}\\) values brms_f_mod5_5 %&gt;% brms::rhat() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::rename(rhat = 2) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;phi&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) , chk = (rhat &lt;= 1*0.998 | rhat &gt;= 1*1.002) ) %&gt;% ggplot(aes(x = rhat, y = parameter, color = chk, fill = chk)) + geom_vline(xintercept = 1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1.2) + geom_vline(xintercept = 1*0.998, lwd = 1.5) + geom_vline(xintercept = 1*1.002, lwd = 1.5) + geom_vline(xintercept = 1*0.999, lwd = 1.2, color = &quot;gray33&quot;) + geom_vline(xintercept = 1*1.001, lwd = 1.2, color = &quot;gray33&quot;) + geom_point() + scale_fill_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_color_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + labs( x = latex2exp::TeX(&quot;$\\\\hat{R}$&quot;) , subtitle = latex2exp::TeX(&quot;posterior-predictive check for parameter $\\\\hat{R}$ estimates&quot;) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 4) , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() ) posterior-predictive check to make sure the model does an okay job simulating data that resemble the sample data # posterior predictive check brms::pp_check( brms_f_mod5_5 , type = &quot;dens_overlay&quot; , ndraws = 100 ) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) ggplot2::ggsave(&quot;../data/ppchk_ovrll_mod5_5.png&quot;, height = 7, width = 10.5) another way brms::pp_check(brms_f_mod5_5, type = &quot;ecdf_overlay&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (ECDF: empirical cumulative distribution function)&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) and another posterior predictive check for the overall model # means p1_temp = brms::pp_check( brms_f_mod5_5 , type = &quot;stat&quot; , stat = &quot;mean&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms_f_mod5_5 , type = &quot;stat&quot; , stat = &quot;sd&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + theme_light() # combine (p1_temp + p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\noverall model&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) and another posterior predictive check for the overall model combining mean and sd brms::pp_check(brms_f_mod5_5, type = &quot;stat_2d&quot;) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) How’d we do capturing the conditional means and standard deviations by depth map generation quality? # means p1_temp = brms::pp_check( brms_f_mod5_5 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;mean&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms_f_mod5_5 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;sd&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # combine (p1_temp / p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\nby dense cloud quality&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) ggplot2::ggsave(&quot;../data/ppchk_qlty_mod5_5.png&quot;, height = 7, width = 10.5) Both the means and sd’s of the F-score are well represented across the different levels of dense cloud quality What about for the software? pp_check(brms_f_mod5_5, &quot;dens_overlay_grouped&quot;, group = &quot;software&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby software&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) ggplot2::ggsave(&quot;../data/ppchk_sftwr_mod5_5.png&quot;, height = 7, width = 10.5) and what about for the filtering mode? pp_check(brms_f_mod5_5, &quot;dens_overlay_grouped&quot;, group = &quot;depth_maps_generation_filtering_mode&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby filtering mode&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) We didn’t see much change in our posterior predictive checks compared to our previous model of the data \\(y_i\\) described by a beta distribution with three nominal predictors and site effects our posterior predictive checks. The Bayesian p-value is the probability that a test statistic in the reference distribution exceeds its value in the data. The Bayesian p-value is calculated from the posterior predictive distribution of the new data and the distribution of the observed data. We estimate the probability that the test statistic calculated from “new” data arising from our model (\\(y_{new}\\)) is more extreme than the test statistic calculated from the observed data (\\(y\\)): \\(\\text{P-value}(y) = Pr(T(y_{new}) &gt; T(y))\\) where the test statistic \\(T(y)\\) describes the distribution of the data as a summary of the data; it could be the mean, variance, the coefﬁcient of variation, the kurtosis, the maximum, or the minimum of the observed data set, or it might be an “omnibus” statistic like a squared discrepancy or a chi-square value Hobbs and Hooten (2015, p. 188) Bayesian P values for mean and standard deviation test statistics The P values for the mean (P mean) give the probability that the mean of the data of new, out-of-sample observations simulated from the model exceeds the mean of the observed data. The P values for the standard deviation (P SD) give the probability that the standard deviation of new, out-of-sample observations simulated from the model exceeds the standard deviation of the observed data. Large (\\(\\gtrapprox 0.90\\)) or small (\\(\\lessapprox 0.10\\)) values indicate lack of fit. Hobbs and Hooten (2015);Hobbs et al. (2024, Appendix S2 p. 8) Check the Bayesian p-values between the models get_mod_p_val = function(my_mod, ndraws = 1000){ # get draws from the posterior predictive distribution brms::posterior_predict(my_mod, ndraws = ndraws) %&gt;% dplyr::as_tibble() %&gt;% dplyr::mutate(draw = dplyr::row_number()) %&gt;% tidyr::pivot_longer(cols = -draw, values_to = &quot;y_rep&quot;) %&gt;% dplyr::mutate(y_n = readr::parse_number(name)) %&gt;% # join with original data dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::select(f_score) %&gt;% dplyr::rename(y=f_score) %&gt;% dplyr::mutate(y_n = dplyr::row_number()) , by = dplyr::join_by(&quot;y_n&quot;) ) %&gt;% dplyr::select(-c(y_n)) %&gt;% dplyr::group_by(draw) %&gt;% # make test statistic dplyr::summarise( # test statistics y mean_y = mean(y) , sd_y = sd(y) # test statistics y_sim , mean_y_rep = mean(y_rep) , sd_y_rep = sd(y_rep) ) %&gt;% # p-values dplyr::ungroup() %&gt;% dplyr::mutate( p_val_mean = as.numeric(mean_y_rep &gt; mean_y) , p_val_sd = as.numeric(sd_y_rep &gt; sd_y) ) %&gt;% # summarize p-vals dplyr::summarise( P.mean = mean(p_val_mean) , P.sd = mean(p_val_sd) ) } # get the model p-values dplyr::bind_rows( get_mod_p_val(brms_f_mod4, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_f_mod4&quot;) , get_mod_p_val(brms_f_mod5, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_f_mod5&quot;) , get_mod_p_val(brms_f_mod5_5, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_f_mod5_5&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2) %&gt;% kableExtra::kable_styling() model P.mean P.sd brms_f_mod4 0.51 0.60 brms_f_mod5 0.23 0.88 brms_f_mod5_5 0.34 0.87 perhaps we should use brms_f_mod4 in which we modeled F-score presuming a Gaussian likelihood??? What are the pros and cons? Surely, an accurate representation of the \\(y_i\\) data (as represented by the beta distribution) is meaningful even if “worse” p-values are found. let’s perform model selection via information criteria with the brms::loo_compare() function to check brms_f_mod5_5 = brms::add_criterion(brms_f_mod5_5, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) brms::loo_compare(brms_f_mod1, brms_f_mod2, brms_f_mod3, brms_f_mod4, brms_f_mod5, brms_f_mod5_5, criterion = &quot;loo&quot;) ## elpd_diff se_diff ## brms_f_mod5 0.0 0.0 ## brms_f_mod4 -1.1 6.3 ## brms_f_mod5_5 -7.4 4.3 ## brms_f_mod3 -92.0 11.5 ## brms_f_mod1 -92.4 11.2 ## brms_f_mod2 -94.1 11.2 # brms::model_weights(brms_f_mod1, brms_f_mod2, brms_f_mod3, brms_f_mod4) %&gt;% round(3) The information criteria suggests that we continue with brms_f_mod5 in which \\(y_i\\) is described by a beta distribution with three nominal predictors and site effects and we did not model dispersion, instead using a single \\(\\phi_y\\) parameter that applies to all groups 6.9 Overstory and Understory Validation In our validation data creation process we calculated F-score for overstory and understory trees separately. Here, let’s add a factor variable with levels for overstory and understory as a predictor to our final model from above. The overall F-score is not the same as combining the overstory and understory F-score by calculating the mean of these values due to the differing number of observations in each. To build this model we need to convert our data to long format so that a row is also unique by our overstory/understory factor. Each study site contributes one observation per dense cloud quality, filtering mode, software, and overstory/understory factor. That is, a row in the underlying data is unique by study site, software, dense cloud quality, filtering mode, and overstory/understory factor. 6.9.1 Summary Statistics ou_ptcld_validation_data = ptcld_validation_data %&gt;% dplyr::select( study_site, software , depth_maps_generation_quality , depth_maps_generation_filtering_mode # our dependent var in wide format , understory_f_score, overstory_f_score ) %&gt;% tidyr::pivot_longer( cols = tidyselect::ends_with(&quot;_f_score&quot;) , names_to = &quot;story&quot; , values_to = &quot;f_score&quot; , values_drop_na = F ) %&gt;% dplyr::mutate( story = story %&gt;% stringr::str_remove_all(&quot;_f_score&quot;) %&gt;% factor() ) # what is this data? ou_ptcld_validation_data %&gt;% dplyr::glimpse() ## Rows: 520 ## Columns: 6 ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;KA… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASH… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, high, hig… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, disabled,… ## $ story &lt;fct&gt; understory, overstory, understory… ## $ f_score &lt;dbl&gt; 0.2634731, 0.3461179, 0.4105263, … # a row is unique by... identical( nrow(ou_ptcld_validation_data) , ou_ptcld_validation_data %&gt;% dplyr::distinct( study_site, software , depth_maps_generation_quality , depth_maps_generation_filtering_mode , story ) %&gt;% nrow() ) ## [1] TRUE # and we should have 2 times the rows as the orignial data identical( nrow(ou_ptcld_validation_data) %&gt;% as.numeric() # long data , nrow(ptcld_validation_data)*2 %&gt;% as.numeric() # original wide data ) ## [1] TRUE quick summary stats ptcld_validation_data %&gt;% dplyr::select(tidyselect::ends_with(&quot;_f_score&quot;)) %&gt;% summary() ## overstory_f_score understory_f_score ## Min. :0.0001 Min. :0.0001 ## 1st Qu.:0.3250 1st Qu.:0.1372 ## Median :0.4992 Median :0.3448 ## Mean :0.5163 Mean :0.3271 ## 3rd Qu.:0.7297 3rd Qu.:0.5046 ## Max. :0.9408 Max. :0.7419 let’s check this data with our geom_tile plot # create function for combining plots with patchwork plt_tile_fn_temp = function(ss = &quot;overstory&quot;){ ou_ptcld_validation_data %&gt;% dplyr::filter(tolower(story) == tolower(ss)) %&gt;% dplyr::group_by(story, software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( mean_f_score = mean(f_score, na.rm = T) # , med_f_score = median(f_score, na.rm = T) , sd_f_score = sd(f_score, na.rm = T) , n = dplyr::n() ) %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = mean_f_score , label = paste0(scales::comma(mean_f_score,accuracy = 0.01), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_viridis_c( option = &quot;cividis&quot;, begin = 0.3, end = 0.9 , limits = c(0,0.75) ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;F-score&quot; , subtitle = &quot;mean F-score and # of study sites&quot; , title = toupper(ss) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() , plot.subtitle = element_text(hjust = 0.5) , plot.title = element_text(face = &quot;bold&quot;) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) } plt_tile_fn_temp(&quot;overstory&quot;) / plt_tile_fn_temp(&quot;understory&quot;) now let’s check by our other predictor variables sum_stats_dta = function(my_var){ sum_fns = list( n = ~sum(ifelse(is.na(.x), 0, 1)) , min = ~min(.x, na.rm = TRUE) , max = ~max(.x, na.rm = TRUE) , mean = ~mean(.x, na.rm = TRUE) , median = ~median(.x, na.rm = TRUE) , sd = ~sd(.x, na.rm = TRUE) ) # plot ( ggplot( data = ou_ptcld_validation_data %&gt;% dplyr::group_by(.data[[my_var]]) %&gt;% dplyr::mutate(m = median(f_score)) , mapping = aes( y = .data[[my_var]] , x = f_score, fill = m) ) + geom_violin(color = NA) + geom_boxplot(width = 0.1, outlier.shape = NA, fill = NA, color = &quot;black&quot;) + geom_rug() + facet_grid(cols = vars(story)) + scale_fill_viridis_c(option = &quot;mako&quot;, begin = 0.3, end = 0.9, direction = -1, limits = c(0,0.75)) + labs( x = &quot;F-score&quot; , y = stringr::str_replace_all(my_var, pattern = &quot;_&quot;, replacement = &quot; &quot;) , subtitle = stringr::str_replace_all(my_var, pattern = &quot;_&quot;, replacement = &quot; &quot;) %&gt;% stringr::str_to_title() ) + theme_light() + theme(legend.position = &quot;none&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) ) } # sum_stats_dta(&quot;software&quot;) summarize for all variables of interest c(&quot;software&quot;, &quot;study_site&quot; , &quot;depth_maps_generation_quality&quot; , &quot;depth_maps_generation_filtering_mode&quot; ) %&gt;% purrr::map(sum_stats_dta) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] 6.9.2 Bayesian Need to check our prior selection…just go with brms defaults for now Now fit the model. brms_f_mod6 = brms::brm( formula = f_score ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | story) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + (1 | depth_maps_generation_quality:story) + (1 | depth_maps_generation_filtering_mode:story) + (1 | software:story) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:story) + (1 | depth_maps_generation_quality:software:story) + (1 | depth_maps_generation_filtering_mode:software:story) + # four-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software:story) , data = ou_ptcld_validation_data , family = Beta(link = &quot;logit&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms_f_mod6&quot;) ) check the trace plots for problems with convergence of the Markov chains plot(brms_f_mod6) posterior-predictive check to make sure the model does an okay job simulating data that resemble the sample data # posterior predictive check brms::pp_check( brms_f_mod6 , type = &quot;dens_overlay&quot; , ndraws = 100 ) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) How’d we do capturing the conditional means and standard deviations by depth map generation quality? # means p1_temp = brms::pp_check( brms_f_mod6 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;mean&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;means&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # sds p2_temp = brms::pp_check( brms_f_mod6 , type = &quot;stat_grouped&quot; # &quot;dens_overlay_grouped&quot; , stat = &quot;sd&quot; , group = &quot;depth_maps_generation_quality&quot; ) + scale_y_continuous(NULL, breaks = c(NULL)) + labs(subtitle = &quot;sd&#39;s&quot;) + facet_grid(cols = vars(group), scales = &quot;free&quot;) + theme_light() # combine (p1_temp / p2_temp) &amp; theme(legend.position = &quot;none&quot;) &amp; plot_annotation( title = &quot;Posterior-predictive statistical checks\\nby dense cloud quality&quot; , subtitle = expression( &quot;The dark blue lines are &quot;*italic(T(y))*&quot;, and the light blue bars are for &quot;*italic(T)(italic(y)[rep])*&quot;.&quot;) ) # brms_f_mod6 %&gt;% # brms::posterior_summary() The means and sd’s of the F-score are less well represented across the different levels of dense cloud quality. We may want to look into modelling heterogeneous variances as shown by Kruschke chapter 20 and Kurz What about for the software? pp_check(brms_f_mod6, &quot;dens_overlay_grouped&quot;, group = &quot;software&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby software&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) What about for the overstory/understory? pp_check(brms_f_mod6, &quot;dens_overlay_grouped&quot;, group = &quot;story&quot;, ndraws = 100) + labs(subtitle = &quot;posterior-predictive check (overlaid densities)\\nby story&quot;) + theme_light() + scale_y_continuous(NULL, breaks = NULL) + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 14) ) We may not be capturing the high versus low tree predictive performance that is being driven by differences at the study site level. this should be addressed…is validation really that bad for some study sites? We can look at the model noise standard deviation (concentration) \\(\\phi\\). # get formula form_temp = brms_f_mod6$formula$formula[3] %&gt;% as.character() %&gt;% get_frmla_text(split_chrs = 115) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) # extract the posterior draws brms::as_draws_df(brms_f_mod6) %&gt;% # plot ggplot(aes(x = phi, y = 0)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21, point_size = 3 , quantiles = 100 ) + scale_y_continuous(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\phi$&quot;) , caption = form_temp ) + theme_light() we can compare this to our beta model above without any overstory/understory predictor variable. dplyr::bind_rows( brms::as_draws_df(brms_f_mod6) %&gt;% dplyr::select(phi) %&gt;% dplyr::mutate(src = &quot;brms_f_mod6&quot;) , brms::as_draws_df(brms_f_mod5) %&gt;% dplyr::select(phi) %&gt;% dplyr::mutate(src = &quot;brms_f_mod5&quot;) ) %&gt;% ggplot(mapping = aes(y = src, x = phi, color = src, group = src)) + tidybayes::stat_pointinterval(position = &quot;dodge&quot;) + scale_y_discrete(NULL, breaks = NULL) + scale_color_manual(values = viridis::turbo(n = 6, begin = 0.2, end = 0.8)[5:6]) + labs( y = &quot;&quot;, x = latex2exp::TeX(&quot;$\\\\phi$&quot;) , color = &quot;model&quot; ) + theme_light() + theme(legend.position = &quot;top&quot;, strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;)) This indicates that our model including overstory/understory has less dispersion 6.9.2.1 Story - main effect Now, we’ll look at the main effect of overstory/understory on F-score by collapsing across the filtering mode, dense cloud quality setting, study site, and software and then performing a pairwise comparison between overstory and understory In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ou_ptcld_validation_data %&gt;% dplyr::distinct(story) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | story) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = story , fill = story ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;viridis&quot;, begin = 0.3, end = 0.7, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) we can view the posterior HDI of these estimates ou_ptcld_validation_data %&gt;% dplyr::distinct(story) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | story) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::group_by(story) %&gt;% tidybayes::median_hdi(value) %&gt;% select(-c(.point,.interval, .width)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of F-score&quot; , col.names = c( &quot;&quot; , &quot;F-score&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.28: brms::brm model: 95% HDI of the posterior predictive distribution of F-score F-score HDI low HDI high overstory 0.48 0.14 0.81 understory 0.31 0.05 0.65 compare this to the quick summary stats ou_ptcld_validation_data %&gt;% dplyr::group_by(story) %&gt;% dplyr::summarise( mean_f = mean(f_score) , f_05 = quantile(f_score, probs = 0.05) , f_95 = quantile(f_score, probs = 0.95) ) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;summary statistics of F-score&quot; , col.names = c( &quot;&quot; , &quot;mean F-score&quot; , &quot;5% value&quot;, &quot;95% value&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.29: summary statistics of F-score mean F-score 5% value 95% value overstory 0.52 0.05 0.89 understory 0.33 0.04 0.60 now we’ll make our contrast of overstory/understory brms_contrast_temp = ou_ptcld_validation_data %&gt;% dplyr::distinct(story) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | story) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = story , comparison = tidybayes::emmeans_comparison(&quot;revpairwise&quot;) ) %&gt;% dplyr::rename(contrast = story) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 40,000 ## Columns: 14 ## Groups: contrast [1] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ contrast &lt;chr&gt; &quot;overstory - understory&quot;, &quot;overstory - understory&quot;… ## $ value &lt;dbl&gt; 0.243671696, 0.196395881, 0.122113387, 0.187161358… ## $ median_hdi_est &lt;dbl&gt; 0.1519276, 0.1519276, 0.1519276, 0.1519276, 0.1519… ## $ median_hdi_lower &lt;dbl&gt; -0.06039082, -0.06039082, -0.06039082, -0.06039082… ## $ median_hdi_upper &lt;dbl&gt; 0.357243, 0.357243, 0.357243, 0.357243, 0.357243, … ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FA… ## $ pct_gt_zero &lt;dbl&gt; 0.918425, 0.918425, 0.918425, 0.918425, 0.918425, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(overstory&gt;understory)=92%&quot;, &quot;Pr(overstory&gt;unde… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.3840362, 0.3840362, 0.3840362, 0.3840362, 0.3840… ## $ sig_level &lt;ord&gt; 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, … plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;story&quot; ) ggplot2::ggsave( &quot;../data/stry_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;overstory contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.30: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts overstory contrast difference (F-score) HDI low HDI high overstory - understory 0.15 -0.06 0.36 Averaging across all levels of filtering mode, dense cloud quality setting, study site, and software the process does a better job detecting overstory trees than understory trees. Because this is a Bayesian analysis we can quantify this probability: there is a 91.8% that overstory trees will be detected with better accuracy than understory trees (see coloring on posterior predictive distribution above) 6.9.2.2 Story:Software - interaction Now, we’ll address the question of “are there differences in F-score based on the processing software used for detecting overstory and understory trees?” # get draws stry_sftwr_draws_temp = ou_ptcld_validation_data %&gt;% dplyr::distinct(software, story) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | story) + (1 | software) + (1 | software:story) ) %&gt;% dplyr::rename(value = .epred) # calculate contrast brms_contrast_temp = stry_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, story) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 240,000 ## Columns: 15 ## Groups: contrast, story [6] ## $ story &lt;fct&gt; overstory, overstory, overstory, overstory, overst… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMAP - METASH… ## $ value &lt;dbl&gt; -0.023445297, 0.029402995, 0.041254983, -0.0102837… ## $ median_hdi_est &lt;dbl&gt; -0.01381908, -0.01381908, -0.01381908, -0.01381908… ## $ median_hdi_lower &lt;dbl&gt; -0.2029299, -0.2029299, -0.2029299, -0.2029299, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.1648562, 0.1648562, 0.1648562, 0.1648562, 0.1648… ## $ is_gt_zero &lt;lgl&gt; TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE,… ## $ pct_gt_zero &lt;dbl&gt; 0.567825, 0.567825, 0.567825, 0.567825, 0.567825, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=57%&quot;, &quot;Pr(MtaShp&gt;ODM)=57%&quot;, &quot;Pr(Mt… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=57%&quot;, &quot;Pr(&lt;0)=57%&quot;, &quot;Pr(&lt;0)=57%&quot;, &quot;Pr(&lt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.2181497, -0.2181497, -0.2181497, -0.2181497, -0… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;story&quot; , label_size = 2.5 , x_expand = c(0.17,0.3) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby overstory/understory&quot; ) ggplot2::ggsave( &quot;../data/sftwr_stry_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, story) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, story) %&gt;% dplyr::select(contrast, story, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;software contrast&quot; , &quot;overstory/understory&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.31: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts software contrast overstory/understory difference (F-score) HDI low HDI high OPENDRONEMAP - METASHAPE overstory -0.01 -0.20 0.16 OPENDRONEMAP - METASHAPE understory -0.07 -0.24 0.06 PIX4D - METASHAPE overstory -0.01 -0.20 0.19 PIX4D - METASHAPE understory 0.07 -0.10 0.27 PIX4D - OPENDRONEMAP overstory 0.00 -0.18 0.23 PIX4D - OPENDRONEMAP understory 0.15 -0.02 0.35 6.9.2.3 Story:Quality - interaction What is the difference in F-score between overstory and understory for the different levels of dense cloud quality? Note that how within tidybayes::add_epred_draws, we used the re_formula argument to average over the effects of study site, software, and filtering mode to compare the dense cloud quality and story effects. ou_ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, story) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | story) + (1 | depth_maps_generation_quality:story) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = story , fill = story ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;viridis&quot;, begin = 0.3, end = 0.7, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;story&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 6.9.2.4 Quality:Filtering - interaction Are there differences in F-score based on dense point cloud generation quality within each level of filtering mode? Here, we collapse across the study site, software, and story to compare the combined dense cloud quality and filtering mode effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws qlty_filter_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) # plot qlty_filter_draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , fill = &quot;Filtering Mode&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) ggplot2::ggsave( &quot;../data/qlty_fltr_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument brms_contrast_temp = qlty_filter_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 0.069614286, 0.040784609, -0.0046… ## $ median_hdi_est &lt;dbl&gt; 0.01972114, 0.01972114, 0.0197211… ## $ median_hdi_lower &lt;dbl&gt; -0.160384, -0.160384, -0.160384, … ## $ median_hdi_upper &lt;dbl&gt; 0.2231248, 0.2231248, 0.2231248, … ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, FALSE, TRUE, FALSE, T… ## $ pct_gt_zero &lt;dbl&gt; 0.6208, 0.6208, 0.6208, 0.6208, 0… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=62%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.2398591, 0.2398591, 0.2398591, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 2.0 , x_expand = c(0,0.6) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; ) + theme( axis.text.x = element_text(size = 7) ) ggplot2::ggsave( &quot;../data/qlty_fltr_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.32: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast filtering mode difference (F-score) HDI low HDI high ultra high - high aggressive 0.02 -0.16 0.22 ultra high - high aggressive 0.02 0.22 0.22 ultra high - high moderate 0.02 -0.17 0.22 ultra high - high mild 0.02 -0.15 0.22 ultra high - high disabled 0.02 -0.16 0.22 ultra high - medium aggressive 0.07 -0.10 0.30 ultra high - medium moderate 0.07 -0.10 0.29 ultra high - medium mild 0.07 -0.10 0.29 ultra high - medium disabled 0.07 -0.10 0.30 ultra high - low aggressive 0.11 -0.07 0.34 ultra high - low moderate 0.12 -0.06 0.35 ultra high - low mild 0.11 -0.07 0.34 ultra high - low disabled 0.10 -0.08 0.33 ultra high - lowest aggressive 0.20 -0.04 0.47 ultra high - lowest moderate 0.20 -0.03 0.47 ultra high - lowest mild 0.20 -0.03 0.47 ultra high - lowest disabled 0.20 -0.04 0.47 high - medium aggressive 0.05 -0.13 0.26 high - medium aggressive 0.05 0.26 0.26 high - medium moderate 0.05 -0.12 0.26 high - medium mild 0.05 -0.13 0.26 high - medium disabled 0.05 -0.12 0.26 high - low aggressive 0.08 -0.09 0.30 high - low moderate 0.09 -0.08 0.31 high - low mild 0.08 -0.09 0.30 high - low disabled 0.08 -0.09 0.30 high - lowest aggressive 0.17 -0.04 0.43 high - lowest moderate 0.18 -0.03 0.44 high - lowest mild 0.18 -0.04 0.44 high - lowest disabled 0.17 -0.04 0.43 medium - low aggressive 0.03 -0.14 0.23 medium - low moderate 0.03 -0.14 0.23 medium - low mild 0.03 -0.14 0.23 medium - low disabled 0.02 -0.15 0.22 medium - lowest aggressive 0.11 -0.07 0.36 medium - lowest moderate 0.11 -0.07 0.36 medium - lowest mild 0.11 -0.07 0.36 medium - lowest disabled 0.11 -0.08 0.36 low - lowest aggressive 0.07 -0.09 0.30 low - lowest moderate 0.07 -0.10 0.30 low - lowest mild 0.08 -0.09 0.31 low - lowest disabled 0.08 -0.10 0.31 6.9.2.5 Software:Quality - interaction It might be more important to understand the difference in F-score by dense cloud quality and software rather than filtering mode since filtering mode had such a small effect on the SfM predictive ability Are there differences in F-score based on dense point cloud generation quality within each different processing software? We will also address the similar but slightly different question of “are there differences in F-score based on the processing software used at a given dense point cloud generation quality?” Here, we collapse across the study site, filtering mode, and story to compare the combined dense cloud quality and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = software ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # get draws qlty_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_quality) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,040,000 ## Columns: 17 ## Groups: contrast, software [26] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; 0.158376692, -0.015628733, 0.185569876, 0.15198170… ## $ median_hdi_est &lt;dbl&gt; 0.01621978, 0.01621978, 0.01621978, 0.01621978, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.1248058, -0.1248058, -0.1248058, -0.1248058, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.169538, 0.169538, 0.169538, 0.169538, 0.169538, … ## $ is_gt_zero &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, … ## $ pct_gt_zero &lt;dbl&gt; 0.619, 0.619, 0.619, 0.619, 0.619, 0.619, 0.619, 0… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=62%&quot;, &quot;Pr(ultra high&gt;high)=62… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1822533, 0.1822533, 0.1822533, 0.1822533, 0.1822… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 2.2 , x_expand = c(0.46,0.75) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;software&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.33: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast software difference (F-score) HDI low HDI high ultra high - high METASHAPE 0.02 -0.12 0.17 ultra high - medium METASHAPE 0.06 -0.08 0.22 ultra high - low METASHAPE 0.17 0.00 0.33 ultra high - lowest METASHAPE 0.40 0.10 0.58 high - medium METASHAPE 0.04 -0.10 0.20 high - low METASHAPE 0.15 0.00 0.31 high - lowest METASHAPE 0.38 0.09 0.57 medium - low METASHAPE 0.10 -0.04 0.25 medium - lowest METASHAPE 0.33 0.07 0.51 low - lowest METASHAPE 0.21 0.02 0.39 ultra high - high OPENDRONEMAP 0.08 -0.06 0.23 ultra high - medium OPENDRONEMAP 0.27 0.05 0.43 ultra high - low OPENDRONEMAP 0.25 0.04 0.41 ultra high - lowest OPENDRONEMAP 0.25 0.03 0.42 high - medium OPENDRONEMAP 0.18 0.01 0.33 high - low OPENDRONEMAP 0.16 0.00 0.32 high - lowest OPENDRONEMAP 0.17 -0.01 0.34 medium - low OPENDRONEMAP -0.01 -0.15 0.11 medium - lowest OPENDRONEMAP -0.01 -0.17 -0.17 medium - lowest OPENDRONEMAP -0.01 -0.17 0.13 low - lowest OPENDRONEMAP 0.00 -0.14 0.15 ultra high - high PIX4D 0.00 -0.15 0.16 ultra high - medium PIX4D 0.00 -0.16 0.16 ultra high - low PIX4D 0.07 -0.09 0.24 high - medium PIX4D 0.00 -0.16 0.15 high - low PIX4D 0.07 -0.09 0.23 medium - low PIX4D 0.07 -0.08 0.23 The contrasts above address the question “are there differences in F-score based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in F-score based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = qlty_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter1 == software, depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter2 == software, depth_maps_generation_quality) ) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 520,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_quality [13] ## $ depth_maps_generation_quality &lt;ord&gt; ultra high, ultra high, ultra high, ultr… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ sorter1 &lt;chr&gt; &quot;OPENDRONEMAP&quot;, &quot;OPENDRONEMAP&quot;, &quot;OPENDRO… ## $ sorter2 &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMA… ## $ value &lt;dbl&gt; -0.0106825948, -0.0492929373, -0.1107246… ## $ median_hdi_est &lt;dbl&gt; -0.007731576, -0.007731576, -0.007731576… ## $ median_hdi_lower &lt;dbl&gt; -0.2333937, -0.2333937, -0.2333937, -0.2… ## $ median_hdi_upper &lt;dbl&gt; 0.2114123, 0.2114123, 0.2114123, 0.21141… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FAL… ## $ pct_gt_zero &lt;dbl&gt; 0.54255, 0.54255, 0.54255, 0.54255, 0.54… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=54%&quot;, &quot;Pr(MtaShp&gt;ODM)=54… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=54%&quot;, &quot;Pr(&lt;0)=54%&quot;, &quot;Pr(&lt;0)=54%&quot;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.2508982, -0.2508982, -0.2508982, -0.2… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 2.0 , x_expand = c(0.17,0.14) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) ggplot2::ggsave( &quot;../data/sftwr_qlty_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;software contrast&quot; , &quot;quality&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 6.34: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts software contrast quality difference (F-score) HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -0.01 -0.23 0.21 OPENDRONEMAP - METASHAPE high -0.07 -0.30 0.14 OPENDRONEMAP - METASHAPE medium -0.20 -0.44 0.00 OPENDRONEMAP - METASHAPE low -0.08 -0.31 0.11 OPENDRONEMAP - METASHAPE lowest 0.11 -0.04 0.34 PIX4D - METASHAPE ultra high -0.05 -0.28 0.17 PIX4D - METASHAPE high -0.03 -0.27 0.18 PIX4D - METASHAPE medium 0.01 -0.21 0.24 PIX4D - METASHAPE low 0.04 -0.19 0.26 PIX4D - OPENDRONEMAP ultra high -0.04 -0.28 0.19 PIX4D - OPENDRONEMAP high 0.03 -0.19 0.27 PIX4D - OPENDRONEMAP medium 0.21 0.00 0.45 PIX4D - OPENDRONEMAP low 0.12 -0.08 0.36 6.9.2.6 Software:Filtering - interaction Are there differences in F-score based on dense point cloud filtering mode within each processing software? Here, we collapse across the study site, depth map generation quality, and story to compare the combined filtering mode and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws Even though filtering mode had a small effect on the SfM predictive ability when averaging across all softwares, there might still be differences in filtering mode within software when we average across all depth map generation quality settings. Let’s check the difference in F-score by depth map filtering mode and software. # get draws fltr_sftwr_draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) # plot fltr_sftwr_draws_temp %&gt;% ggplot( mapping = aes( y = value, x = software , fill = software ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( x = &quot;software&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby filtering mode&quot; , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 600,000 ## Columns: 17 ## Groups: contrast, software [15] ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggressive, ag… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggressive, mode… ## $ value &lt;dbl&gt; -0.006856818, 0.076603376, 0.060906550, 0.05321381… ## $ median_hdi_est &lt;dbl&gt; 0.05709402, 0.05709402, 0.05709402, 0.05709402, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.02673803, -0.02673803, -0.02673803, -0.02673803… ## $ median_hdi_upper &lt;dbl&gt; 0.1642191, 0.1642191, 0.1642191, 0.1642191, 0.1642… ## $ is_gt_zero &lt;lgl&gt; FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T… ## $ pct_gt_zero &lt;dbl&gt; 0.9202, 0.9202, 0.9202, 0.9202, 0.9202, 0.9202, 0.… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=92%&quot;, &quot;Pr(moderate&gt;aggres… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=92%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1765355, 0.1765355, 0.1765355, 0.1765355, 0.1765… ## $ sig_level &lt;ord&gt; 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, … plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; , facet = &quot;software&quot; , label_size = 2.0 , x_expand = c(0.85,0.8) # c(1,1.4) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; ) ggplot2::ggsave( &quot;../data/fltr_sftwr_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;filtering contrast&quot; , &quot;software&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;6in&quot;) Table 6.35: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts filtering contrast software difference (F-score) HDI low HDI high disabled - mild METASHAPE 0.00 -0.09 0.10 disabled - moderate METASHAPE 0.05 -0.03 0.16 disabled - aggressive METASHAPE 0.12 0.00 0.23 mild - moderate METASHAPE 0.05 -0.04 0.15 mild - aggressive METASHAPE 0.11 0.00 0.22 moderate - aggressive METASHAPE 0.06 -0.03 0.16 disabled - mild OPENDRONEMAP 0.00 -0.08 0.09 disabled - moderate OPENDRONEMAP -0.01 -0.10 0.08 disabled - aggressive OPENDRONEMAP -0.05 -0.16 0.04 mild - moderate OPENDRONEMAP -0.01 -0.11 0.07 mild - aggressive OPENDRONEMAP -0.06 -0.17 0.03 moderate - aggressive OPENDRONEMAP -0.04 -0.15 0.04 disabled - mild PIX4D 0.00 -0.09 0.10 disabled - moderate PIX4D 0.04 -0.05 0.14 mild - moderate PIX4D 0.03 -0.05 0.14 6.9.2.7 Software:Quality:Filtering - interaction The contrasts immediately above address the question “are there differences in F-score based on dense point cloud filtering mode within each software?”. Although the impact of filtering mode is small, it is highly probable when averaging across all quality settings. What if we don’t average out the impact of quality and instead get the full, three-way interaction between software, quality, and filtering mode? Let’s get the model’s answer to the question “For each software, are there differences in F-score based on dense point cloud filtering mode within each point cloud generation quality?”. Here, we collapse across the study site and story to compare the dense cloud quality, filtering mode, and software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) # plot fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.8 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_y_continuous(breaks = scales::extended_breaks(n=10)) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + labs( fill = &quot;filtering mode&quot; , x = &quot;filtering mode&quot;, y = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;top&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) we can also make pairwise comparisons so long as we continue using tidybayes::add_epred_draws with the re_formula argument # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter1==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter2==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 2,880,000 ## Columns: 18 ## Groups: contrast, software, depth_maps_generation_quality [72] ## $ depth_maps_generation_quality &lt;ord&gt; ultra high, ultra high, ultra high, ultr… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggr… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggres… ## $ value &lt;dbl&gt; -0.003468489, 0.068129488, 0.092618344, … ## $ median_hdi_est &lt;dbl&gt; 0.06468366, 0.06468366, 0.06468366, 0.06… ## $ median_hdi_lower &lt;dbl&gt; -0.03619306, -0.03619306, -0.03619306, -… ## $ median_hdi_upper &lt;dbl&gt; 0.1828082, 0.1828082, 0.1828082, 0.18280… ## $ is_gt_zero &lt;lgl&gt; FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU… ## $ pct_gt_zero &lt;dbl&gt; 0.90815, 0.90815, 0.90815, 0.90815, 0.90… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=91%&quot;, &quot;Pr(moder… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=91%&quot;, &quot;Pr(&gt;0)=91%&quot;, &quot;Pr(&gt;0)=91%&quot;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1965188, 0.1965188, 0.1965188, 0.19651… ## $ sig_level &lt;ord&gt; 90%, 90%, 90%, 90%, 90%, 90%, 90%, 90%, … plot it brms_contrast_temp %&gt;% plt_contrast( facet = c(&quot;depth_maps_generation_quality&quot;, &quot;software&quot;) , y_axis_title = &quot;filtering mode&quot; , label_size = 0 , x_expand = c(-0.1,-0.1) ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality and software&quot; ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_comp_mod6.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) 6.9.2.8 Quality - main effect let’s collapse across the story, filtering mode, software, and study site to compare the dense cloud quality setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod6 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_quality , fill = depth_maps_generation_quality ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;inferno&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;quality&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) we can also perform pairwise comparisons brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 400,000 ## Columns: 16 ## Groups: contrast [10] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra high, ultra high, ul… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, high, high, high, hi… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - high, ultra high -… ## $ value &lt;dbl&gt; 0.081821389, 0.010165042, -0.004214973, -0.0063328… ## $ median_hdi_est &lt;dbl&gt; 0.01748438, 0.01748438, 0.01748438, 0.01748438, 0.… ## $ median_hdi_lower &lt;dbl&gt; -0.1672428, -0.1672428, -0.1672428, -0.1672428, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.2111465, 0.2111465, 0.2111465, 0.2111465, 0.2111… ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALS… ## $ pct_gt_zero &lt;dbl&gt; 0.61515, 0.61515, 0.61515, 0.61515, 0.61515, 0.615… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=62%&quot;, &quot;Pr(ultra high&gt;high)=62… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=62%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.2269825, 0.2269825, 0.2269825, 0.2269825, 0.2269… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;quality&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.36: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts quality contrast difference (F-score) HDI low HDI high ultra high - high 0.02 -0.17 0.21 ultra high - medium 0.07 -0.10 0.29 ultra high - low 0.11 -0.06 0.34 ultra high - lowest 0.20 -0.03 0.47 high - medium 0.05 -0.13 0.25 high - low 0.08 -0.08 0.31 high - lowest 0.17 -0.04 0.43 medium - low 0.03 -0.14 0.23 medium - lowest 0.11 -0.07 0.36 low - lowest 0.07 -0.10 0.30 6.9.2.9 Filtering - main effect let’s collapse across the story, dense cloud quality, software, and study site to compare the filtering mode setting effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod6 # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = depth_maps_generation_filtering_mode , fill = depth_maps_generation_filtering_mode ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;plasma&quot;, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;filtering mode&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) we can also perform pairwise comparisons brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 240,000 ## Columns: 16 ## Groups: contrast [6] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ sorter1 &lt;ord&gt; moderate, moderate, moderate, moderate, moderate, … ## $ sorter2 &lt;ord&gt; aggressive, aggressive, aggressive, aggressive, ag… ## $ contrast &lt;fct&gt; moderate - aggressive, moderate - aggressive, mode… ## $ value &lt;dbl&gt; -0.0103292621, -0.0367862977, -0.0056778029, -0.00… ## $ median_hdi_est &lt;dbl&gt; 0.0001174049, 0.0001174049, 0.0001174049, 0.000117… ## $ median_hdi_lower &lt;dbl&gt; -0.09076018, -0.09076018, -0.09076018, -0.09076018… ## $ median_hdi_upper &lt;dbl&gt; 0.09457266, 0.09457266, 0.09457266, 0.09457266, 0.… ## $ is_gt_zero &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TR… ## $ pct_gt_zero &lt;dbl&gt; 0.507075, 0.507075, 0.507075, 0.507075, 0.507075, … ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(moderate&gt;aggressive)=51%&quot;, &quot;Pr(moderate&gt;aggres… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=51%&quot;, &quot;Pr(&gt;0)=51%&quot;, &quot;Pr(&gt;0)=51%&quot;, &quot;Pr(&gt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1016656, 0.1016656, 0.1016656, 0.1016656, 0.1016… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;filtering mode contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.37: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts filtering mode contrast difference (F-score) HDI low HDI high disabled - mild 0.00 -0.08 0.09 disabled - moderate 0.01 -0.06 0.11 disabled - aggressive 0.01 -0.07 0.12 mild - moderate 0.00 -0.07 0.11 mild - moderate 0.00 0.11 0.11 mild - aggressive 0.01 -0.08 -0.08 mild - aggressive 0.01 -0.07 0.11 mild - aggressive 0.01 0.11 0.12 moderate - aggressive 0.00 -0.09 0.09 moderate - aggressive 0.00 0.10 0.10 6.9.2.10 Software - main effect to address one of our main questions, let’s also collapse across the story, study site, dense cloud quality, and filtering mode setting to compare the software effect. In a hierarchical model structure, we have to make use of the re_formula argument within tidybayes::add_epred_draws ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod6 # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% # plot ggplot( mapping = aes( x = value, y = software , fill = software ) ) + tidybayes::stat_halfeye( point_interval = median_hdi, .width = .95 , interval_color = &quot;gray66&quot; , shape = 21, point_color = &quot;gray66&quot;, point_fill = &quot;black&quot; , justification = -0.01 ) + scale_fill_viridis_d(option = &quot;rocket&quot;, begin = 0.3, end = 0.9, drop = F) + scale_x_continuous(breaks = scales::extended_breaks(n=8)) + labs( y = &quot;software&quot;, x = &quot;F-score&quot; , subtitle = &quot;posterior predictive distribution of F-score with 95% HDI&quot; , caption = form_temp ) + theme_light() + theme(legend.position = &quot;none&quot;) we can also perform pairwise comparisons brms_contrast_temp = ptcld_validation_data %&gt;% dplyr::distinct(software) %&gt;% tidybayes::add_epred_draws( brms_f_mod6, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 120,000 ## Columns: 14 ## Groups: contrast [3] ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,… ## $ contrast &lt;chr&gt; &quot;OPENDRONEMAP - METASHAPE&quot;, &quot;OPENDRONEMAP - METASH… ## $ value &lt;dbl&gt; -9.337236e-02, 4.289334e-02, -5.244894e-02, -5.874… ## $ median_hdi_est &lt;dbl&gt; -0.01532781, -0.01532781, -0.01532781, -0.01532781… ## $ median_hdi_lower &lt;dbl&gt; -0.2559431, -0.2559431, -0.2559431, -0.2559431, -0… ## $ median_hdi_upper &lt;dbl&gt; 0.1696568, 0.1696568, 0.1696568, 0.1696568, 0.1696… ## $ is_gt_zero &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, F… ## $ pct_gt_zero &lt;dbl&gt; 0.6325, 0.6325, 0.6325, 0.6325, 0.6325, 0.6325, 0.… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(MtaShp&gt;ODM)=63%&quot;, &quot;Pr(MtaShp&gt;ODM)=63%&quot;, &quot;Pr(Mt… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=63%&quot;, &quot;Pr(&lt;0)=63%&quot;, &quot;Pr(&lt;0)=63%&quot;, &quot;Pr(&lt;0)=… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.2751388, -0.2751388, -0.2751388, -0.2751388, -0… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;8… plot it plt_contrast( brms_contrast_temp, caption_text = form_temp , y_axis_title = &quot;software&quot; ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast) %&gt;% dplyr::select(contrast, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts&quot; , col.names = c( &quot;software contrast&quot; , &quot;difference (F-score)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) ) %&gt;% kableExtra::kable_styling() Table 6.38: brms::brm model: 95% HDI of the posterior predictive distribution of group constrasts software contrast difference (F-score) HDI low HDI high OPENDRONEMAP - METASHAPE -0.02 -0.26 0.17 OPENDRONEMAP - METASHAPE -0.02 0.18 0.18 PIX4D - METASHAPE 0.01 -0.20 -0.19 PIX4D - METASHAPE 0.01 -0.18 0.25 PIX4D - METASHAPE 0.01 0.26 0.26 PIX4D - OPENDRONEMAP 0.03 -0.15 0.30 PIX4D - OPENDRONEMAP 0.03 0.31 0.31 6.9.2.11 \\(\\sigma\\) posteriors Finally, we can quantify the variation in F-score by comparing the \\(\\sigma\\) (sd) posteriors unsure about the scale of the \\(\\sigma\\) parameters are on in the beta model. Here, we invert the logit sd values from the model using plogis() which converts the parameter values to a probability/proportion (e.g.; 0-1) because they are parameters of the intercept and interaction effects so must be on the transformed (link = \"logit\") scale…double check For a phenomenally excellent overview of binary logistic regression and how to interpret coefficients, see Steven Miller’s most excellent lab script here # tidybayes::get_variables(brms_f_mod6) # extract the posterior draws brms::as_draws_df(brms_f_mod6) %&gt;% dplyr::select(c(tidyselect::starts_with(&quot;sd_&quot;))) %&gt;% tidyr::pivot_longer(dplyr::everything()) %&gt;% # dplyr::group_by(name) %&gt;% # tidybayes::median_hdi(value) %&gt;% dplyr::mutate( name = name %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) %&gt;% forcats::fct_reorder(value) , value = plogis(value) ) %&gt;% # plot ggplot(aes(x = value, y = name)) + tidybayes::stat_dotsinterval( point_interval = median_hdi, .width = .95 , justification = -0.04 , shape = 21 #, point_size = 3 , quantiles = 100 ) + labs(x = &quot;&quot;, y = &quot;&quot;, caption = form_temp) + theme_light() Determining overstory or understory seems to have the strongest effect on our ability to accurately detect trees but this effect is highly uncertain. Variance of study site is stronger than variance of depth map generation quality, but the posterior predictive distributions overlap a good deal. The study site (the “subjects” in our study) seems to have the overall strongest effect, but this comes with high uncertainty. Taken alone, the influence of quality, filtering, and software comes with huge uncertainty. This makes sense as the influence of software largely depends on the depth map generation quality, of which we are fairly certain. Filtering mode has the overall weakest effect on tree detection and this comes with relatively high certainty, especially conditional on the depth map generation quality. and perform model selection via the R-squared for Bayesian regression models using brms::bayes_R2() since we can’t compare models with different number of observations using information criteria (we could also use the p-value approach as done above) brms_f_mod6 = brms::add_criterion(brms_f_mod6, criterion = c(&quot;loo&quot;, &quot;waic&quot;)) # r-squared dplyr::bind_rows( brms::bayes_R2(brms_f_mod6) %&gt;% dplyr::as_tibble() %&gt;% dplyr::mutate(model = &quot;brms_f_mod6&quot;) %&gt;% dplyr::relocate(model) , brms::bayes_R2(brms_f_mod5) %&gt;% dplyr::as_tibble() %&gt;% dplyr::mutate(model = &quot;brms_f_mod5&quot;) %&gt;% dplyr::relocate(model) ) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::arrange(desc(estimate)) %&gt;% dplyr::rename(R2.estimate = estimate) ## # A tibble: 2 × 5 ## model R2.estimate est.error q2.5 q97.5 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 brms_f_mod5 0.664 0.0248 0.610 0.707 ## 2 brms_f_mod6 0.573 0.0204 0.530 0.610 Our model without the effects of overstory/understory is a better parsimonious fit of the data in this case…let’s roll with brms_f_mod5 model for the research article even though our model including overstory/understory has less dispersion (see our \\(\\phi\\) posterior) "],["stats_detected.html", "Section 7 Statistical Analysis: Detected Tree Reliability 7.1 Model Definition 7.2 Setup 7.3 Tree Height 7.4 Tree DBH 7.5 Posterior Predictive Checks", " Section 7 Statistical Analysis: Detected Tree Reliability In this section, we’ll evaluate the influence of the processing parameters on UAS-detected tree height and DBH reliability. The UAS and Field validation data was built and described in this section. For this section we will only look at data from “matched” UAS-field tree pairs (i.e. true positive trees). For successfully matched trees, the UAS tree height and DBH values were compared to field survey tree values to determine the mean error and root mean square error (RMSE). The mean error quantifies the bias of the UAS data while the RMSE quantifies the precision of the UAS data. We will utilize our “full” model presented in the prior section in which we modeled the F-score which is a measure of how well the UAS detected trees represent the field survey trees. For a more in-depth review of the traditional treatment of this sort of data structure called multifactor analysis of variance (ANOVA) compared to the Bayesian hierarchical generalization of the traditional ANOVA model used here see this previous section. 7.1 Model Definition We will used the same model structure for all dependent variables of interest in this section which include: Height Mean Error (m) Height RMSE (m) DBH Mean Error (cm) DBH RMSE (cm) Kruschke (2015) describes the Hierarchical Bayesian approach to describe groups of metric data with multiple nominal predictors when every subject (“study site” in our research) only contributes one observation per cell/condition: \\[\\begin{align*} y = &amp; \\; \\beta_0 \\\\ &amp; + \\overrightarrow \\beta_1 \\overrightarrow x_1 + \\overrightarrow \\beta_2 \\overrightarrow x_2 + \\overrightarrow \\beta_{1 \\times 2} \\overrightarrow x_{1 \\times 2} \\\\ &amp; + \\overrightarrow \\beta_S \\overrightarrow x_S \\end{align*}\\] In other words, we assume a main effect of subject, but no interaction of subject with other predictors. In this model, the subject effect (deflection) is constant across treatments, and the treatment effects (deflections) are constant across subjects. Notice that the model makes no requirement that every subject contributes a datum to every condition. Indeed, the model allows zero or multiple data per subject per condition. Bayesian estimation makes no assumptions or requirements that the design is balanced (i.e., has equal numbers of measurement in each cell). (p. 608) and see section 20 from Kurz’s ebook supplement The metric predicted variable with three nominal predictor variables and subject-level effects model has the form: \\[\\begin{align*} y_{i} \\sim &amp; \\operatorname{Normal}\\bigl(\\mu_{i}, \\sigma_{y} \\bigr) \\\\ \\mu_{i} = &amp; \\beta_0 \\\\ &amp; + \\sum_{j=1}^{J=5} \\beta_{1[j]} x_{1[j]} + \\sum_{k=1}^{K=4} \\beta_{2[k]} x_{2[k]} + \\sum_{f=1}^{F=3} \\beta_{3[f]} x_{3[f]} + \\sum_{s=1}^{S=5} \\beta_{4[s]} x_{4[s]} \\\\ &amp; + \\sum_{j,k} \\beta_{1\\times2[j,k]} x_{1\\times2[j,k]} + \\sum_{j,f} \\beta_{1\\times3[j,f]} x_{1\\times3[j,f]} + \\sum_{k,f} \\beta_{2\\times3[k,f]} x_{2\\times3[k,f]} \\\\ &amp; + \\sum_{j,k,f} \\beta_{1\\times2\\times3[j,k,f]} x_{1\\times2\\times3[j,k,f]} \\\\ \\beta_{0} \\sim &amp; \\operatorname{Normal}(\\bar{y},y_{SD} \\times 5) \\\\ \\beta_{1[j]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{1}}) \\\\ \\beta_{2[k]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{2}}) \\\\ \\beta_{3[f]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{3}}) \\\\ \\beta_{4[s]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{4}}) \\\\ \\beta_{1\\times2[j,k]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{1\\times2}}) \\\\ \\beta_{1\\times3[j,f]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{1\\times3}}) \\\\ \\beta_{2\\times3[k,f]} \\sim &amp; \\operatorname{Normal}(\\bar{y},\\sigma_{\\beta_{2\\times3}}) \\\\ \\sigma_{\\beta_{1}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{2}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{3}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{4}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{1\\times2}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{1\\times3}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{\\beta_{2\\times3}} \\sim &amp; \\operatorname{Gamma}(shape,rate) \\\\ \\sigma_{y} \\sim &amp; \\operatorname{Cauchy}(0,y_{SD}) \\\\ \\end{align*}\\] , where \\(j\\) is the depth map generation quality setting corresponding to observation \\(i\\), \\(k\\) is the depth map filtering mode setting corresponding to observation \\(i\\), \\(f\\) is the processing software corresponding to observation \\(i\\), and \\(s\\) is the study site corresponding to observation \\(i\\) for this model, we’ll define the priors following Kurz Kruschke (2015) explains this prior distribution methodology: we let the data serve as a proxy and we set the prior wide relative to the variance in the data, called ySD. Analogously, the normal prior for the baseline a0 is centered on the data mean and made very wide relative to the variance of the data. The goal is merely to achieve scale invariance, so that whatever is the measurement scale of the data, the prior will be broad and noncommittal on that scale…The prior on aSigma is a gamma distribution that is broad on the scale of the data, and that has a nonzero mode so that its probability density drops to zero as aSigma approaches zero. Specifically, the shape and rate parameters of the gamma distribution are set so its mode is sd(y)/2 and its standard deviation is 2*sd(y) (p.560-561) 7.2 Setup load the data if needed # load data if needed if(ls()[ls() %in% &quot;ptcld_validation_data&quot;] %&gt;% length()==0){ ptcld_validation_data = readr::read_csv(&quot;../data/ptcld_full_analysis_data.csv&quot;) %&gt;% dplyr::mutate( depth_maps_generation_quality = factor( depth_maps_generation_quality %&gt;% tolower() %&gt;% stringr::str_replace_all(&quot;ultrahigh&quot;, &quot;ultra high&quot;) , ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = factor( depth_maps_generation_filtering_mode %&gt;% tolower() , ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) } What is this data? # what is this data? ptcld_validation_data %&gt;% dplyr::glimpse() ## Rows: 260 ## Columns: 114 ## $ tracking_file_full_path &lt;chr&gt; &quot;D:\\\\SfM_Software_Comparison\\\\Me… ## $ software &lt;chr&gt; &quot;METASHAPE&quot;, &quot;METASHAPE&quot;, &quot;METAS… ## $ study_site &lt;chr&gt; &quot;KAIBAB_HIGH&quot;, &quot;KAIBAB_HIGH&quot;, &quot;K… ## $ processing_attribute1 &lt;chr&gt; &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, &quot;HIGH&quot;, … ## $ processing_attribute2 &lt;chr&gt; &quot;AGGRESSIVE&quot;, &quot;DISABLED&quot;, &quot;MILD&quot;… ## $ processing_attribute3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ file_name &lt;chr&gt; &quot;HIGH_AGGRESSIVE&quot;, &quot;HIGH_DISABLE… ## $ number_of_points &lt;int&gt; 52974294, 72549206, 69858217, 69… ## $ las_area_m2 &lt;dbl&gt; 86661.27, 87175.42, 86404.78, 86… ## $ timer_tile_time_mins &lt;dbl&gt; 0.63600698, 2.49318542, 0.841338… ## $ timer_class_dtm_norm_chm_time_mins &lt;dbl&gt; 3.6559556, 5.3289152, 5.1638296,… ## $ timer_treels_time_mins &lt;dbl&gt; 8.9065272, 19.2119663, 12.339179… ## $ timer_itd_time_mins &lt;dbl&gt; 0.02202115, 0.02449968, 0.037984… ## $ timer_competition_time_mins &lt;dbl&gt; 0.10590740, 0.17865245, 0.121248… ## $ timer_estdbh_time_mins &lt;dbl&gt; 0.02290262, 0.02382533, 0.021991… ## $ timer_silv_time_mins &lt;dbl&gt; 0.012565533, 0.015940932, 0.0150… ## $ timer_total_time_mins &lt;dbl&gt; 13.361886, 27.276985, 18.540606,… ## $ sttng_input_las_dir &lt;chr&gt; &quot;D:/Metashape_Testing_2024&quot;, &quot;D:… ## $ sttng_use_parallel_processing &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALS… ## $ sttng_desired_chm_res &lt;dbl&gt; 0.25, 0.25, 0.25, 0.25, 0.25, 0.… ## $ sttng_max_height_threshold_m &lt;int&gt; 60, 60, 60, 60, 60, 60, 60, 60, … ## $ sttng_minimum_tree_height_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_dbh_max_size_m &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_local_dbh_model &lt;chr&gt; &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;rf&quot;, &quot;r… ## $ sttng_user_supplied_epsg &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, … ## $ sttng_accuracy_level &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ sttng_pts_m2_for_triangulation &lt;int&gt; 20, 20, 20, 20, 20, 20, 20, 20, … ## $ sttng_normalization_with &lt;chr&gt; &quot;triangulation&quot;, &quot;triangulation&quot;… ## $ sttng_competition_buffer_m &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,… ## $ depth_maps_generation_quality &lt;ord&gt; high, high, high, high, low, low… ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, disabled, mild, mode… ## $ total_sfm_time_min &lt;dbl&gt; 54.800000, 60.316667, 55.933333,… ## $ number_of_points_sfm &lt;dbl&gt; 52974294, 72549206, 69858217, 69… ## $ total_sfm_time_norm &lt;dbl&gt; 0.1117823680, 0.1237564664, 0.11… ## $ processed_data_dir &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ processing_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1… ## $ true_positive_n_trees &lt;dbl&gt; 229, 261, 260, 234, 220, 175, 23… ## $ commission_n_trees &lt;dbl&gt; 173, 222, 213, 193, 148, 223, 16… ## $ omission_n_trees &lt;dbl&gt; 772, 740, 741, 767, 781, 826, 77… ## $ f_score &lt;dbl&gt; 0.3264433, 0.3517520, 0.3527815,… ## $ tree_height_m_me &lt;dbl&gt; 0.270336679, 0.283568790, 0.3122… ## $ tree_height_m_mpe &lt;dbl&gt; 0.002357383, 0.013286785, 0.0142… ## $ tree_height_m_mae &lt;dbl&gt; 0.7873610, 0.6886235, 0.6914983,… ## $ tree_height_m_mape &lt;dbl&gt; 0.06624939, 0.06903969, 0.060550… ## $ tree_height_m_smape &lt;dbl&gt; 0.06776453, 0.06838733, 0.060410… ## $ tree_height_m_mse &lt;dbl&gt; 0.9842433, 0.8507862, 0.8259923,… ## $ tree_height_m_rmse &lt;dbl&gt; 0.9920904, 0.9223807, 0.9088412,… ## $ dbh_cm_me &lt;dbl&gt; 9.1432719, 6.5708955, 8.4202884,… ## $ dbh_cm_mpe &lt;dbl&gt; 0.863460500, 0.815124639, 0.9569… ## $ dbh_cm_mae &lt;dbl&gt; 11.550258, 9.444397, 11.668345, … ## $ dbh_cm_mape &lt;dbl&gt; 0.9048948, 0.8693847, 1.0137530,… ## $ dbh_cm_smape &lt;dbl&gt; 0.4584621, 0.4673925, 0.5094000,… ## $ dbh_cm_mse &lt;dbl&gt; 168.34419, 113.68139, 165.40074,… ## $ dbh_cm_rmse &lt;dbl&gt; 12.974752, 10.662147, 12.860822,… ## $ uas_basal_area_m2 &lt;dbl&gt; 59.81562, 58.24249, 58.89314, 49… ## $ field_basal_area_m2 &lt;dbl&gt; 69.04409, 69.04409, 69.04409, 69… ## $ uas_basal_area_m2_per_ha &lt;dbl&gt; 34.30442, 33.40222, 33.77538, 28… ## $ field_basal_area_m2_per_ha &lt;dbl&gt; 39.59697, 39.59697, 39.59697, 39… ## $ basal_area_m2_error &lt;dbl&gt; -9.228474, -10.801601, -10.15094… ## $ basal_area_m2_per_ha_error &lt;dbl&gt; -5.2925541, -6.1947468, -5.82159… ## $ basal_area_pct_error &lt;dbl&gt; -0.13366058, -0.15644496, -0.147… ## $ basal_area_abs_pct_error &lt;dbl&gt; 0.13366058, 0.15644496, 0.147021… ## $ overstory_commission_n_trees &lt;dbl&gt; 141, 178, 178, 160, 95, 173, 120… ## $ understory_commission_n_trees &lt;dbl&gt; 32, 44, 35, 33, 53, 50, 43, 39, … ## $ overstory_omission_n_trees &lt;dbl&gt; 558, 560, 545, 556, 554, 598, 54… ## $ understory_omission_n_trees &lt;dbl&gt; 214, 180, 196, 211, 227, 228, 22… ## $ overstory_true_positive_n_trees &lt;dbl&gt; 185, 183, 198, 187, 189, 145, 19… ## $ understory_true_positive_n_trees &lt;dbl&gt; 44, 78, 62, 47, 31, 30, 33, 40, … ## $ overstory_f_score &lt;dbl&gt; 0.3461179, 0.3315217, 0.3538874,… ## $ understory_f_score &lt;dbl&gt; 0.2634731, 0.4105263, 0.3492958,… ## $ overstory_tree_height_m_me &lt;dbl&gt; 0.41693172, 0.44114110, 0.442167… ## $ understory_tree_height_m_me &lt;dbl&gt; -0.34602886, -0.08612009, -0.102… ## $ overstory_tree_height_m_mpe &lt;dbl&gt; 0.020790675, 0.024558478, 0.0241… ## $ understory_tree_height_m_mpe &lt;dbl&gt; -0.075146232, -0.013158341, -0.0… ## $ overstory_tree_height_m_mae &lt;dbl&gt; 0.8201433, 0.7820879, 0.7770369,… ## $ understory_tree_height_m_mae &lt;dbl&gt; 0.6495266, 0.4693415, 0.4183269,… ## $ overstory_tree_height_m_mape &lt;dbl&gt; 0.04662933, 0.04863237, 0.048708… ## $ understory_tree_height_m_mape &lt;dbl&gt; 0.14874284, 0.11691842, 0.098369… ## $ overstory_tree_height_m_smape &lt;dbl&gt; 0.04589942, 0.04776615, 0.047912… ## $ understory_tree_height_m_smape &lt;dbl&gt; 0.15969736, 0.11676780, 0.100322… ## $ overstory_tree_height_m_mse &lt;dbl&gt; 1.0623763, 1.0055835, 0.9739823,… ## $ understory_tree_height_m_mse &lt;dbl&gt; 0.6557300, 0.4876080, 0.3533791,… ## $ overstory_tree_height_m_rmse &lt;dbl&gt; 1.0307164, 1.0027878, 0.9869054,… ## $ understory_tree_height_m_rmse &lt;dbl&gt; 0.8097715, 0.6982893, 0.5944570,… ## $ overstory_dbh_cm_me &lt;dbl&gt; 7.12396092, 4.28187214, 5.994003… ## $ understory_dbh_cm_me &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mpe &lt;dbl&gt; 0.35551830, 0.28023813, 0.384916… ## $ understory_dbh_cm_mpe &lt;dbl&gt; 2.99912656, 2.07005068, 2.783578… ## $ overstory_dbh_cm_mae &lt;dbl&gt; 10.103420, 8.380144, 10.259129, … ## $ understory_dbh_cm_mae &lt;dbl&gt; 17.633557, 11.941296, 16.168746,… ## $ overstory_dbh_cm_mape &lt;dbl&gt; 0.4068072, 0.3576254, 0.4595653,… ## $ understory_dbh_cm_mape &lt;dbl&gt; 2.9991266, 2.0700507, 2.7835783,… ## $ overstory_dbh_cm_smape &lt;dbl&gt; 0.3087332, 0.2849537, 0.3443392,… ## $ understory_dbh_cm_smape &lt;dbl&gt; 1.0880037, 0.8954218, 1.0365298,… ## $ overstory_dbh_cm_mse &lt;dbl&gt; 132.58061, 97.96175, 132.74645, … ## $ understory_dbh_cm_mse &lt;dbl&gt; 318.713781, 150.562072, 269.6837… ## $ overstory_dbh_cm_rmse &lt;dbl&gt; 11.514365, 9.897563, 11.521564, … ## $ understory_dbh_cm_rmse &lt;dbl&gt; 17.852557, 12.270374, 16.422052,… ## $ overstory_uas_basal_area_m2 &lt;dbl&gt; 55.94051, 54.40543, 54.41901, 46… ## $ understory_uas_basal_area_m2 &lt;dbl&gt; 3.8751084, 3.8370665, 4.4741330,… ## $ overstory_field_basal_area_m2 &lt;dbl&gt; 67.50326, 67.50326, 67.50326, 67… ## $ understory_field_basal_area_m2 &lt;dbl&gt; 1.540832, 1.540832, 1.540832, 1.… ## $ overstory_uas_basal_area_m2_per_ha &lt;dbl&gt; 32.08203, 31.20166, 31.20945, 26… ## $ understory_uas_basal_area_m2_per_ha &lt;dbl&gt; 2.22238497, 2.20056787, 2.565927… ## $ overstory_field_basal_area_m2_per_ha &lt;dbl&gt; 38.7133, 38.7133, 38.7133, 38.71… ## $ understory_field_basal_area_m2_per_ha &lt;dbl&gt; 0.883671, 0.883671, 0.883671, 0.… ## $ overstory_basal_area_m2_per_ha_error &lt;dbl&gt; -6.631268, -7.511644, -7.503852,… ## $ understory_basal_area_m2_per_ha_error &lt;dbl&gt; 1.3387140, 1.3168969, 1.6822562,… ## $ overstory_basal_area_pct_error &lt;dbl&gt; -0.17129173, -0.19403263, -0.193… ## $ understory_basal_area_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ overstory_basal_area_abs_pct_error &lt;dbl&gt; 0.17129173, 0.19403263, 0.193831… ## $ understory_basal_area_abs_pct_error &lt;dbl&gt; 1.5149461, 1.4902570, 1.9037132,… ## $ validation_file_full_path &lt;chr&gt; &quot;D:/SfM_Software_Comparison/Meta… ## $ overstory_ht_m &lt;dbl&gt; 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… # a row is unique by... identical( nrow(ptcld_validation_data) , ptcld_validation_data %&gt;% dplyr::distinct( study_site, software , depth_maps_generation_quality , depth_maps_generation_filtering_mode , processing_attribute3 # need to align all by software so this will go away or be filled ) %&gt;% nrow() ) ## [1] TRUE load our plotting functions if needed (not showing these functions here but see the prior section for function definitions) 7.3 Tree Height 7.3.1 Summary Statistics 7.3.1.1 Height Mean Error (bias) # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( tree_height_m_me = mean(tree_height_m_me, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_tree_height_m_me = ceiling(10*max(abs(range(dta_temp$tree_height_m_me, na.rm = T))))/10 # scales::show_col(scales::pal_dichromat(&quot;BluetoOrange.10&quot;)(10)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = tree_height_m_me , label = paste0(scales::comma(tree_height_m_me,accuracy = 0.01), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_tree_height_m_me,lmt_tree_height_m_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;Height Mean Error (m)&quot; , title = &quot;mean height mean error (m) and # of study sites&quot; , subtitle = paste( &quot;negative values = UAS tree height &lt; field tree height&quot; , &quot; || &quot; , &quot;positive values = UAS tree height &gt; field tree height&quot; ) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 7.3.1.2 Height RMSE (precision) # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( tree_height_m_rmse = mean(tree_height_m_rmse, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_tree_height_m_rmse = ceiling(1.02*10*max(abs(range(dta_temp$tree_height_m_rmse, na.rm = T))))/10 # scales::show_col(viridis::mako(n = 10, begin = 0.2, end = 0.9, direction = -1)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = tree_height_m_rmse , label = paste0(scales::comma(tree_height_m_rmse,accuracy = 0.01), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_tree_height_m_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;Height RMSE (m)&quot; , title = &quot;mean height RMSE (m) and # of study sites&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 7.3.2 Model: Height Mean Error (bias) # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$tree_height_m_me, na.rm = T) sd_y_temp = sd(ptcld_validation_data$tree_height_m_me, na.rm = T) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) 7.3.2.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp priors_temp &lt;- c( brms::prior(normal(mean_y_temp, sd_y_temp * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(s_r_temp$shape, s_r_temp$rate), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y_temp), class = &quot;sigma&quot;) ) # plot plt_prior1 = priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols=vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: Height Mean Error (bias)&quot; , y = &quot;&quot; ) plt_prior1 7.3.2.2 Fit the model Now fit the model. brms_ht_me_mod = brms::brm( formula = tree_height_m_me ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_ht_me_mod&quot;) ) 7.3.2.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_ht_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_tree_height_m_me,lmt_tree_height_m_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;Height Mean Error (m)&quot; , subtitle = &quot;posterior predictive distribution of height mean error (m) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height Mean Error (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Height Mean Error (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.1: Height Mean Error (m)95% HDI of the posterior predictive distribution filtering mode Height Mean Error (m)median HDI low HDI high ultra high aggressive 0.26 -0.29 0.80 moderate 0.30 -0.25 0.83 mild 0.34 -0.20 0.88 disabled 0.37 -0.18 0.90 high aggressive 0.18 -0.37 0.72 moderate 0.23 -0.31 0.77 mild 0.27 -0.27 0.81 disabled 0.29 -0.27 0.82 medium aggressive 0.06 -0.49 0.59 moderate 0.11 -0.43 0.64 mild 0.16 -0.40 0.67 disabled 0.19 -0.36 0.71 low aggressive -0.06 -0.61 0.47 moderate -0.01 -0.54 0.53 mild 0.04 -0.50 0.58 disabled 0.08 -0.46 0.61 lowest aggressive -0.22 -0.78 0.37 moderate -0.16 -0.72 0.43 mild -0.10 -0.66 0.48 disabled -0.09 -0.65 0.50 7.3.2.4 Software:Quality - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_ht_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_tree_height_m_me,lmt_tree_height_m_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;Height Mean Error (m)&quot; , subtitle = &quot;posterior predictive distribution of height mean error (m) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height Mean Error (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;Height Mean Error (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.2: Height Mean Error (m)95% HDI of the posterior predictive distribution quality Height Mean Error (m)median HDI low HDI high METASHAPE ultra high 0.33 0.00 0.65 high 0.24 -0.08 0.57 medium 0.06 -0.27 0.38 low -0.23 -0.55 0.10 lowest -0.54 -0.87 -0.21 OPENDRONEMAP ultra high 0.36 0.04 0.69 high 0.22 -0.10 0.54 medium 0.06 -0.26 0.39 low 0.07 -0.26 0.39 lowest 0.01 -0.31 0.34 PIX4D ultra high 0.41 0.08 0.74 high 0.37 0.04 0.70 medium 0.29 -0.04 0.61 low 0.12 -0.21 0.45 7.3.2.5 Software:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) %&gt;% tidybayes::add_epred_draws( brms_ht_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_tree_height_m_me,lmt_tree_height_m_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( x = &quot;software&quot;, y = &quot;Height Mean Error (m)&quot; , subtitle = &quot;posterior predictive distribution of height mean error (m) with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height Mean Error (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Height Mean Error (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.3: Height Mean Error (m)95% HDI of the posterior predictive distribution filtering mode Height Mean Error (m)median HDI low HDI high METASHAPE aggressive -0.08 -0.51 0.36 moderate -0.01 -0.45 0.42 mild 0.04 -0.40 0.48 disabled 0.06 -0.38 0.50 OPENDRONEMAP aggressive 0.07 -0.37 0.49 moderate 0.13 -0.31 0.55 mild 0.16 -0.27 0.59 disabled 0.19 -0.25 0.61 PIX4D moderate 0.18 -0.25 0.64 mild 0.24 -0.20 0.69 disabled 0.27 -0.17 0.71 7.3.2.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ht_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_ht_me = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_tree_height_m_me,lmt_tree_height_m_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + labs( x = &quot;filtering mode&quot;, y = &quot;Height Mean Error (m)&quot; , subtitle = &quot;posterior predictive distribution of height mean error (m) with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_ht_me ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_ht_me.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height Mean Error (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;Height Mean Error (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.4: Height Mean Error (m)95% HDI of the posterior predictive distribution software quality filtering mode Height Mean Error (m)median HDI low HDI high METASHAPE lowest aggressive -0.65 -0.94 -0.36 moderate -0.55 -0.84 -0.27 mild -0.48 -0.77 -0.20 disabled -0.49 -0.77 -0.20 low aggressive -0.32 -0.60 -0.03 moderate -0.26 -0.54 0.03 mild -0.19 -0.48 0.09 disabled -0.16 -0.45 0.13 medium aggressive -0.03 -0.32 0.26 moderate 0.04 -0.25 0.32 mild 0.10 -0.19 0.38 disabled 0.12 -0.16 0.41 high aggressive 0.16 -0.13 0.44 moderate 0.22 -0.06 0.51 mild 0.27 -0.02 0.56 disabled 0.28 0.00 0.57 ultra high aggressive 0.26 -0.02 0.55 moderate 0.32 0.04 0.61 mild 0.37 0.08 0.65 disabled 0.38 0.09 0.67 OPENDRONEMAP lowest aggressive -0.07 -0.36 0.21 moderate 0.00 -0.27 0.30 mild 0.04 -0.24 0.33 disabled 0.05 -0.23 0.33 low aggressive 0.00 -0.29 0.28 moderate 0.05 -0.24 0.33 mild 0.08 -0.21 0.36 disabled 0.14 -0.15 0.42 medium aggressive -0.01 -0.30 0.28 moderate 0.04 -0.24 0.33 mild 0.09 -0.20 0.37 disabled 0.12 -0.17 0.40 high aggressive 0.16 -0.12 0.45 moderate 0.21 -0.08 0.50 mild 0.24 -0.05 0.52 disabled 0.27 -0.02 0.55 ultra high aggressive 0.30 0.01 0.58 moderate 0.35 0.06 0.63 mild 0.38 0.09 0.66 disabled 0.41 0.12 0.69 PIX4D low moderate 0.08 -0.21 0.37 mild 0.16 -0.14 0.43 disabled 0.20 -0.09 0.49 medium moderate 0.26 -0.03 0.55 mild 0.32 0.04 0.61 disabled 0.35 0.06 0.64 high moderate 0.35 0.07 0.64 mild 0.40 0.13 0.70 disabled 0.43 0.14 0.72 ultra high moderate 0.39 0.10 0.68 mild 0.44 0.14 0.71 disabled 0.47 0.18 0.76 7.3.3 Model: Height RMSE (precision) Define priors # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$tree_height_m_rmse, na.rm = T) sd_y_temp = sd(ptcld_validation_data$tree_height_m_rmse, na.rm = T) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) 7.3.3.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp priors_temp &lt;- c( brms::prior(normal(mean_y_temp, sd_y_temp * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(s_r_temp$shape, s_r_temp$rate), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y_temp), class = &quot;sigma&quot;) ) # plot plt_prior2 = priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols=vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: Height RMSE (precision)&quot; , y = &quot;&quot; ) plt_prior2 7.3.3.2 Fit the model Now fit the model. brms_ht_rmse_mod = brms::brm( formula = tree_height_m_rmse ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_ht_rmse_mod&quot;) ) 7.3.3.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_ht_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_tree_height_m_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;filtering mode&quot;, y = &quot;Height RMSE (m)&quot; , subtitle = &quot;posterior predictive distribution of height RMSE (m) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Height RMSE (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.5: Height RMSE (m)95% HDI of the posterior predictive distribution filtering mode Height RMSE (m)median HDI low HDI high ultra high aggressive 0.81 0.58 1.05 moderate 0.81 0.57 1.04 mild 0.79 0.56 1.03 disabled 0.81 0.57 1.04 high aggressive 0.81 0.57 1.04 moderate 0.80 0.57 1.04 mild 0.79 0.56 1.03 disabled 0.81 0.57 1.05 medium aggressive 0.82 0.58 1.06 moderate 0.81 0.57 1.05 mild 0.80 0.56 1.03 disabled 0.81 0.58 1.05 low aggressive 0.85 0.62 1.09 moderate 0.84 0.61 1.08 mild 0.82 0.59 1.06 disabled 0.83 0.60 1.07 lowest aggressive 0.91 0.66 1.17 moderate 0.90 0.66 1.16 mild 0.88 0.63 1.13 disabled 0.90 0.66 1.16 we can also make pairwise comparisons # first we need to define the contrasts to make contrast_list = tidyr::crossing( x1 = unique(ptcld_validation_data$depth_maps_generation_quality) , x2 = unique(ptcld_validation_data$depth_maps_generation_quality) ) %&gt;% dplyr::mutate( dplyr::across( dplyr::everything() , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) ) %&gt;% dplyr::filter(x1&lt;x2) %&gt;% dplyr::arrange(x1,x2) %&gt;% dplyr::mutate(dplyr::across(dplyr::everything(), as.character)) %&gt;% purrr::transpose() # make the contrasts using compare_levels brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; 0.0077250485, -0.0013793018, -0.0… ## $ median_hdi_est &lt;dbl&gt; 0.001902155, 0.001902155, 0.00190… ## $ median_hdi_lower &lt;dbl&gt; -0.109832, -0.109832, -0.109832, … ## $ median_hdi_upper &lt;dbl&gt; 0.1195857, 0.1195857, 0.1195857, … ## $ is_gt_zero &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, TRUE, … ## $ pct_gt_zero &lt;dbl&gt; 0.5158, 0.5158, 0.5158, 0.5158, 0… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(ultra high&gt;high)=52%&quot;, &quot;Pr(ul… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&gt;0)=52%&quot;, &quot;Pr(&gt;0)=52%&quot;, &quot;Pr(&gt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; 0.1285546, 0.1285546, 0.1285546, … ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 1.9 , x_expand = c(1,0.95) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; , x = &quot;constrast Height RMSE (m)&quot; ) + theme( axis.text.x = element_text(size = 7) ) ggplot2::ggsave( &quot;../data/qlty_fltr_comp_ht_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;median difference&lt;br&gt;Height RMSE (m)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.6: Height RMSE (m)95% HDI of the posterior predictive distribution of group contrasts quality contrast filtering mode median differenceHeight RMSE (m) HDI low HDI high ultra high - high aggressive 0.00 -0.11 0.12 ultra high - high moderate 0.00 -0.11 0.12 ultra high - high mild 0.00 -0.11 0.11 ultra high - high disabled 0.00 -0.11 0.12 ultra high - medium aggressive 0.00 -0.12 0.11 ultra high - medium moderate 0.00 -0.12 0.11 ultra high - medium mild 0.00 -0.11 0.11 ultra high - medium disabled 0.00 -0.12 0.11 ultra high - low aggressive -0.03 -0.16 0.07 ultra high - low moderate -0.04 -0.16 0.07 ultra high - low mild -0.02 -0.15 0.08 ultra high - low disabled -0.02 -0.14 0.09 ultra high - lowest aggressive -0.10 -0.25 0.03 ultra high - lowest moderate -0.09 -0.25 0.04 ultra high - lowest mild -0.08 -0.23 0.05 ultra high - lowest disabled -0.09 -0.24 0.05 high - medium aggressive -0.01 -0.12 0.10 high - medium moderate -0.01 -0.12 0.11 high - medium mild 0.00 -0.11 0.11 high - medium disabled 0.00 -0.11 0.11 high - low aggressive -0.03 -0.16 0.07 high - low moderate -0.04 -0.16 0.07 high - low mild -0.03 -0.15 0.09 high - low disabled -0.02 -0.15 0.09 high - lowest aggressive -0.10 -0.26 0.04 high - lowest moderate -0.10 -0.25 0.04 high - lowest mild -0.08 -0.24 0.06 high - lowest disabled -0.09 -0.25 0.04 medium - low aggressive -0.03 -0.15 0.08 medium - low moderate -0.03 -0.15 0.07 medium - low mild -0.02 -0.14 0.08 medium - low disabled -0.02 -0.14 0.09 medium - lowest aggressive -0.09 -0.25 0.04 medium - lowest moderate -0.09 -0.24 0.04 medium - lowest mild -0.08 -0.23 0.06 medium - lowest disabled -0.09 -0.24 0.05 low - lowest aggressive -0.06 -0.21 0.06 low - lowest moderate -0.05 -0.19 0.07 low - lowest mild -0.05 -0.19 0.07 low - lowest disabled -0.06 -0.21 0.05 7.3.3.4 Software:Quality - interaction draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ht_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_tree_height_m_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;software&quot;, y = &quot;Height RMSE (m)&quot; , subtitle = &quot;posterior predictive distribution of height RMSE (m) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;Height RMSE (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.7: Height RMSE (m)95% HDI of the posterior predictive distribution quality Height RMSE (m)median HDI low HDI high METASHAPE ultra high 0.79 0.60 0.96 high 0.77 0.59 0.94 medium 0.78 0.60 0.96 low 0.90 0.73 1.08 lowest 1.06 0.88 1.24 OPENDRONEMAP ultra high 0.78 0.60 0.96 high 0.80 0.62 0.97 medium 0.83 0.66 1.01 low 0.81 0.63 0.98 lowest 0.84 0.66 1.02 PIX4D ultra high 0.82 0.64 0.99 high 0.80 0.62 0.98 medium 0.78 0.60 0.96 low 0.81 0.64 1.00 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 1.9 , x_expand = c(0.83,0.82) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast Height RMSE (m)&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_ht_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_qlty_sftwr_comp_ht_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;quality contrast&quot; , facet = &quot;software&quot; , label_size = 1.5 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.6 ) + labs( subtitle = &quot;&quot; # &quot;constrast Height RMSE (m)&quot; , x = &quot;Height RMSE (m) constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_qlty_sftwr_comp_ht_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;median difference&lt;br&gt;Height RMSE (m)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.8: Height RMSE (m)95% HDI of the posterior predictive distribution of group contrasts quality contrast median differenceHeight RMSE (m) HDI low HDI high METASHAPE ultra high - high 0.02 -0.06 0.10 ultra high - medium 0.01 -0.07 0.09 ultra high - low -0.12 -0.20 -0.04 ultra high - lowest -0.28 -0.36 -0.19 high - medium -0.01 -0.09 0.07 high - low -0.13 -0.21 -0.05 high - lowest -0.29 -0.38 -0.21 medium - low -0.13 -0.21 -0.05 medium - lowest -0.29 -0.37 -0.20 low - lowest -0.16 -0.24 -0.08 OPENDRONEMAP ultra high - high -0.02 -0.10 0.06 ultra high - medium -0.05 -0.13 0.03 ultra high - low -0.03 -0.11 0.05 ultra high - lowest -0.06 -0.15 0.02 high - medium -0.04 -0.11 0.04 high - low -0.01 -0.09 0.07 high - lowest -0.05 -0.13 0.04 medium - low 0.02 -0.05 0.10 medium - lowest -0.01 -0.10 0.07 low - lowest -0.04 -0.12 0.04 PIX4D ultra high - high 0.01 -0.08 0.10 ultra high - medium 0.03 -0.06 0.12 ultra high - low 0.00 -0.09 0.09 high - medium 0.02 -0.07 0.11 high - low -0.01 -0.10 0.08 medium - low -0.03 -0.12 0.06 The contrasts above address the question “are there differences in RMSE based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in RMSE based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter1 == software, depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter2 == software, depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.9 , x_expand = c(0.25,0.1) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; , x = &quot;constrast Height RMSE (m)&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) ggplot2::ggsave( &quot;../data/sftwr_qlty_comp_ht_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_sftwr_qlty_comp_ht_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;software contrast&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 3) + labs( subtitle = &quot;&quot; , x = &quot;Height RMSE (m) constrast&quot; ) + theme( legend.position = &quot;inside&quot; , legend.position.inside = c(.8, .10) , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(6.5, &quot;lines&quot;) ))) # ptchwrk_sftwr_qlty_comp_ht_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) table_temp %&gt;% dplyr::select(-c(contrast)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality&quot; , &quot;median difference&lt;br&gt;Height RMSE (m)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$contrast))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.9: Height RMSE (m)95% HDI of the posterior predictive distribution of group contrasts quality median differenceHeight RMSE (m) HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -0.01 -0.09 0.08 high 0.03 -0.05 0.11 medium 0.06 -0.03 0.14 low -0.09 -0.18 -0.01 lowest -0.22 -0.31 -0.13 PIX4D - METASHAPE ultra high 0.03 -0.06 0.12 high 0.03 -0.05 0.13 medium 0.01 -0.08 0.10 low -0.09 -0.18 0.00 PIX4D - OPENDRONEMAP ultra high 0.04 -0.05 0.13 high 0.00 -0.08 0.10 medium -0.05 -0.14 0.04 low 0.01 -0.08 0.10 7.3.3.5 Software:Filtering - interaction draws_temp = tidyr::crossing( depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ht_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) , by = dplyr::join_by(depth_maps_generation_filtering_mode, software) ) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_tree_height_m_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;software&quot;, y = &quot;Height RMSE (m)&quot; , subtitle = &quot;posterior predictive distribution of height RMSE (m) with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Height RMSE (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.10: Height RMSE (m)95% HDI of the posterior predictive distribution filtering mode Height RMSE (m)median HDI low HDI high METASHAPE aggressive 0.88 0.68 1.07 moderate 0.85 0.66 1.05 mild 0.83 0.64 1.03 disabled 0.84 0.65 1.04 OPENDRONEMAP aggressive 0.82 0.62 1.01 moderate 0.82 0.62 1.01 mild 0.80 0.61 0.99 disabled 0.83 0.64 1.02 PIX4D aggressive 0.83 0.63 1.04 moderate 0.83 0.63 1.02 mild 0.81 0.61 1.01 disabled 0.83 0.63 1.02 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_filtering_mode) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; , facet = &quot;software&quot; , label_size = 1.9 , x_expand = c(0.6,0.45) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast Height RMSE (m)&quot; ) ggplot2::ggsave( &quot;../data/fltr_sftwr_comp_ht_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_fltr_sftwr_comp_ht_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;filtering mode contrast&quot; , facet = &quot;software&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.6 ) + labs( subtitle = &quot;&quot; # &quot;constrast Height RMSE (m)&quot; , x = &quot;Height RMSE (m) constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_fltr_sftwr_comp_ht_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;filtering contrast&quot; , &quot;median difference&lt;br&gt;Height RMSE (m)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.11: Height RMSE (m)95% HDI of the posterior predictive distribution of group contrasts filtering contrast median differenceHeight RMSE (m) HDI low HDI high METASHAPE disabled - mild 0.01 -0.04 0.07 disabled - moderate -0.01 -0.06 0.05 disabled - aggressive -0.03 -0.10 0.03 mild - moderate -0.02 -0.08 0.03 mild - aggressive -0.04 -0.11 0.01 moderate - aggressive -0.02 -0.09 0.03 OPENDRONEMAP disabled - mild 0.03 -0.02 0.09 disabled - moderate 0.01 -0.04 0.07 disabled - aggressive 0.01 -0.04 0.08 mild - moderate -0.02 -0.07 0.04 mild - aggressive -0.01 -0.07 0.05 moderate - aggressive 0.00 -0.05 0.06 PIX4D disabled - mild 0.02 -0.04 0.08 disabled - moderate 0.00 -0.06 0.06 mild - moderate -0.02 -0.08 0.04 7.3.3.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ht_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_ht_rmse = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_tree_height_m_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;filtering mode&quot;, y = &quot;Height RMSE (m)&quot; , subtitle = &quot;posterior predictive distribution of height RMSE (m) with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_ht_rmse ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_ht_rmse.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Height RMSE (m)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;Height RMSE (m)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.12: Height RMSE (m)95% HDI of the posterior predictive distribution software quality filtering mode Height RMSE (m)median HDI low HDI high METASHAPE lowest aggressive 1.10 0.92 1.27 moderate 1.07 0.90 1.24 mild 1.04 0.86 1.21 disabled 1.06 0.88 1.23 low aggressive 0.94 0.76 1.11 moderate 0.91 0.74 1.08 mild 0.88 0.71 1.05 disabled 0.89 0.72 1.06 medium aggressive 0.80 0.63 0.98 moderate 0.78 0.61 0.95 mild 0.76 0.59 0.93 disabled 0.77 0.60 0.94 high aggressive 0.79 0.62 0.96 moderate 0.77 0.60 0.94 mild 0.75 0.58 0.92 disabled 0.77 0.59 0.94 ultra high aggressive 0.81 0.64 0.98 moderate 0.79 0.61 0.96 mild 0.77 0.60 0.94 disabled 0.78 0.61 0.96 OPENDRONEMAP lowest aggressive 0.85 0.67 1.02 moderate 0.85 0.68 1.03 mild 0.82 0.65 0.99 disabled 0.86 0.69 1.03 low aggressive 0.81 0.63 0.98 moderate 0.82 0.64 0.99 mild 0.79 0.63 0.97 disabled 0.82 0.65 0.99 medium aggressive 0.83 0.66 1.00 moderate 0.83 0.66 1.00 mild 0.82 0.65 0.99 disabled 0.85 0.68 1.02 high aggressive 0.79 0.62 0.96 moderate 0.79 0.62 0.96 mild 0.79 0.61 0.95 disabled 0.81 0.64 0.98 ultra high aggressive 0.77 0.60 0.95 moderate 0.78 0.60 0.94 mild 0.77 0.59 0.94 disabled 0.80 0.62 0.97 PIX4D low moderate 0.83 0.65 1.00 mild 0.79 0.62 0.97 disabled 0.81 0.64 0.99 medium moderate 0.78 0.61 0.95 mild 0.77 0.59 0.94 disabled 0.79 0.62 0.96 high moderate 0.80 0.63 0.97 mild 0.79 0.62 0.96 disabled 0.81 0.63 0.98 ultra high moderate 0.81 0.64 0.98 mild 0.80 0.63 0.97 disabled 0.82 0.65 0.99 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter1==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter2==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) plot it brms_contrast_temp %&gt;% plt_contrast( facet = c(&quot;depth_maps_generation_quality&quot;, &quot;software&quot;) , y_axis_title = &quot;filtering mode&quot; , label_size = 0 , x_expand = c(-0.1,-0.1) ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality and software&quot; , x = &quot;constrast Height RMSE (m)&quot; ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_comp_ht_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) Export some final images for publication p1_temp = qlty_fltr_sftwr_ht_me + labs(subtitle = &quot;A: Height Mean Error (m)&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) p2_temp = qlty_fltr_sftwr_ht_rmse + labs(subtitle = &quot;B: Height RMSE (m)&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) # export p1_temp / p2_temp ggplot2::ggsave( filename = paste0(&quot;../data/qlty_fltr_sftwr_ht_comb.jpeg&quot;) , plot = ggplot2::last_plot() , width = 8.5 , height = 11 , units = &quot;in&quot; , dpi = &quot;print&quot; ) 7.4 Tree DBH 7.4.1 Summary Statistics 7.4.1.1 DBH Mean Error (bias) # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( dbh_cm_me = mean(dbh_cm_me, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_dbh_cm_me = ceiling(10*max(abs(range(dta_temp$dbh_cm_me, na.rm = T))))/10 # scales::show_col(scales::pal_dichromat(&quot;BluetoOrange.10&quot;)(10)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = dbh_cm_me , label = paste0(scales::comma(dbh_cm_me,accuracy = 0.01), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_dbh_cm_me,lmt_dbh_cm_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;DBH Mean Error (cm)&quot; , title = &quot;mean DBH mean error (cm) and # of study sites&quot; , subtitle = paste( &quot;negative values = UAS tree DBH &lt; field tree DBH&quot; , &quot; || &quot; , &quot;positive values = UAS tree DBH &gt; field tree DBH&quot; ) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 7.4.1.2 DBH RMSE (precision) # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( dbh_cm_rmse = mean(dbh_cm_rmse, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_dbh_cm_rmse = ceiling(1.02*10*max(abs(range(dta_temp$dbh_cm_rmse, na.rm = T))))/10 # scales::show_col(viridis::mako(n = 10, begin = 0.2, end = 0.9, direction = -1)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = dbh_cm_rmse , label = paste0(scales::comma(dbh_cm_rmse,accuracy = 0.1), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_dbh_cm_rmse) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;DBH RMSE (cm)&quot; , title = &quot;mean DBH RMSE (cm) and # of study sites&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 7.4.2 Model: DBH Mean Error (bias) Define priors # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$dbh_cm_me, na.rm = T) sd_y_temp = sd(ptcld_validation_data$dbh_cm_me, na.rm = T) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) 7.4.2.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp priors_temp &lt;- c( brms::prior(normal(mean_y_temp, sd_y_temp * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(s_r_temp$shape, s_r_temp$rate), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y_temp), class = &quot;sigma&quot;) ) # plot plt_prior3 = priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols=vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: DBH Mean Error (bias)&quot; , y = &quot;&quot; ) plt_prior3 7.4.2.2 Fit the model Now fit the model. brms_dbh_me_mod = brms::brm( formula = dbh_cm_me ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_dbh_me_mod&quot;) ) 7.4.2.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_dbh_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + # tidybayes::stat_dotsinterval( # point_interval = median_hdi, .width = .95 # , justification = -0.04 # , slab_alpha = 0.98 # , shape = 21, point_size = 3 # , quantiles = 100 # ) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_dbh_cm_me,lmt_dbh_cm_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + scale_y_continuous(breaks = scales::extended_breaks(n=8)) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;filtering mode&quot;, y = &quot;DBH Mean Error (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH mean error (cm) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH Mean Error (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;DBH Mean Error (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.13: DBH Mean Error (cm)95% HDI of the posterior predictive distribution filtering mode DBH Mean Error (cm)median HDI low HDI high ultra high aggressive 3.85 -5.94 13.71 moderate 3.89 -5.94 13.63 mild 3.74 -6.00 13.56 disabled 3.89 -5.90 13.78 high aggressive 4.42 -5.37 14.27 moderate 4.66 -5.12 14.36 mild 4.21 -5.70 13.93 disabled 4.62 -5.21 14.53 medium aggressive 4.73 -5.14 14.60 moderate 3.77 -6.00 13.58 mild 4.80 -4.85 14.65 disabled 4.56 -4.81 14.75 low aggressive 2.54 -7.21 12.46 moderate 2.47 -7.34 12.10 mild 2.55 -7.10 12.41 disabled 4.01 -5.53 14.19 lowest aggressive 1.64 -8.28 11.97 moderate 1.63 -8.48 11.58 mild 1.90 -8.01 12.03 disabled 2.15 -7.51 12.67 7.4.2.4 Software:Quality - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_dbh_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_dbh_cm_me,lmt_dbh_cm_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + labs( x = &quot;software&quot;, y = &quot;DBH Mean Error (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH mean error (cm) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH Mean Error (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;DBH Mean Error (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.14: DBH Mean Error (cm)95% HDI of the posterior predictive distribution quality DBH Mean Error (cm)median HDI low HDI high METASHAPE ultra high 1.58 -5.79 8.92 high 3.78 -3.44 11.34 medium 6.38 -0.99 13.89 low 2.01 -5.38 9.33 lowest -0.92 -8.28 6.53 OPENDRONEMAP ultra high 4.80 -2.70 12.14 high 4.38 -3.01 11.77 medium 1.55 -5.96 8.81 low 1.31 -6.11 8.54 lowest 1.01 -6.39 8.30 PIX4D ultra high 5.59 -1.96 12.94 high 6.50 -0.99 13.93 medium 6.70 -0.60 14.36 low 4.52 -2.65 12.35 7.4.2.5 Software:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) %&gt;% tidybayes::add_epred_draws( brms_dbh_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_dbh_cm_me,lmt_dbh_cm_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + labs( x = &quot;software&quot;, y = &quot;DBH Mean Error (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH mean error (cm) with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH Mean Error (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;DBH Mean Error (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.15: DBH Mean Error (cm)95% HDI of the posterior predictive distribution filtering mode DBH Mean Error (cm)median HDI low HDI high METASHAPE aggressive 2.73 -4.91 10.31 moderate 2.49 -5.22 9.93 mild 2.57 -5.13 10.14 disabled 3.01 -4.62 10.55 OPENDRONEMAP aggressive 2.64 -5.13 10.16 moderate 2.73 -4.95 10.31 mild 2.69 -4.96 10.30 disabled 2.93 -4.41 10.88 PIX4D moderate 4.61 -2.98 12.61 mild 5.06 -2.79 12.77 disabled 5.63 -2.37 13.24 7.4.2.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_dbh_me_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_dbh_me = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_dbh_cm_me,lmt_dbh_cm_me) , labels = scales::comma_format(accuracy = 0.1) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + labs( x = &quot;filtering mode&quot;, y = &quot;DBH Mean Error (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH mean error (cm) with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_dbh_me ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_dbh_me.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH Mean Error (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;DBH Mean Error (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.16: DBH Mean Error (cm)95% HDI of the posterior predictive distribution software quality filtering mode DBH Mean Error (cm)median HDI low HDI high METASHAPE lowest aggressive -1.67 -9.17 5.63 moderate -1.56 -9.12 5.60 mild -1.08 -8.53 6.17 disabled -0.78 -7.99 6.40 low aggressive 1.08 -6.55 8.06 moderate 1.50 -5.77 8.79 mild 1.58 -5.63 8.89 disabled 3.56 -3.73 10.96 medium aggressive 7.79 0.34 15.08 moderate 6.12 -1.21 13.40 mild 6.48 -0.85 13.80 disabled 6.50 -0.76 13.81 high aggressive 4.15 -3.38 11.29 moderate 3.93 -3.57 11.05 mild 3.47 -3.83 10.74 disabled 3.89 -3.39 11.24 ultra high aggressive 1.61 -5.67 8.85 moderate 1.37 -5.88 8.58 mild 1.18 -6.12 8.41 disabled 1.53 -5.81 8.73 OPENDRONEMAP lowest aggressive 0.62 -6.82 7.71 moderate 0.88 -6.39 8.13 mild 0.92 -6.46 8.04 disabled 1.02 -6.26 8.16 low aggressive 0.78 -6.51 8.04 moderate 0.93 -6.21 8.29 mild 0.94 -6.37 8.15 disabled 1.99 -5.41 9.26 medium aggressive 1.48 -5.97 8.65 moderate 0.95 -6.39 8.09 mild 1.68 -5.79 8.68 disabled 1.34 -5.93 8.57 high aggressive 4.19 -3.19 11.36 moderate 4.64 -2.54 11.98 mild 4.16 -3.22 11.29 disabled 4.99 -2.23 12.45 ultra high aggressive 4.99 -2.23 12.44 moderate 5.60 -1.79 12.71 mild 4.80 -2.69 11.87 disabled 4.53 -2.77 11.73 PIX4D low moderate 3.12 -4.31 10.36 mild 3.47 -3.93 10.82 disabled 7.46 0.01 15.14 medium moderate 4.70 -3.10 11.86 mild 8.56 1.16 16.08 disabled 7.34 0.06 14.76 high moderate 7.55 0.42 15.18 mild 6.15 -1.24 13.32 disabled 6.54 -0.88 13.75 ultra high moderate 5.51 -1.83 12.79 mild 5.62 -1.79 12.74 disabled 5.94 -1.44 13.20 7.4.3 Model: DBH RMSE (precision) Define priors # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$dbh_cm_rmse, na.rm = T) sd_y_temp = sd(ptcld_validation_data$dbh_cm_rmse, na.rm = T) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) 7.4.3.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp priors_temp &lt;- c( brms::prior(normal(mean_y_temp, sd_y_temp * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(s_r_temp$shape, s_r_temp$rate), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y_temp), class = &quot;sigma&quot;) ) # plot plt_prior4 = priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols=vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: DBH RMSE (precision)&quot; , y = &quot;&quot; ) plt_prior4 7.4.3.2 Fit the model Now fit the model. brms_dbh_rmse_mod = brms::brm( formula = dbh_cm_rmse ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_dbh_rmse_mod&quot;) ) 7.4.3.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_dbh_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_dbh_cm_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;filtering mode&quot;, y = &quot;DBH RMSE (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH RMSE (cm) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;DBH RMSE (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.17: DBH RMSE (cm)95% HDI of the posterior predictive distribution filtering mode DBH RMSE (cm)median HDI low HDI high ultra high aggressive 8.78 0.31 17.18 moderate 8.63 0.33 17.11 mild 8.60 0.08 16.84 disabled 8.72 0.08 17.01 high aggressive 9.40 0.89 17.86 moderate 9.35 0.80 17.66 mild 9.06 0.52 17.35 disabled 9.36 0.75 17.66 medium aggressive 9.76 1.31 18.27 moderate 8.79 0.18 17.01 mild 9.65 1.16 18.05 disabled 9.29 0.94 17.84 low aggressive 8.53 -0.06 16.85 moderate 8.17 -0.42 16.46 mild 8.14 -0.04 16.78 disabled 9.02 0.64 17.59 lowest aggressive 8.40 0.03 17.01 moderate 8.14 0.00 16.94 mild 8.20 -0.42 16.58 disabled 8.36 -0.26 16.71 we can also make pairwise comparisons # make the contrasts using compare_levels brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 1.7 , x_expand = c(0.9,0.75) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; , x = &quot;constrast DBH RMSE (cm)&quot; ) + theme( axis.text.x = element_text(size = 7) ) ggplot2::ggsave( &quot;../data/qlty_fltr_comp_dbh_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;median difference&lt;br&gt;DBH RMSE (cm)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.18: DBH RMSE (cm)95% HDI of the posterior predictive distribution of group contrasts quality contrast filtering mode median differenceDBH RMSE (cm) HDI low HDI high ultra high - high aggressive -0.51 -3.39 2.05 ultra high - high moderate -0.63 -3.45 1.74 ultra high - high mild -0.40 -3.12 2.06 ultra high - high disabled -0.55 -3.34 1.85 ultra high - medium aggressive -0.83 -3.99 1.65 ultra high - medium moderate -0.16 -2.80 2.61 ultra high - medium mild -0.93 -3.90 1.44 ultra high - medium disabled -0.51 -3.26 1.94 ultra high - low aggressive 0.22 -2.37 2.99 ultra high - low moderate 0.38 -2.04 3.12 ultra high - low mild 0.39 -1.97 3.15 ultra high - low disabled -0.24 -3.14 2.27 ultra high - lowest aggressive 0.31 -2.33 3.29 ultra high - lowest moderate 0.38 -2.20 3.29 ultra high - lowest mild 0.32 -2.28 3.23 ultra high - lowest disabled 0.28 -2.28 3.16 high - medium aggressive -0.28 -3.17 2.25 high - medium moderate 0.46 -2.01 3.48 high - medium mild -0.48 -3.36 2.00 high - medium disabled 0.04 -2.51 2.61 high - low aggressive 0.76 -1.78 3.73 high - low moderate 1.06 -1.34 4.06 high - low mild 0.82 -1.52 3.69 high - low disabled 0.28 -2.46 3.05 high - lowest aggressive 0.85 -1.77 4.07 high - lowest moderate 1.06 -1.38 4.36 high - lowest mild 0.75 -1.85 3.85 high - lowest disabled 0.85 -1.70 4.04 medium - low aggressive 1.08 -1.48 4.25 medium - low moderate 0.55 -1.98 3.39 medium - low mild 1.35 -1.06 4.63 medium - low disabled 0.25 -2.64 3.03 medium - lowest aggressive 1.18 -1.35 4.64 medium - lowest moderate 0.55 -2.25 3.73 medium - lowest mild 1.30 -1.24 4.59 medium - lowest disabled 0.80 -1.73 3.96 low - lowest aggressive 0.10 -2.59 2.97 low - lowest moderate 0.01 -2.79 2.74 low - lowest mild -0.04 -2.81 2.70 low - lowest disabled 0.54 -2.02 3.61 7.4.3.4 Software:Quality - interaction draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_dbh_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_dbh_cm_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;software&quot;, y = &quot;DBH RMSE (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH RMSE (cm) with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;DBH RMSE (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.19: DBH RMSE (cm)95% HDI of the posterior predictive distribution quality DBH RMSE (cm)median HDI low HDI high METASHAPE ultra high 8.11 2.11 14.28 high 8.75 2.73 14.93 medium 9.47 2.87 15.33 low 8.24 2.16 14.36 lowest 7.84 1.78 13.98 OPENDRONEMAP ultra high 7.85 1.85 14.15 high 8.38 2.48 14.83 medium 7.75 1.56 13.95 low 7.20 0.96 13.22 lowest 7.10 1.10 13.27 PIX4D ultra high 10.03 3.60 16.07 high 10.87 4.77 17.26 medium 11.07 5.04 17.59 low 9.90 3.69 16.11 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 1.8 , x_expand = c(0.33,0.2) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast DBH RMSE (cm)&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_dbh_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_qlty_sftwr_comp_dbh_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;quality contrast&quot; , facet = &quot;software&quot; , label_size = 1.5 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + labs( subtitle = &quot;&quot; # &quot;constrast Height RMSE (m)&quot; , x = &quot;DBH RMSE (cm) constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_qlty_sftwr_comp_dbh_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;median difference&lt;br&gt;DBH RMSE (cm)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.20: DBH RMSE (cm)95% HDI of the posterior predictive distribution of group contrasts quality contrast median differenceDBH RMSE (cm) HDI low HDI high METASHAPE ultra high - high -0.6 -3.3 1.7 ultra high - medium -1.2 -4.2 1.1 ultra high - low -0.1 -2.8 2.3 ultra high - lowest 0.2 -2.2 2.9 high - medium -0.6 -3.4 1.8 high - low 0.5 -2.0 3.1 high - lowest 0.8 -1.6 3.7 medium - low 1.1 -1.2 3.9 medium - lowest 1.5 -0.9 4.6 low - lowest 0.3 -2.1 3.0 OPENDRONEMAP ultra high - high -0.5 -3.1 1.9 ultra high - medium 0.1 -2.6 2.9 ultra high - low 0.6 -1.7 3.4 ultra high - lowest 0.7 -1.7 3.5 high - medium 0.5 -1.8 3.5 high - low 1.1 -1.2 3.9 high - lowest 1.2 -1.1 4.1 medium - low 0.5 -2.1 3.1 medium - lowest 0.6 -2.0 3.4 low - lowest 0.1 -2.4 2.6 PIX4D ultra high - high -0.7 -3.7 1.6 ultra high - medium -0.9 -3.9 1.5 ultra high - low 0.1 -2.4 2.8 high - medium -0.2 -2.8 2.4 high - low 0.9 -1.5 3.8 medium - low 1.1 -1.4 4.1 The contrasts above address the question “are there differences in RMSE based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in RMSE based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter1 == software, depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter2 == software, depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.9 # , x_expand = c(0.25,0.1) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; , x = &quot;constrast DBH RMSE (cm)&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) ggplot2::ggsave( &quot;../data/sftwr_qlty_comp_dbh_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_sftwr_qlty_comp_dbh_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;software contrast&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 3) + labs( subtitle = &quot;&quot; , x = &quot;DBH RMSE (cm) constrast&quot; ) + theme( legend.position = &quot;inside&quot; , legend.position.inside = c(.8, .13) , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(6.5, &quot;lines&quot;) ))) # ptchwrk_sftwr_qlty_comp_dbh_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) table_temp %&gt;% dplyr::select(-c(contrast)) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;median difference&lt;br&gt;DBH RMSE (cm)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$contrast))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.21: DBH RMSE (cm)95% HDI of the posterior predictive distribution of group contrasts quality contrast median differenceDBH RMSE (cm) HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -0.3 -2.9 2.5 high -0.4 -2.9 2.3 medium -1.6 -4.8 0.9 low -1.0 -3.6 1.5 lowest -0.7 -3.3 1.8 PIX4D - METASHAPE ultra high 1.9 -0.9 4.7 high 2.1 -0.7 5.0 medium 1.6 -1.2 4.4 low 1.7 -1.1 4.5 PIX4D - OPENDRONEMAP ultra high 2.2 -0.9 5.1 high 2.5 -0.5 5.3 medium 3.3 0.2 6.5 low 2.7 -0.2 5.6 7.4.3.5 Software:Filtering - interaction draws_temp = tidyr::crossing( depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_dbh_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) , by = dplyr::join_by(depth_maps_generation_filtering_mode, software) ) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_dbh_cm_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;software&quot;, y = &quot;DBH RMSE (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH RMSE (cm) with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;DBH RMSE (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.22: DBH RMSE (cm)95% HDI of the posterior predictive distribution filtering mode DBH RMSE (cm)median HDI low HDI high METASHAPE aggressive 8.79 2.80 14.73 moderate 8.30 2.40 14.30 mild 8.29 2.38 14.25 disabled 8.54 2.55 14.49 OPENDRONEMAP aggressive 7.79 2.00 14.00 moderate 7.58 1.61 13.64 mild 7.56 1.66 13.58 disabled 7.77 1.92 13.87 PIX4D aggressive 10.41 4.02 16.63 moderate 9.97 3.99 16.13 mild 10.37 4.31 16.40 disabled 10.59 4.60 16.78 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_filtering_mode) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; , facet = &quot;software&quot; , label_size = 1.8 , x_expand = c(0.45,0.4) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast DBH RMSE (cm)&quot; ) ggplot2::ggsave( &quot;../data/fltr_sftwr_comp_dbh_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other RMSE contrasts for publication ptchwrk_fltr_sftwr_comp_dbh_rmse = plt_contrast( brms_contrast_temp , y_axis_title = &quot;filtering mode contrast&quot; , facet = &quot;software&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + labs( subtitle = &quot;&quot; # &quot;constrast Height RMSE (m)&quot; , x = &quot;DBH RMSE (cm) constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_fltr_sftwr_comp_dbh_rmse and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 1 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;filtering contrast&quot; , &quot;median difference&lt;br&gt;DBH RMSE (cm)&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.23: DBH RMSE (cm)95% HDI of the posterior predictive distribution of group contrasts filtering contrast median differenceDBH RMSE (cm) HDI low HDI high METASHAPE disabled - mild 0.2 -1.8 2.4 disabled - moderate 0.2 -1.9 2.4 disabled - aggressive -0.2 -2.5 1.9 mild - moderate 0.0 -2.2 2.1 mild - aggressive -0.4 -2.8 1.6 moderate - aggressive -0.4 -2.7 1.7 OPENDRONEMAP disabled - mild 0.2 -1.9 2.4 disabled - moderate 0.2 -1.9 2.4 disabled - aggressive 0.0 -2.1 2.2 mild - moderate 0.0 -2.1 2.1 mild - aggressive -0.2 -2.5 1.9 moderate - aggressive -0.2 -2.4 2.0 PIX4D disabled - mild 0.2 -2.0 2.4 disabled - moderate 0.5 -1.5 3.1 mild - moderate 0.3 -1.8 2.8 7.4.3.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_dbh_rmse_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_dbh_rmse = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_dbh_cm_rmse) , labels = scales::comma_format(accuracy = 0.01) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + scale_y_continuous(limits = c(-0.02,NA)) + labs( x = &quot;filtering mode&quot;, y = &quot;DBH RMSE (cm)&quot; , subtitle = &quot;posterior predictive distribution of DBH RMSE (cm) with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_dbh_rmse ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_dbh_rmse.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;DBH RMSE (cm)&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;DBH RMSE (cm)&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 7.24: DBH RMSE (cm)95% HDI of the posterior predictive distribution software quality filtering mode DBH RMSE (cm)median HDI low HDI high METASHAPE lowest aggressive 8.01 1.87 14.02 moderate 7.62 1.60 13.74 mild 7.44 1.27 13.43 disabled 7.68 1.65 13.73 low aggressive 8.27 2.16 14.36 moderate 7.92 1.78 13.88 mild 7.71 1.75 13.83 disabled 8.82 2.85 14.96 medium aggressive 10.86 4.52 17.01 moderate 9.08 3.05 15.25 mild 9.63 3.53 15.68 disabled 9.38 3.39 15.56 high aggressive 9.05 2.87 15.01 moderate 8.76 2.68 14.86 mild 8.49 2.37 14.53 disabled 8.75 2.79 14.92 ultra high aggressive 8.22 2.25 14.38 moderate 7.91 1.93 13.92 mild 7.77 1.61 13.78 disabled 8.03 2.06 14.16 OPENDRONEMAP lowest aggressive 7.02 0.99 13.14 moderate 6.88 0.88 12.95 mild 6.81 0.85 12.95 disabled 6.99 0.87 12.93 low aggressive 7.06 0.97 13.14 moderate 6.82 0.78 12.93 mild 6.69 0.69 12.79 disabled 7.53 1.54 13.69 medium aggressive 7.94 1.89 14.20 moderate 7.16 1.03 13.20 mild 7.83 1.76 14.01 disabled 7.56 1.54 13.72 high aggressive 8.57 2.50 14.66 moderate 8.53 2.58 14.76 mild 8.12 2.17 14.27 disabled 8.82 2.75 14.96 ultra high aggressive 7.95 1.77 13.95 moderate 8.16 2.13 14.35 mild 7.74 1.32 13.59 disabled 7.66 1.56 13.75 PIX4D low moderate 9.10 2.92 15.23 mild 9.21 2.94 15.27 disabled 11.31 5.19 17.72 medium moderate 9.87 3.56 16.05 mild 12.64 6.42 19.10 disabled 11.27 5.09 17.37 high moderate 11.58 5.39 17.83 mild 10.76 4.76 16.93 disabled 10.93 4.85 17.05 ultra high moderate 9.75 3.59 15.77 mild 10.03 3.98 16.10 disabled 10.26 4.12 16.39 we can also make pairwise comparisons # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter1==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter2==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) plot it brms_contrast_temp %&gt;% plt_contrast( facet = c(&quot;depth_maps_generation_quality&quot;, &quot;software&quot;) , y_axis_title = &quot;filtering mode&quot; , label_size = 0 , x_expand = c(-0.1,-0.1) ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality and software&quot; , x = &quot;constrast DBH RMSE (cm)&quot; ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_comp_dbh_rmse.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) Export some final images for publication p1_temp = qlty_fltr_sftwr_dbh_me + labs(subtitle = &quot;A: DBH Mean Error (cm)&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) p2_temp = qlty_fltr_sftwr_dbh_rmse + labs(subtitle = &quot;B: DBH RMSE (cm)&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) # export p1_temp / p2_temp ggplot2::ggsave( filename = paste0(&quot;../data/qlty_fltr_sftwr_dbh_comb.jpeg&quot;) , plot = ggplot2::last_plot() , width = 8.5 , height = 11 , units = &quot;in&quot; , dpi = &quot;print&quot; ) patchwork of Height RMSE contrasts layout_temp = c( # area(t, l, b, r) patchwork::area(2, 1, 2, 1) , patchwork::area(2, 3, 2, 3) , patchwork::area(4, 1, 4, 3) ) # check the layout # plot(layout_temp) ############################ # patchwork for height ############################ ptchwrk_qlty_sftwr_comp_ht_rmse + labs(subtitle = &quot;A: Quality Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + ptchwrk_fltr_sftwr_comp_ht_rmse + labs(subtitle = &quot;B: Filtering Mode Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + patchwork::free( ptchwrk_sftwr_qlty_comp_ht_rmse + labs(subtitle = &quot;C: Software Contrast by Quality&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) ) + # plot_annotation(tag_levels = list(c(&#39;#&#39;, &#39;&amp;&#39;), &#39;1&#39;)) + patchwork::plot_layout( design = layout_temp , widths = c(1,0.01,1) , heights = c(0.01,1,0.01,1,0.01) ) &amp; scale_x_continuous( limits = c(-0.7,0.45) , breaks = seq(-0.8,0.4,0.2) , labels = seq(-0.8,0.4,0.2) %&gt;% scales::number(accuracy = 0.1) ) &amp; theme( axis.title.y = element_blank() , plot.subtitle = element_text(face = &quot;bold&quot;, hjust = 0.0) # , plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3) ) ggplot2::ggsave( filename = paste0(&quot;../data/all_ht_rmse_contrasts.jpeg&quot;) , plot = ggplot2::last_plot() , width = 11 , height = 8.5 , units = &quot;in&quot; , dpi = &quot;print&quot; ) patchwork of DBH RMSE contrasts layout_temp = c( # area(t, l, b, r) patchwork::area(2, 1, 2, 1) , patchwork::area(2, 3, 2, 3) , patchwork::area(4, 1, 4, 3) ) # check the layout # plot(layout_temp) ############################ # patchwork for height ############################ ptchwrk_qlty_sftwr_comp_dbh_rmse + labs(subtitle = &quot;A: Quality Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + ptchwrk_fltr_sftwr_comp_dbh_rmse + labs(subtitle = &quot;B: Filtering Mode Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + patchwork::free( ptchwrk_sftwr_qlty_comp_dbh_rmse + labs(subtitle = &quot;C: Software Contrast by Quality&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) ) + # plot_annotation(tag_levels = list(c(&#39;#&#39;, &#39;&amp;&#39;), &#39;1&#39;)) + patchwork::plot_layout( design = layout_temp , widths = c(1,0.01,1) , heights = c(0.01,1,0.01,1,0.01) ) &amp; scale_x_continuous( limits = c(-9.0,9.0) , breaks = seq(-8,8,4) , labels = seq(-8,8,4) %&gt;% scales::number(accuracy = 1) ) &amp; theme( axis.title.y = element_blank() , plot.subtitle = element_text(face = &quot;bold&quot;, hjust = 0.0) # , plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3) ) ggplot2::ggsave( filename = paste0(&quot;../data/all_dbh_rmse_contrasts.jpeg&quot;) , plot = ggplot2::last_plot() , width = 11 , height = 8.5 , units = &quot;in&quot; , dpi = &quot;print&quot; ) 7.5 Posterior Predictive Checks Markov chain Monte Carlo (MCMC) simulations were conducted using the brms package (Bürkner 2017) to estimate posterior predictive distributions of the parameters of interest. We ran three chains of 100,000 iterations with the first 50,000 discarded as burn-in. Trace-plots were utilized to visually assess model convergence and sufficient convergence was checked with \\(\\hat{R}\\) values near 1 (Brooks &amp; Gelman, 1998). Posterior predictive checks were used to evaluate model goodness-of-fit by comparing data simulated from the model with the observed data used to estimate the model parameters (Hobbs &amp; Hooten, 2015). Calculating the proportion of MCMC iterations in which the test statistic (i.e., mean and sum of squares) from the simulated data and observed data are more extreme than one another provides the Bayesian P-value. Lack of fit is indicated by a value close to 0 or 1 while a value of 0.5 indicates perfect fit (Hobbs &amp; Hooten, 2015). To learn more about this approach to posterior predictive checks, check out Gabry’s (2022) vignette, Graphical posterior predictive checks using the bayesplot package. 7.5.1 Prior Distriubutions plt_prior1+plt_prior2+plt_prior3+plt_prior4 &amp; theme(strip.text = element_text(size = 6)) 7.5.2 Trace-plots check the trace plots for problems with convergence of the Markov chains 7.5.2.1 Height Mean Error # height mean error plot(brms_ht_me_mod) 7.5.2.2 Height RMSE # height rmse plot(brms_ht_rmse_mod) 7.5.2.3 DBH Mean Error # dbh me plot(brms_dbh_me_mod) 7.5.2.4 DBH RMSE # dbh rmse plot(brms_dbh_rmse_mod) 7.5.3 \\(\\hat{R}\\) values plt_rhat_temp &lt;- function(my_mod) { my_mod %&gt;% brms::rhat() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = &quot;parameter&quot;) %&gt;% dplyr::rename_with(tolower) %&gt;% dplyr::rename(rhat = 2) %&gt;% dplyr::filter( stringr::str_starts(parameter, &quot;b_&quot;) | stringr::str_starts(parameter, &quot;r_&quot;) | stringr::str_starts(parameter, &quot;sd_&quot;) | parameter == &quot;phi&quot; | parameter == &quot;sigma&quot; ) %&gt;% dplyr::mutate( parameter = parameter %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_quality&quot;, &quot;quality&quot;) %&gt;% stringr::str_replace_all(&quot;depth_maps_generation_filtering_mode&quot;, &quot;filtering&quot;) , chk = (rhat &lt;= 1*0.998 | rhat &gt;= 1*1.002) ) %&gt;% ggplot(aes(x = rhat, y = parameter, color = chk, fill = chk)) + geom_vline(xintercept = 1, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1.2) + geom_vline(xintercept = 1*0.998, lwd = 1.5) + geom_vline(xintercept = 1*1.002, lwd = 1.5) + geom_vline(xintercept = 1*0.999, lwd = 1.2, color = &quot;gray33&quot;) + geom_vline(xintercept = 1*1.001, lwd = 1.2, color = &quot;gray33&quot;) + geom_point() + scale_fill_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_color_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_y_discrete(NULL, breaks = NULL) + labs( x = latex2exp::TeX(&quot;$\\\\hat{R}$&quot;) , subtitle = latex2exp::TeX(&quot;MCMC chain convergence check for $\\\\hat{R}$ values&quot;) ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 3) , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , plot.title = element_text(size = 9) , plot.subtitle = element_text(size = 8) , axis.title.y = element_blank() , axis.title.x = element_text(size = 9) , panel.grid = element_blank() , axis.text.x = element_text(size = 6.5) ) } # plot together with patchwork # height mean error brms_ht_me_mod %&gt;% plt_rhat_temp() + labs(title = &quot;Height Mean Error (bias)&quot;) + # height rmse brms_ht_rmse_mod %&gt;% plt_rhat_temp() + labs(title = &quot;Height RMSE (precision)&quot;) + # dbh me brms_dbh_me_mod %&gt;% plt_rhat_temp() + labs(title = &quot;DBH Mean Error (bias)&quot;) + # dbh rmse brms_dbh_rmse_mod %&gt;% plt_rhat_temp() + labs(title = &quot;DBH RMSE (precision)&quot;) &amp; theme(plot.subtitle = element_blank()) 7.5.4 ESS values The effective length of an MCMC chain is indicated by the effective sample size (ESS), which refers to the sample size of the MCMC chain not to the sample size of the data Kruschke (2015) notes: One simple guideline is this: For reasonably accurate and stable estimates of the limits of the 95% HDI, an ESS of 10,000 is recommended. This is merely a heuristic based on experience with practical applications, it is not a requirement. If accuracy of the HDI limits is not crucial for your application, then a smaller ESS may be sufficient. (p.184) plt_ess_temp &lt;- function(my_mod) { # get ess values from model summary dplyr::bind_rows( summary(my_mod) %&gt;% purrr::pluck(&quot;random&quot;) %&gt;% purrr::flatten() %&gt;% purrr::keep_at(~ .x == &quot;Bulk_ESS&quot;) %&gt;% unlist() %&gt;% dplyr::as_tibble() , summary(my_mod) %&gt;% purrr::pluck(&quot;fixed&quot;) %&gt;% purrr::flatten() %&gt;% purrr::keep_at(~ .x == &quot;Bulk_ESS&quot;) %&gt;% unlist() %&gt;% dplyr::as_tibble() ) %&gt;% dplyr::rename(ess = 1) %&gt;% dplyr::mutate(parameter = dplyr::row_number(), chk = ess&lt;10000) %&gt;% ggplot(aes(x = ess, y = parameter, color = chk, fill = chk)) + geom_vline(xintercept = 10000, linetype = &quot;dashed&quot;, color = &quot;gray44&quot;, lwd = 1.2) + geom_segment( aes(x = 0, xend=ess, yend=parameter), color=&quot;black&quot;) + geom_point() + scale_fill_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_color_manual(values = c(&quot;navy&quot;, &quot;firebrick&quot;)) + scale_y_continuous(NULL, breaks = NULL) + scale_x_continuous(labels = scales::comma) + labs( x = &quot;ESS&quot; , subtitle = &quot;MCMC chain resolution check for effective sample size (ESS) values&quot; , y = &quot;&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 4) , panel.grid.major.x = element_blank() , panel.grid.minor.x = element_blank() , plot.title = element_text(size = 9) , plot.subtitle = element_text(size = 8) , axis.title.y = element_blank() , axis.title.x = element_text(size = 9) , axis.text.x = element_text(size = 6.5) ) } # plot together with patchwork # height mean error brms_ht_me_mod %&gt;% plt_ess_temp() + labs(title = &quot;Height Mean Error (bias)&quot;) + # height rmse brms_ht_rmse_mod %&gt;% plt_ess_temp() + labs(title = &quot;Height RMSE (precision)&quot;) + # dbh me brms_dbh_me_mod %&gt;% plt_ess_temp() + labs(title = &quot;DBH Mean Error (bias)&quot;) + # dbh rmse brms_dbh_rmse_mod %&gt;% plt_ess_temp() + labs(title = &quot;DBH RMSE (precision)&quot;) &amp; theme(plot.subtitle = element_blank()) 7.5.5 Mean and SD posterior predictive check for the overall model combining mean and sd plt_pp_temp &lt;- function(my_mod) { my_mod %&gt;% brms::pp_check(type = &quot;stat_2d&quot;, ndraws = 5000) + theme_light() + theme( legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot; , legend.text = element_text(size = 8) , plot.title = element_text(size = 9) ) } # plot together with patchwork # height mean error brms_ht_me_mod %&gt;% plt_pp_temp() + labs(title = &quot;Height Mean Error (bias)&quot;) + # height rmse brms_ht_rmse_mod %&gt;% plt_pp_temp() + labs(title = &quot;Height RMSE (precision)&quot;) + # dbh me brms_dbh_me_mod %&gt;% plt_pp_temp() + labs(title = &quot;DBH Mean Error (bias)&quot;) + # dbh rmse brms_dbh_rmse_mod %&gt;% plt_pp_temp() + labs(title = &quot;DBH RMSE (precision)&quot;) 7.5.5.1 Bayesian p-value The Bayesian p-value is the probability that a test statistic in the reference distribution exceeds its value in the data. The Bayesian p-value is calculated from the posterior predictive distribution of the new data and the distribution of the observed data. We estimate the probability that the test statistic calculated from “new” data arising from our model (\\(y_{new}\\)) is more extreme than the test statistic calculated from the observed data (\\(y\\)): \\(\\text{P-value}(y) = Pr(T(y_{new}) &gt; T(y))\\) where the test statistic \\(T(y)\\) describes the distribution of the data as a summary of the data; it could be the mean, variance, the coefﬁcient of variation, the kurtosis, the maximum, or the minimum of the observed data set, or it might be an “omnibus” statistic like a squared discrepancy or a chi-square value Hobbs and Hooten (2015, p. 188) Bayesian P values for mean and standard deviation test statistics The P values for the mean (P mean) give the probability that the mean of the data of new, out-of-sample observations simulated from the model exceeds the mean of the observed data. The P values for the standard deviation (P SD) give the probability that the standard deviation of new, out-of-sample observations simulated from the model exceeds the standard deviation of the observed data. Large (\\(\\gtrapprox 0.90\\)) or small (\\(\\lessapprox 0.10\\)) values indicate lack of fit. Hobbs and Hooten (2015);Hobbs et al. (2024, Appendix S2 p. 8) Check the Bayesian p-values between the models # get the model p-values dplyr::bind_rows( get_mod_p_val(brms_ht_me_mod, my_var = &quot;tree_height_m_me&quot;, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_ht_me_mod&quot;) , get_mod_p_val(brms_ht_rmse_mod, my_var = &quot;tree_height_m_rmse&quot;, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_ht_rmse_mod&quot;) , get_mod_p_val(brms_dbh_me_mod, my_var = &quot;dbh_cm_me&quot;, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_dbh_me_mod&quot;) , get_mod_p_val(brms_dbh_rmse_mod, my_var = &quot;dbh_cm_rmse&quot;, ndraws = 5000) %&gt;% dplyr::mutate(model = &quot;brms_dbh_rmse_mod&quot;) ) %&gt;% dplyr::relocate(model) %&gt;% kableExtra::kbl(digits = 2) %&gt;% kableExtra::kable_styling() model P.mean P.sd brms_ht_me_mod 0.51 0.59 brms_ht_rmse_mod 0.50 0.62 brms_dbh_me_mod 0.50 0.61 brms_dbh_rmse_mod 0.50 0.66 "],["stand_ba.html", "Section 8 Statistical Analysis: Stand Basal Area 8.1 Setup 8.2 BA Percent Error 8.3 BA Absolute Percent Error", " Section 8 Statistical Analysis: Stand Basal Area In this section, we’ll evaluate the influence of the processing parameters on UAS-determined stand basal area. The accuracy UAS-derived stand basal area is impacted by the detection of individual trees (modeled in this section) and the estimated DBH of those detected trees (modeled in this section). Even though there are concerns with the under-detection of smaller trees in the understory (Tinkham &amp; Swayze 2021), the use of tree lists derived from remote sensing data (i.e. UAS SfM and Lidar) can still be useful for monitoring aspects of ecosystem function that are driven by large trees (Jeronimo et al. 2018). Jeronimo et al. 2018 summarize this idea: Large trees dominate basal area and biomass (Lutz et al. 2012; Bastin et al. 2015), carbon accumulation and growth (Sillett et al. 2010; Stephenson et al. 2014), and stand spatial heterogeneity (Lutz et al. 2013), and they provide unique structures that are keystone elements of many vertebrate species’ habitat requirements (Tews et al. 2004; North et al. 2017). Analysis of ITD results can capture the majority of variation in these processes even while omitting many smaller trees. For example, several studies have predicted biomass and volume directly from ITD results using allometric equations, explaining 67–93 percent of variation in even-aged pine plantations (Bortolot and Wynne 2005; Popescu 2007) and achieving error rates less than about 30 percent for Douglas-fir forests in various successional stages (Edson and Wing 2011). (p. 341) We will utilize our “full” model presented here 8.1 Setup load the data if needed # load data if needed if(ls()[ls() %in% &quot;ptcld_validation_data&quot;] %&gt;% length()==0){ ptcld_validation_data = readr::read_csv(&quot;../data/ptcld_full_analysis_data.csv&quot;) %&gt;% dplyr::mutate( depth_maps_generation_quality = factor( depth_maps_generation_quality %&gt;% tolower() %&gt;% stringr::str_replace_all(&quot;ultrahigh&quot;, &quot;ultra high&quot;) , ordered = TRUE , levels = c( &quot;lowest&quot; , &quot;low&quot; , &quot;medium&quot; , &quot;high&quot; , &quot;ultra high&quot; ) ) %&gt;% forcats::fct_rev() , depth_maps_generation_filtering_mode = factor( depth_maps_generation_filtering_mode %&gt;% tolower() , ordered = TRUE , levels = c( &quot;disabled&quot; , &quot;mild&quot; , &quot;moderate&quot; , &quot;aggressive&quot; ) ) %&gt;% forcats::fct_rev() ) } load our plotting functions if needed (not showing these functions here but see the prior section for function definitions) 8.2 BA Percent Error 8.2.1 Summary Statistics # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( basal_area_pct_error = mean(basal_area_pct_error, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_basal_area_pct_error = ceiling(10*max(abs(range(dta_temp$basal_area_pct_error, na.rm = T))))/10 # scales::show_col(scales::pal_dichromat(&quot;BluetoOrange.10&quot;)(10)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = basal_area_pct_error , label = paste0(scales::percent(basal_area_pct_error,accuracy = 0.1), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_basal_area_pct_error,lmt_basal_area_pct_error) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;Basal Area % Error&quot; , title = &quot;mean basal area percent error and # of study sites&quot; , subtitle = paste( &quot;negative values = UAS basal area &lt; field basal area&quot; , &quot; || &quot; , &quot;positive values = UAS basal area &gt; field basal area&quot; ) ) + theme_light() + theme( # legend.position = &quot;none&quot; axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 8.2.2 Model: BA Percent Error # from Kurz: gamma_a_b_from_omega_sigma = function(mode, sd) { if (mode &lt;= 0) stop(&quot;mode must be &gt; 0&quot;) if (sd &lt;= 0) stop(&quot;sd must be &gt; 0&quot;) rate = (mode + sqrt(mode^2 + 4 * sd^2)) / (2 * sd^2) shape = 1 + mode * rate return(list(shape = shape, rate = rate)) } mean_y_temp = mean(ptcld_validation_data$basal_area_pct_error, na.rm = T) sd_y_temp = sd(ptcld_validation_data$basal_area_pct_error, na.rm = T) omega_temp = sd_y_temp / 2 sigma_temp = 2 * sd_y_temp s_r_temp = gamma_a_b_from_omega_sigma(mode = omega_temp, sd = sigma_temp) stanvars_temp = brms::stanvar(mean_y_temp, name = &quot;mean_y&quot;) + brms::stanvar(sd_y_temp, name = &quot;sd_y&quot;) + brms::stanvar(s_r_temp$shape, name = &quot;alpha&quot;) + brms::stanvar(s_r_temp$rate, name = &quot;beta&quot;) 8.2.2.1 Prior distributions #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp priors_temp &lt;- c( brms::prior(normal(mean_y_temp, sd_y_temp * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(s_r_temp$shape, s_r_temp$rate), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y_temp), class = &quot;sigma&quot;) ) # plot plt_prior11 = priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols = vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: Basal Area Percent Error&quot; , y = &quot;&quot; ) plt_prior11 8.2.2.2 Fit the model Now fit the model. brms_ba_pe_mod = brms::brm( formula = basal_area_pct_error ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(family = &quot;gaussian&quot;) , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , prior = c( brms::prior(normal(mean_y, sd_y * 5), class = &quot;Intercept&quot;) , brms::prior(gamma(alpha, beta), class = &quot;sd&quot;) , brms::prior(cauchy(0, sd_y), class = &quot;sigma&quot;) ) , stanvars = stanvars_temp , file = paste0(rootdir, &quot;/fits/brms_ba_pe_mod&quot;) ) 8.2.2.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_ba_pe_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = 0.95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_basal_area_pct_error*.5,lmt_basal_area_pct_error*.5) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-lmt_basal_area_pct_error,lmt_basal_area_pct_error) ) + labs( x = &quot;filtering mode&quot;, y = &quot;Basal Area % Error&quot; , subtitle = &quot;posterior predictive distribution of basal area percent error with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Basal Area % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Basal Area % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.1: Basal Area % Error95% HDI of the posterior predictive distribution filtering mode Basal Area % Errormedian HDI low HDI high ultra high aggressive -4.0% -83.6% 77.8% moderate -0.5% -80.1% 79.7% mild 1.2% -79.9% 80.6% disabled -1.1% -80.1% 79.1% high aggressive 0.2% -78.4% 82.1% moderate 8.0% -74.1% 85.8% mild 3.9% -76.1% 84.4% disabled 4.9% -74.7% 85.3% medium aggressive -0.2% -80.8% 80.1% moderate 1.4% -76.3% 83.4% mild 12.2% -67.9% 93.2% disabled 3.5% -72.2% 87.9% low aggressive -18.4% -101.9% 58.8% moderate -13.4% -92.5% 67.2% mild -9.7% -90.0% 69.3% disabled -5.8% -86.3% 74.0% lowest aggressive -27.7% -113.1% 52.3% moderate -24.1% -105.4% 59.2% mild -20.0% -102.7% 61.9% disabled -21.0% -105.7% 59.1% 8.2.2.4 Software:Quality - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) %&gt;% tidybayes::add_epred_draws( brms_ba_pe_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_basal_area_pct_error*.5,lmt_basal_area_pct_error*.5) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-lmt_basal_area_pct_error,lmt_basal_area_pct_error) ) + labs( x = &quot;software&quot;, y = &quot;Basal Area % Error&quot; , subtitle = &quot;posterior predictive distribution of basal area percent error with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Basal Area % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;Basal Area % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.2: Basal Area % Error95% HDI of the posterior predictive distribution quality Basal Area % Errormedian HDI low HDI high METASHAPE ultra high -4.3% -56.8% 48.6% high 6.1% -46.6% 58.6% medium 15.5% -37.8% 68.2% low -16.3% -67.9% 37.8% lowest -43.4% -96.4% 10.3% OPENDRONEMAP ultra high -0.6% -54.0% 52.2% high -7.9% -60.5% 44.5% medium -25.6% -78.9% 28.3% low -30.4% -82.8% 22.3% lowest -34.1% -88.0% 18.7% PIX4D ultra high 6.9% -49.1% 60.2% high 24.7% -29.7% 78.8% medium 32.8% -21.7% 87.3% low 5.2% -49.2% 59.1% 8.2.2.5 Software:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) %&gt;% tidybayes::add_epred_draws( brms_ba_pe_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_basal_area_pct_error*.5,lmt_basal_area_pct_error*.5) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + scale_y_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-lmt_basal_area_pct_error,lmt_basal_area_pct_error) ) + labs( x = &quot;software&quot;, y = &quot;Basal Area % Error&quot; , subtitle = &quot;posterior predictive distribution of basal area percent error with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Basal Area % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;Basal Area % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.3: Basal Area % Error95% HDI of the posterior predictive distribution filtering mode Basal Area % Errormedian HDI low HDI high METASHAPE aggressive -16.1% -72.8% 38.7% moderate -8.8% -64.0% 46.4% mild -4.2% -60.6% 50.0% disabled -3.4% -58.8% 52.4% OPENDRONEMAP aggressive -19.8% -75.5% 36.8% moderate -18.1% -72.9% 38.3% mild -17.3% -72.6% 38.9% disabled -17.6% -73.3% 38.9% PIX4D moderate 10.9% -47.5% 66.9% mild 15.8% -41.0% 73.3% disabled 10.2% -47.3% 66.8% 8.2.2.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ba_pe_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_ba_pe = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 7 , colors = scales::pal_div_gradient()(seq(0, 1, length.out = 7)) , limits = c(-lmt_basal_area_pct_error*.5,lmt_basal_area_pct_error*.5) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + scale_y_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-lmt_basal_area_pct_error*1.2,lmt_basal_area_pct_error*1.2) ) + labs( x = &quot;filtering mode&quot;, y = &quot;Basal Area % Error&quot; , subtitle = &quot;posterior predictive distribution of basal area percent error with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_ba_pe ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_ba_pe.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;Basal Area % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;Basal Area % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.4: Basal Area % Error95% HDI of the posterior predictive distribution software quality filtering mode Basal Area % Errormedian HDI low HDI high METASHAPE lowest aggressive -57.9% -110.0% -7.3% moderate -49.5% -100.5% 1.2% mild -39.9% -90.3% 11.2% disabled -38.9% -89.5% 12.2% low aggressive -33.9% -85.3% 18.8% moderate -19.1% -70.2% 31.5% mild -11.3% -62.2% 38.9% disabled -3.2% -55.5% 46.3% medium aggressive 8.1% -43.7% 59.3% moderate 15.3% -35.3% 65.6% mild 25.6% -26.4% 77.0% disabled 21.4% -30.3% 72.2% high aggressive -1.7% -53.1% 49.1% moderate 10.0% -41.8% 59.6% mild 9.1% -40.9% 60.2% disabled 11.8% -39.1% 62.4% ultra high aggressive -11.3% -62.2% 39.8% moderate -4.1% -55.8% 46.3% mild -0.8% -51.3% 49.7% disabled -0.5% -51.6% 50.3% OPENDRONEMAP lowest aggressive -36.7% -87.4% 15.5% moderate -35.3% -86.6% 16.4% mild -34.8% -87.9% 14.8% disabled -34.2% -85.9% 16.2% low aggressive -35.3% -86.9% 14.9% moderate -33.2% -83.9% 18.0% mild -31.9% -82.9% 18.6% disabled -28.1% -78.3% 23.7% medium aggressive -29.1% -81.1% 21.5% moderate -29.5% -81.0% 21.4% mild -23.2% -74.3% 28.8% disabled -29.0% -79.5% 22.2% high aggressive -9.3% -60.2% 41.4% moderate -6.4% -57.3% 44.7% mild -10.7% -61.0% 40.0% disabled -5.8% -56.6% 43.7% ultra high aggressive 0.9% -50.0% 53.2% moderate 3.2% -47.8% 53.3% mild 0.6% -49.8% 52.0% disabled -2.7% -53.6% 47.7% PIX4D low moderate 0.4% -51.6% 51.3% mild 7.7% -42.6% 59.4% disabled 16.1% -35.7% 68.2% medium moderate 25.5% -28.2% 76.1% mild 60.7% 6.8% 116.2% disabled 26.6% -25.9% 78.4% high moderate 42.5% -10.3% 96.7% mild 22.1% -31.3% 73.0% disabled 19.8% -31.8% 71.5% ultra high moderate 7.1% -44.2% 58.5% mild 10.9% -40.7% 62.9% disabled 4.4% -47.2% 55.4% 8.3 BA Absolute Percent Error 8.3.1 Summary Statistics # summarize data dta_temp = ptcld_validation_data %&gt;% dplyr::group_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% # collapse across study site dplyr::summarise( basal_area_abs_pct_error = mean(basal_area_abs_pct_error, na.rm = T) , n = dplyr::n() ) # set limits for color scale lmt_basal_area_abs_pct_error = ceiling(1.02*10*max(abs(range(dta_temp$basal_area_abs_pct_error, na.rm = T))))/10 # scales::show_col(viridis::mako(n = 10, begin = 0.2, end = 0.9, direction = -1)) # scales::show_col(scales::pal_div_gradient()(seq(0, 1, length.out = 7))) # plot it dta_temp %&gt;% ggplot(mapping = aes( y = depth_maps_generation_quality , x = depth_maps_generation_filtering_mode , fill = basal_area_abs_pct_error , label = paste0(scales::percent(basal_area_abs_pct_error,accuracy = 0.1), &quot;\\n(n=&quot;, n,&quot;)&quot;) )) + geom_tile(color = &quot;white&quot;) + geom_text(color = &quot;white&quot;, size = 3) + facet_grid(cols = vars(software)) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_basal_area_abs_pct_error) , labels = scales::percent_format(accuracy = 1) , show.limits = T ) + labs( x = &quot;filtering mode&quot; , y = &quot;quality&quot; , fill = &quot;Basal Area Abs. % Error&quot; , title = &quot;mean basal area absolute percent error and # of study sites&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , panel.background = element_blank() , panel.grid = element_blank() # , plot.title = element_text(hjust = 0.5) # , plot.subtitle = element_text(hjust = 0.5) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) 8.3.2 Model: BA Absolute Percent Error We’ll model the BA APE using the gamma likelihood to accurately represent the dependent variable which is continuous and strictly positive (i.e. it is impossible to have a negative APE). The gamma distribution is a great alternative that accounts for data with a zero lower limit and any right skew. We borrow here from the excellent series on causal inference by A. Solomon Kurz 8.3.2.1 Prior distributions First, let’s set the priors # desired priors m_temp &lt;- mean(ptcld_validation_data$basal_area_abs_pct_error) # desired mean s_temp &lt;- sd(ptcld_validation_data$basal_area_abs_pct_error)*5 # desired SD # use the equations mu_temp &lt;- log(m_temp / sqrt(s_temp^2 / m_temp^2 + 1)) sigma_temp &lt;- sqrt(log(s_temp^2 / m_temp^2 + 1)) # what are the lognormal parameter values? # mu_temp # sigma_temp # exp(mu_temp) stanvars_temp = brms::stanvar(mu_temp, name = &quot;mu_temp&quot;) + brms::stanvar(sigma_temp, name = &quot;sigma_temp&quot;) #### setting priors # required libraries: tidyverse, tidybayes, brms, palettetown, latex2exp brms_ba_ape_mod_gamma_priors_temp &lt;- c( brms::prior(normal(mu_temp, sigma_temp), class = &quot;Intercept&quot;) , brms::prior(student_t(3, 0, 2.5), class = &quot;sd&quot;) , brms::prior(gamma(0.1, 0.1), class = shape) ) plot the priors # plot plt_prior12 = brms_ba_ape_mod_gamma_priors_temp %&gt;% tidybayes::parse_dist() %&gt;% tidybayes::marginalize_lkjcorr(K = 2) %&gt;% tidyr::separate( .args , sep = &quot;,&quot; , into = c(&quot;a&quot;,&quot;b&quot;) , remove = F ) %&gt;% dplyr::mutate( distrib = paste0( class, &quot; ~ &quot; , .dist , &quot;(&quot; , a %&gt;% readr::parse_number() %&gt;% round(2) , &quot;,&quot; , b %&gt;% readr::parse_number() %&gt;% round(2) , &quot;)&quot; ) ) %&gt;% ggplot(., aes(dist = .dist, args = .args)) + facet_grid(cols = vars(distrib), scales = &quot;free&quot;) + ggdist::stat_halfeye( aes(fill = prior), n = 10e2, show.legend = F , fill = &quot;slategray&quot; ) + coord_flip() + theme_light() + theme( strip.text = element_text(face = &quot;bold&quot;, color = &quot;black&quot;), axis.text.y = element_blank(), axis.ticks = element_blank() , axis.text = element_text(size = 6) )+ labs( x = &quot;&quot; , title = &quot;Priors: Basal Area Absolute Percent Error&quot; , y = &quot;&quot; ) plt_prior12 8.3.2.2 Fit the model Now fit the model. #### Fit the model brms_ba_ape_mod = brms::brm( formula = basal_area_abs_pct_error ~ # baseline 1 + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | study_site) + # only fitting main effects of site and not interactions # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) , data = ptcld_validation_data , family = brms::brmsfamily(&quot;Gamma&quot;, link = &quot;log&quot;) # priors , prior = brms_ba_ape_mod_gamma_priors_temp , stanvars = stanvars_temp # mcmc , iter = 20000, warmup = 10000, chains = 4 , control = list(adapt_delta = 0.999, max_treedepth = 13) , cores = round(parallel::detectCores()/2) , file = paste0(rootdir, &quot;/fits/brms_ba_ape_mod&quot;) ) 8.3.2.3 Quality:Filtering - interaction draws_temp = ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% tidybayes::add_epred_draws( brms_ba_ape_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_basal_area_abs_pct_error*.6) , labels = scales::percent_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous( limits = c(-0.005,lmt_basal_area_abs_pct_error*.7) , labels = scales::percent_format(accuracy = 1) ) + labs( x = &quot;filtering mode&quot;, y = &quot;BA Abs. % Error&quot; , subtitle = &quot;posterior predictive distribution of BA Abs. % Error with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(depth_maps_generation_quality,depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(depth_maps_generation_quality)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;BA Abs. % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$depth_maps_generation_quality))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.5: BA Abs. % Error95% HDI of the posterior predictive distribution filtering mode BA Abs. % Errormedian HDI low HDI high ultra high aggressive 21.7% 4.2% 44.5% moderate 21.7% 4.9% 44.4% mild 22.3% 4.6% 45.2% disabled 19.5% 4.3% 40.0% high aggressive 24.0% 5.7% 50.1% moderate 30.6% 7.4% 62.2% mild 25.9% 6.6% 52.2% disabled 25.4% 6.4% 51.0% medium aggressive 35.8% 7.0% 72.4% moderate 29.8% 7.7% 60.7% mild 36.9% 9.7% 75.7% disabled 28.6% 6.8% 57.1% low aggressive 35.8% 8.0% 73.3% moderate 31.5% 7.0% 62.2% mild 29.3% 6.5% 57.5% disabled 31.5% 7.2% 62.3% lowest aggressive 42.1% 9.9% 88.6% moderate 40.7% 8.8% 83.9% mild 38.2% 8.3% 79.2% disabled 35.8% 8.7% 74.7% we can also make pairwise comparisons # first we need to define the contrasts to make contrast_list = tidyr::crossing( x1 = unique(ptcld_validation_data$depth_maps_generation_quality) , x2 = unique(ptcld_validation_data$depth_maps_generation_quality) ) %&gt;% dplyr::mutate( dplyr::across( dplyr::everything() , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) ) %&gt;% dplyr::filter(x1&lt;x2) %&gt;% dplyr::arrange(x1,x2) %&gt;% dplyr::mutate(dplyr::across(dplyr::everything(), as.character)) %&gt;% purrr::transpose() # make the contrasts using compare_levels brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list # tidybayes::emmeans_comparison(&quot;revpairwise&quot;) #&quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) , depth_maps_generation_filtering_mode = depth_maps_generation_filtering_mode %&gt;% factor( levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) , ordered = T ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast,depth_maps_generation_filtering_mode) %&gt;% make_contrast_vars() # what? brms_contrast_temp %&gt;% dplyr::glimpse() ## Rows: 1,600,000 ## Columns: 17 ## Groups: contrast, depth_maps_generation_filtering_mode [40] ## $ depth_maps_generation_filtering_mode &lt;ord&gt; aggressive, aggressive, aggressiv… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .draw &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11… ## $ sorter1 &lt;ord&gt; ultra high, ultra high, ultra hig… ## $ sorter2 &lt;ord&gt; high, high, high, high, high, hig… ## $ contrast &lt;fct&gt; ultra high - high, ultra high - h… ## $ value &lt;dbl&gt; -0.064121998, -0.058109398, -0.05… ## $ median_hdi_est &lt;dbl&gt; -0.02165344, -0.02165344, -0.0216… ## $ median_hdi_lower &lt;dbl&gt; -0.1976188, -0.1976188, -0.197618… ## $ median_hdi_upper &lt;dbl&gt; 0.1375925, 0.1375925, 0.1375925, … ## $ is_gt_zero &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, FALSE, F… ## $ pct_gt_zero &lt;dbl&gt; 0.64215, 0.64215, 0.64215, 0.6421… ## $ pct_gt_zero_lab &lt;chr&gt; &quot;Pr(high&gt;ultra high)=64%&quot;, &quot;Pr(hi… ## $ pct_gt_zero_lab_sm &lt;chr&gt; &quot;Pr(&lt;0)=64%&quot;, &quot;Pr(&lt;0)=64%&quot;, &quot;Pr(&lt;… ## $ pct_gt_zero_lab_pos &lt;dbl&gt; -0.2124402, -0.2124402, -0.212440… ## $ sig_level &lt;ord&gt; &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80%, &lt;80… plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;depth_maps_generation_filtering_mode&quot; , label_size = 1.6 ) + scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-1.65,1.25) # , expand = expansion(mult = c(-0.2,-0.1)) , breaks = seq(-1,1,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby filtering mode&quot; , x = &quot;constrast BA Abs. % Error&quot; ) + theme( axis.text.x = element_text(size = 7) ) ggplot2::ggsave( &quot;../data/qlty_fltr_comp_ba_ape.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) and summarize these contrasts brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_filtering_mode) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_filtering_mode) %&gt;% dplyr::select(contrast, depth_maps_generation_filtering_mode, value, .lower, .upper) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;filtering mode&quot; , &quot;median difference&lt;br&gt;BA Abs. % Error&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.6: BA Abs. % Error95% HDI of the posterior predictive distribution of group contrasts quality contrast filtering mode median differenceBA Abs. % Error HDI low HDI high ultra high - high aggressive -2.2% -19.8% 13.8% ultra high - high moderate -8.0% -29.9% 6.9% ultra high - high mild -3.2% -19.9% 11.7% ultra high - high disabled -5.2% -22.3% 7.1% ultra high - medium aggressive -13.1% -40.7% 5.7% ultra high - medium moderate -7.5% -28.5% 9.7% ultra high - medium mild -13.6% -40.2% 4.8% ultra high - medium disabled -8.4% -28.4% 6.4% ultra high - low aggressive -13.2% -41.1% 4.9% ultra high - low moderate -9.0% -30.8% 7.5% ultra high - low mild -6.4% -26.9% 11.0% ultra high - low disabled -11.2% -33.8% 4.1% ultra high - lowest aggressive -19.5% -55.0% 4.6% ultra high - lowest moderate -18.1% -51.8% 5.0% ultra high - lowest mild -15.2% -46.8% 7.2% ultra high - lowest disabled -15.5% -44.9% 4.8% high - medium aggressive -10.5% -39.5% 8.1% high - medium moderate 0.4% -20.7% 24.1% high - medium mild -9.9% -36.9% 8.2% high - medium disabled -2.9% -21.8% 13.8% high - low aggressive -10.5% -39.8% 8.1% high - low moderate -0.9% -22.2% 20.5% high - low mild -2.9% -21.6% 13.8% high - low disabled -5.5% -26.5% 10.8% high - lowest aggressive -16.9% -53.4% 4.5% high - lowest moderate -9.2% -40.8% 15.0% high - lowest mild -11.5% -41.9% 8.4% high - lowest disabled -9.7% -37.9% 9.6% medium - low aggressive 0.0% -24.7% 24.2% medium - low moderate -1.3% -21.3% 17.8% medium - low mild 6.5% -13.1% 34.4% medium - low disabled -2.3% -24.5% 15.3% medium - lowest aggressive -5.5% -38.3% 19.1% medium - lowest moderate -9.6% -42.1% 10.8% medium - lowest mild -1.4% -30.5% -30.0% medium - lowest mild -1.4% -29.2% 26.5% medium - lowest disabled -6.4% -33.9% 12.4% low - lowest aggressive -5.4% -38.2% -36.8% low - lowest aggressive -5.4% -35.7% 20.1% low - lowest moderate -8.2% -40.1% 12.5% low - lowest mild -8.2% -37.3% 11.7% low - lowest disabled -3.9% -30.1% 17.8% low - lowest disabled -3.9% 18.0% 18.9% 8.3.2.4 Software:Quality - interaction draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ba_ape_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + (1 | software) + (1 | depth_maps_generation_quality:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_basal_area_abs_pct_error*.6) , labels = scales::percent_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_quality)) + scale_y_continuous( limits = c(-0.005,lmt_basal_area_abs_pct_error*.7) , labels = scales::percent_format(accuracy = 1) ) + labs( x = &quot;software&quot;, y = &quot;BA Abs. % Error&quot; , subtitle = &quot;posterior predictive distribution of BA Abs. % Error with 95% HDI\\nby dense cloud quality&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_quality, software) , by = dplyr::join_by(depth_maps_generation_quality, software) ) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_quality) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;quality&quot; , &quot;BA Abs. % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.7: BA Abs. % Error95% HDI of the posterior predictive distribution quality BA Abs. % Errormedian HDI low HDI high METASHAPE ultra high 24.9% 9.4% 47.8% high 27.7% 9.8% 50.4% medium 32.9% 11.8% 59.7% low 32.9% 11.7% 59.8% lowest 45.0% 16.3% 84.0% OPENDRONEMAP ultra high 18.2% 6.4% 34.5% high 23.4% 8.0% 42.7% medium 33.9% 13.0% 62.7% low 33.5% 12.3% 61.7% lowest 37.3% 14.3% 69.7% PIX4D ultra high 21.2% 7.8% 40.6% high 29.5% 10.6% 56.0% medium 33.2% 11.6% 61.4% low 31.3% 11.6% 58.2% we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_quality , comparison = contrast_list ) %&gt;% dplyr::rename(contrast = depth_maps_generation_quality) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_quality) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;quality&quot; , facet = &quot;software&quot; , label_size = 1.7 ) + scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-1.11,0.7) , breaks = seq(-1,1,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast BA Abs. % Error&quot; ) ggplot2::ggsave( &quot;../data/qlty_sftwr_comp_ba_ape.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other APE contrasts for publication ptchwrk_qlty_sftwr_comp_ba_ape = plt_contrast( brms_contrast_temp , y_axis_title = &quot;quality contrast&quot; , facet = &quot;software&quot; , label_size = 1.5 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.6 ) + labs( subtitle = &quot;&quot; # &quot;constrast BA Abs. % Error&quot; , x = &quot;BA Abs. % Error constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_qlty_sftwr_comp_ba_ape and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality contrast&quot; , &quot;median difference&lt;br&gt;BA Abs. % Error&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.8: BA Abs. % Error95% HDI of the posterior predictive distribution of group contrasts quality contrast median differenceBA Abs. % Error HDI low HDI high METASHAPE ultra high - high -2.7% -18.4% 13.2% ultra high - medium -7.4% -27.5% 10.9% ultra high - low -7.6% -27.3% 10.3% ultra high - lowest -19.5% -48.4% 2.8% high - medium -4.7% -22.7% 12.4% high - low -4.8% -23.3% 11.7% high - lowest -16.6% -45.0% 3.8% medium - low -0.1% -18.5% 18.4% medium - lowest -11.4% -40.5% 8.2% low - lowest -11.3% -38.9% 9.3% OPENDRONEMAP ultra high - high -4.7% -18.0% 6.5% ultra high - medium -15.0% -36.8% 1.0% ultra high - low -14.6% -36.5% 0.9% ultra high - lowest -18.6% -43.2% 0.2% high - medium -9.9% -30.7% 5.3% high - low -9.5% -30.5% 5.4% high - lowest -13.5% -36.9% 3.3% medium - low 0.3% -18.5% 18.8% medium - lowest -3.3% -25.0% 17.5% low - lowest -3.6% -26.3% 16.8% PIX4D ultra high - high -7.5% -27.1% 6.7% ultra high - medium -11.3% -32.0% 6.2% ultra high - low -9.5% -29.5% 6.1% high - medium -3.5% -25.0% 15.4% high - low -1.9% -21.5% 18.3% medium - low 1.6% -17.3% 22.2% The contrasts above address the question “are there differences in APE based on dense point cloud generation quality within each software?”. To address the different question of “are there differences in APE based on the processing software used at a given dense point cloud generation quality?” we need to utilize a different formulation of the comparison parameter within our call to the tidybayes::compare_levels function and calculate the contrast by software instead # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = software , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = software) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter1 == software, depth_maps_generation_quality) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality) , by = dplyr::join_by(sorter2 == software, depth_maps_generation_quality) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;software&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.7 ) + scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-0.5,0.4) , breaks = seq(-0.5,0.5,0.25) ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 2) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality&quot; , x = &quot;constrast BA Abs. % Error&quot; ) + theme( legend.position = c(.75, .13) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(7, &quot;lines&quot;) ))) ggplot2::ggsave( &quot;../data/sftwr_qlty_comp_ba_ape.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other APE contrasts for publication ptchwrk_sftwr_qlty_comp_ba_ape = plt_contrast( brms_contrast_temp , y_axis_title = &quot;software contrast&quot; , facet = &quot;depth_maps_generation_quality&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.8 ) + facet_wrap(facets = vars(depth_maps_generation_quality), ncol = 3) + labs( subtitle = &quot;&quot; , x = &quot;BA Abs. % Error constrast&quot; ) + theme( legend.position = &quot;inside&quot; , legend.position.inside = c(.8, .10) , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) + guides(fill = guide_colorbar(theme = theme( legend.key.width = unit(1, &quot;lines&quot;), legend.key.height = unit(6.5, &quot;lines&quot;) ))) # ptchwrk_sftwr_qlty_comp_ba_ape and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, depth_maps_generation_quality) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, depth_maps_generation_quality) %&gt;% dplyr::select(contrast, depth_maps_generation_quality, value, .lower, .upper) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(contrast)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;quality&quot; , &quot;median difference&lt;br&gt;BA Abs. % Error&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$contrast))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.9: BA Abs. % Error95% HDI of the posterior predictive distribution of group contrasts quality median differenceBA Abs. % Error HDI low HDI high OPENDRONEMAP - METASHAPE ultra high -5.9% -21.7% 3.7% high -3.8% -19.1% 7.2% medium 0.6% -16.0% 19.7% low 0.3% -15.6% 19.5% lowest -6.5% -30.8% 11.3% PIX4D - METASHAPE ultra high -3.0% -18.1% 8.0% high 1.2% -13.0% 19.2% medium 0.2% -17.0% 19.0% low -1.3% -18.8% 15.2% PIX4D - OPENDRONEMAP ultra high 2.5% -6.6% 15.5% high 5.2% -7.3% 24.6% medium -0.5% -19.8% 17.6% low -1.6% -22.3% 14.5% 8.3.2.5 Software:Filtering - interaction draws_temp = tidyr::crossing( depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ba_ape_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_filtering_mode) + (1 | software) + (1 | depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot draws_temp %&gt;% # remove out-of-sample obs dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(depth_maps_generation_filtering_mode, software) , by = dplyr::join_by(depth_maps_generation_filtering_mode, software) ) %&gt;% # plot ggplot( mapping = aes( y = value, x = software , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_basal_area_abs_pct_error*.6) , labels = scales::percent_format(accuracy = 0.1) , show.limits = T ) + facet_grid(cols = vars(depth_maps_generation_filtering_mode)) + scale_y_continuous( limits = c(-0.005,lmt_basal_area_abs_pct_error*.7) , labels = scales::percent_format(accuracy = 1) ) + labs( x = &quot;software&quot;, y = &quot;BA Abs. % Error&quot; , subtitle = &quot;posterior predictive distribution of BA Abs. % Error with 95% HDI\\nby filtering mode&quot; ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) ) and a table of these 95% HDI values table_temp = draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::select(-c(.point,.interval, .width,.row)) %&gt;% dplyr::arrange(software,depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;filtering mode&quot; , &quot;BA Abs. % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.10: BA Abs. % Error95% HDI of the posterior predictive distribution filtering mode BA Abs. % Errormedian HDI low HDI high METASHAPE aggressive 33.9% 11.6% 64.5% moderate 31.3% 10.5% 58.6% mild 30.3% 10.7% 57.2% disabled 29.8% 10.2% 56.2% OPENDRONEMAP aggressive 28.2% 8.8% 52.1% moderate 29.0% 10.2% 54.8% mild 28.7% 10.0% 53.9% disabled 26.7% 9.1% 50.2% PIX4D aggressive 30.5% 9.5% 59.7% moderate 30.5% 9.6% 58.0% mild 31.0% 10.4% 58.9% disabled 27.1% 8.5% 51.3% we can also make pairwise comparisons # calculate contrast brms_contrast_temp = draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter1 == depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, sorter2 == depth_maps_generation_filtering_mode) ) plot it plt_contrast( brms_contrast_temp # , caption_text = form_temp , y_axis_title = &quot;filtering mode&quot; , facet = &quot;software&quot; , label_size = 1.6 ) + scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-1,1) , breaks = seq(-1,1,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby software&quot; , x = &quot;constrast BA Abs. % Error&quot; ) ggplot2::ggsave( &quot;../data/fltr_sftwr_comp_ba_ape.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) create plot for combining with other APE contrasts for publication ptchwrk_fltr_sftwr_comp_ba_ape = plt_contrast( brms_contrast_temp , y_axis_title = &quot;filtering mode contrast&quot; , facet = &quot;software&quot; , label_size = 1.7 , label = &quot;pct_gt_zero_lab_sm&quot; , annotate_size = 1.6 ) + labs( subtitle = &quot;&quot; # &quot;constrast BA Abs. % Error&quot; , x = &quot;BA Abs. % Error constrast&quot; ) + theme( legend.position=&quot;none&quot; , axis.title.y = element_text(size = 10, face = &quot;bold&quot;) , axis.title.x = element_text(size = 8) ) # ptchwrk_fltr_sftwr_comp_ba_ape and summarize these contrasts table_temp = brms_contrast_temp %&gt;% dplyr::group_by(contrast, software) %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::arrange(contrast, software) %&gt;% dplyr::select(contrast, software, value, .lower, .upper) %&gt;% dplyr::arrange(software, contrast) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution of group contrasts&quot; , col.names = c( &quot;filtering contrast&quot; , &quot;median difference&lt;br&gt;BA Abs. % Error&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.11: BA Abs. % Error95% HDI of the posterior predictive distribution of group contrasts filtering contrast median differenceBA Abs. % Error HDI low HDI high METASHAPE disabled - mild -0.4% -13.5% 12.3% disabled - moderate -1.1% -15.3% 10.7% disabled - aggressive -3.3% -20.4% 8.1% mild - moderate -0.7% -13.9% 11.6% mild - aggressive -2.8% -21.5% -20.4% mild - aggressive -2.8% -19.9% 9.3% moderate - aggressive -2.0% -18.9% 10.6% OPENDRONEMAP disabled - mild -1.5% -14.6% 8.8% disabled - moderate -1.8% -15.4% 8.2% disabled - aggressive -1.1% -14.8% 9.7% mild - moderate -0.2% -12.8% 11.5% mild - aggressive 0.3% -11.8% 13.2% moderate - aggressive 0.6% -11.3% 13.8% moderate - aggressive 0.6% 14.2% 14.5% PIX4D disabled - mild -2.9% -19.4% 7.7% disabled - moderate -2.6% -17.5% 8.4% mild - moderate 0.2% -12.8% 14.4% 8.3.2.6 Software:Quality:Filtering - interaction # get draws fltr_sftwr_draws_temp = tidyr::crossing( depth_maps_generation_quality = unique(ptcld_validation_data$depth_maps_generation_quality) , depth_maps_generation_filtering_mode = unique(ptcld_validation_data$depth_maps_generation_filtering_mode) , software = unique(ptcld_validation_data$software) ) %&gt;% tidybayes::add_epred_draws( brms_ba_ape_mod, allow_new_levels = T # this part is crucial , re_formula = ~ (1 | depth_maps_generation_quality) + # main effects (1 | depth_maps_generation_quality) + (1 | depth_maps_generation_filtering_mode) + (1 | software) + # two-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode) + (1 | depth_maps_generation_quality:software) + (1 | depth_maps_generation_filtering_mode:software) + # three-way interactions (1 | depth_maps_generation_quality:depth_maps_generation_filtering_mode:software) ) %&gt;% dplyr::rename(value = .epred) %&gt;% dplyr::mutate(med = tidybayes::median_hdci(value)$y) # plot qlty_fltr_sftwr_ba_ape = fltr_sftwr_draws_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% ggplot( mapping = aes( y = value , x = depth_maps_generation_filtering_mode , fill = med ) ) + geom_hline(yintercept = 0, color = &quot;gray33&quot;) + tidybayes::stat_eye( point_interval = median_hdi, .width = .95 , slab_alpha = 0.98 , interval_color = &quot;black&quot;, linewidth = 1 , point_color = &quot;black&quot;, point_fill = &quot;black&quot;, point_size = 1 ) + scale_fill_stepsn( n.breaks = 5 , colors = viridis::mako(n = 5, begin = 0.2, end = 0.9, direction = -1) , limits = c(0,lmt_basal_area_abs_pct_error*.6) , labels = scales::percent_format(accuracy = 0.1) , show.limits = T ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) # , switch = &quot;y&quot; ) + scale_y_continuous( limits = c(-0.005,lmt_basal_area_abs_pct_error*.8) , labels = scales::percent_format(accuracy = 1) ) + labs( x = &quot;filtering mode&quot;, y = &quot;BA Abs. % Error&quot; , subtitle = &quot;posterior predictive distribution of BA Abs. % Error with 95% HDI\\nby dense cloud quality and software&quot; # , caption = form_temp ) + theme_light() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1) , strip.text = element_text(color = &quot;black&quot;, face = &quot;bold&quot;) , panel.grid = element_blank() # , strip.placement = &quot;outside&quot; ) + guides( fill = guide_legend(override.aes = list(shape = NA, size = 6, alpha = 0.9, lwd = NA)) ) # print it qlty_fltr_sftwr_ba_ape ggplot2::ggsave(&quot;../data/qlty_fltr_sftwr_ba_ape.png&quot;, height = 7, width = 10.5) and a table of these 95% HDI values table_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::median_hdi(value) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) %&gt;% dplyr::select(c( software, depth_maps_generation_quality, depth_maps_generation_filtering_mode , value, .lower, .upper )) %&gt;% dplyr::ungroup() %&gt;% dplyr::arrange(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) %&gt;% dplyr::mutate(dplyr::across(.cols = is.numeric, .fns = ~ scales::percent(.x,accuracy = 0.1))) table_temp %&gt;% # dplyr::select(-c(software)) %&gt;% kableExtra::kbl( digits = 2 , caption = &quot;BA Abs. % Error&lt;br&gt;95% HDI of the posterior predictive distribution&quot; , col.names = c( &quot;software&quot;, &quot;quality&quot;, &quot;filtering mode&quot; , &quot;BA Abs. % Error&lt;br&gt;median&quot; , &quot;HDI low&quot;, &quot;HDI high&quot; ) , escape = F ) %&gt;% kableExtra::kable_styling() %&gt;% # kableExtra::pack_rows(index = table(forcats::fct_inorder(table_temp$software))) %&gt;% kableExtra::collapse_rows(columns = 1:2, valign = &quot;top&quot;) %&gt;% kableExtra::scroll_box(height = &quot;8in&quot;) Table 8.12: BA Abs. % Error95% HDI of the posterior predictive distribution software quality filtering mode BA Abs. % Errormedian HDI low HDI high METASHAPE lowest aggressive 56.4% 21.5% 106.0% moderate 50.0% 20.3% 94.5% mild 43.5% 15.6% 81.8% disabled 42.3% 16.1% 80.2% low aggressive 42.3% 17.2% 80.7% moderate 31.7% 11.7% 58.6% mild 27.8% 9.3% 51.7% disabled 32.7% 12.8% 61.3% medium aggressive 40.8% 15.2% 76.3% moderate 28.9% 10.2% 53.7% mild 34.9% 13.0% 66.8% disabled 29.0% 11.2% 54.3% high aggressive 25.3% 8.6% 48.5% moderate 31.7% 12.2% 60.1% mild 26.2% 10.1% 49.1% disabled 27.2% 10.7% 50.7% ultra high aggressive 26.0% 10.3% 50.7% moderate 24.6% 9.2% 46.4% mild 25.1% 9.8% 47.9% disabled 23.2% 9.1% 44.2% OPENDRONEMAP lowest aggressive 39.8% 15.7% 75.7% moderate 40.3% 14.7% 75.3% mild 38.5% 15.1% 73.2% disabled 35.3% 12.9% 65.6% low aggressive 37.5% 14.3% 71.4% moderate 34.6% 13.3% 64.4% mild 32.3% 12.1% 60.3% disabled 33.7% 13.3% 63.6% medium aggressive 36.9% 13.7% 69.3% moderate 32.9% 12.6% 61.1% mild 39.6% 15.4% 75.3% disabled 30.8% 11.8% 57.3% high aggressive 18.8% 6.2% 36.5% moderate 26.6% 9.7% 50.6% mild 22.4% 8.5% 41.7% disabled 22.5% 8.9% 42.0% ultra high aggressive 16.7% 5.9% 31.8% moderate 18.2% 7.3% 34.6% mild 18.4% 7.0% 34.9% disabled 14.8% 5.4% 28.6% PIX4D low moderate 31.1% 11.7% 58.6% mild 28.3% 10.2% 54.5% disabled 31.3% 12.6% 58.9% medium moderate 28.9% 9.9% 56.0% mild 45.7% 16.6% 85.4% disabled 26.3% 9.0% 50.8% high moderate 39.3% 15.0% 73.9% mild 29.2% 11.2% 55.9% disabled 26.0% 9.6% 49.9% ultra high moderate 20.7% 7.5% 39.0% mild 22.3% 8.8% 42.8% disabled 17.8% 7.0% 34.0% we can also make pairwise comparisons # calculate contrast brms_contrast_temp = fltr_sftwr_draws_temp %&gt;% tidybayes::compare_levels( value , by = depth_maps_generation_filtering_mode , comparison = &quot;pairwise&quot; ) %&gt;% dplyr::rename(contrast = depth_maps_generation_filtering_mode) # separate contrast brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::ungroup() %&gt;% tidyr::separate_wider_delim( cols = contrast , delim = &quot; - &quot; , names = paste0( &quot;sorter&quot; , 1:(max(stringr::str_count(brms_contrast_temp$contrast, &quot;-&quot;))+1) ) , too_few = &quot;align_start&quot; , cols_remove = F ) %&gt;% dplyr::filter(sorter1!=sorter2) %&gt;% dplyr::mutate( dplyr::across( tidyselect::starts_with(&quot;sorter&quot;) , .fns = function(x){factor( x, ordered = T , levels = levels(ptcld_validation_data$depth_maps_generation_filtering_mode) )} ) , contrast = contrast %&gt;% forcats::fct_reorder( paste0(as.numeric(sorter1), as.numeric(sorter2)) %&gt;% as.numeric() ) %&gt;% # re order for filtering mode forcats::fct_rev() ) %&gt;% # median_hdi summary for coloring dplyr::group_by(contrast, software, depth_maps_generation_quality) %&gt;% make_contrast_vars() # remove out-of-sample obs brms_contrast_temp = brms_contrast_temp %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter1==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::inner_join( ptcld_validation_data %&gt;% dplyr::distinct(software, depth_maps_generation_quality, depth_maps_generation_filtering_mode) , by = dplyr::join_by(software, depth_maps_generation_quality, sorter2==depth_maps_generation_filtering_mode) ) %&gt;% dplyr::mutate(depth_maps_generation_quality = depth_maps_generation_quality %&gt;% forcats::fct_rev()) plot it brms_contrast_temp %&gt;% plt_contrast( facet = c(&quot;depth_maps_generation_quality&quot;, &quot;software&quot;) , y_axis_title = &quot;filtering mode&quot; , label_size = 0 ) + facet_grid( rows = vars(software) , cols = vars(depth_maps_generation_quality) ) + scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-0.8,0.6) , breaks = seq(-1,1,0.5) ) + labs( subtitle = &quot;posterior predictive distribution of group constrasts with 95% &amp; 50% HDI\\nby dense cloud quality and software&quot; , x = &quot;constrast BA Abs. % Error&quot; ) ggplot2::ggsave( &quot;../data/qlty_fltr_sftwr_comp_ba_ape.png&quot; , plot = ggplot2::last_plot() + labs(subtitle = &quot;&quot;) , height = 7, width = 10.5 ) Export some final images for publication p1_temp = qlty_fltr_sftwr_ba_pe + labs(subtitle = &quot;A: Basal Area % Error&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) p2_temp = qlty_fltr_sftwr_ba_ape + labs(subtitle = &quot;B: Basal Area Abs. % Error&quot;) + theme(plot.subtitle = element_text(face=&quot;bold&quot;)) # export p1_temp / p2_temp ggplot2::ggsave( filename = paste0(&quot;../data/qlty_fltr_sftwr_ba_comb.jpeg&quot;) , plot = ggplot2::last_plot() , width = 8.5 , height = 11 , units = &quot;in&quot; , dpi = &quot;print&quot; ) patchwork of Height APE contrasts layout_temp = c( # area(t, l, b, r) patchwork::area(2, 1, 2, 1) , patchwork::area(2, 3, 2, 3) , patchwork::area(4, 1, 4, 3) ) # check the layout # plot(layout_temp) ############################ # patchwork for height ############################ ptchwrk_qlty_sftwr_comp_ba_ape + labs(subtitle = &quot;A: Quality Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + ptchwrk_fltr_sftwr_comp_ba_ape + labs(subtitle = &quot;B: Filtering Mode Contrast by Software&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) + patchwork::free( ptchwrk_sftwr_qlty_comp_ba_ape + labs(subtitle = &quot;C: Software Contrast by Quality&quot;) + theme(plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3)) ) + # plot_annotation(tag_levels = list(c(&#39;#&#39;, &#39;&amp;&#39;), &#39;1&#39;)) + patchwork::plot_layout( design = layout_temp , widths = c(1,0.01,1) , heights = c(0.01,1,0.01,1,0.01) ) &amp; scale_x_continuous( labels = scales::percent_format(accuracy = 1) , limits = c(-0.85,0.55) , breaks = seq(-1,1,0.25) ) &amp; theme( axis.title.y = element_blank() , plot.subtitle = element_text(face = &quot;bold&quot;, hjust = 0.0) # , plot.background = element_rect(colour = &quot;gray88&quot;, fill=NA, size=3) ) ggplot2::ggsave( filename = paste0(&quot;../data/all_ba_ape_contrasts.jpeg&quot;) , plot = ggplot2::last_plot() , width = 11 , height = 8.5 , units = &quot;in&quot; , dpi = &quot;print&quot; ) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
